2025-03-19T18:46:04.474536Z  INFO 🚀 Starting trunk 0.21.7
2025-03-19T18:46:04.474917Z  INFO ⏫ Found an update of trunk: 0.21.7 -> 0.21.9
2025-03-19T18:46:04.476500Z  INFO 📦 starting build
warning: unused import: `std::io::Error`
 --> crates/rrfd/src/lib.rs:8:5
  |
8 | use std::io::Error;
  |     ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::io::ErrorKind`
 --> crates/rrfd/src/lib.rs:9:5
  |
9 | use std::io::ErrorKind;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::path::Path`
 --> crates/brush-dataset/src/storage/mod.rs:7:5
  |
7 | use std::path::Path;
  |     ^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `DatasetInfo` and `StorageType`
 --> crates/brush-dataset/src/storage/indexed_db.rs:6:29
  |
6 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |                             ^^^^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `Path`
 --> crates/brush-dataset/src/storage/filesystem.rs:4:17
  |
4 | use std::path::{Path, PathBuf};
  |                 ^^^^

warning: unused import: `DatasetStorage`
 --> crates/brush-dataset/src/storage/filesystem.rs:7:13
  |
7 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |             ^^^^^^^^^^^^^^

warning: constant `DB_NAME` is never used
 --> crates/brush-dataset/src/storage/indexed_db.rs:9:7
  |
9 | const DB_NAME: &str = "brush_dataset_storage";
  |       ^^^^^^^
  |
  = note: `#[warn(dead_code)]` on by default

warning: constant `METADATA_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:10:7
   |
10 | const METADATA_STORE: &str = "metadata";
   |       ^^^^^^^^^^^^^^

warning: constant `DATASET_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:11:7
   |
11 | const DATASET_STORE: &str = "datasets";
   |       ^^^^^^^^^^^^^

warning: method `get_total_storage_used` is never used
   --> crates/brush-dataset/src/storage/filesystem.rs:126:8
    |
15  | impl FilesystemStorage {
    | ---------------------- method in this implementation
...
126 |     fn get_total_storage_used(&self) -> Result<u64> {
    |        ^^^^^^^^^^^^^^^^^^^^^^

warning: `rrfd` (lib) generated 2 warnings (run `cargo fix --lib -p rrfd` to apply 2 suggestions)
warning: `brush-dataset` (lib) generated 8 warnings (run `cargo fix --lib -p brush-dataset` to apply 4 suggestions)
   Compiling brush-app v0.2.0 (/Users/ryanhickman/code/brush/crates/brush-app)
warning: unused import: `std::fmt::Debug`
  --> crates/brush-app/src/app.rs:26:5
   |
26 | use std::fmt::Debug;
   |     ^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::hash::Hash`
  --> crates/brush-app/src/app.rs:27:5
   |
27 | use std::hash::Hash;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `std::io::Error`
  --> crates/brush-app/src/app.rs:28:5
   |
28 | use std::io::Error;
   |     ^^^^^^^^^^^^^^

warning: unused import: `std::io::ErrorKind`
  --> crates/brush-app/src/app.rs:29:5
   |
29 | use std::io::ErrorKind;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
  --> crates/brush-app/src/app.rs:30:5
   |
30 | use std::pin::Pin;
   |     ^^^^^^^^^^^^^

warning: unused import: `std::time::Duration`
  --> crates/brush-app/src/app.rs:32:5
   |
32 | use std::time::Duration;
   |     ^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Align2` and `RichText`
  --> crates/brush-app/src/app.rs:33:12
   |
33 | use egui::{Align2, RichText};
   |            ^^^^^^  ^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
  --> crates/brush-app/src/app.rs:34:5
   |
34 | use brush_dataset::splat_export;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ExportError` and `ExportFormat`
  --> crates/brush-app/src/app.rs:36:44
   |
36 | use crate::export_service::{ExportService, ExportError, ExportFormat};
   |                                            ^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `brush_dataset::storage`
  --> crates/brush-app/src/app.rs:37:5
   |
37 | use brush_dataset::storage;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
 --> crates/brush-app/src/panels/scene.rs:1:5
  |
1 | use brush_dataset::splat_export;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ControlMessage`
 --> crates/brush-app/src/panels/scene.rs:2:35
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                   ^^^^^^^^^^^^^^

warning: unused import: `tokio_with_wasm::alias as tokio_wasm`
  --> crates/brush-app/src/panels/scene.rs:17:5
   |
17 | use tokio_with_wasm::alias as tokio_wasm;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ProcessMessage`
 --> crates/brush-app/src/overlays/controls_detail.rs:2:51
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                                   ^^^^^^^^^^^^^^

warning: unused import: `std::sync::Once`
 --> crates/brush-app/src/utils.rs:2:5
  |
2 | use std::sync::Once;
  |     ^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> crates/brush-app/src/app.rs:813:63
    |
813 |         let debug_mode = search_params.get("debug").unwrap_or("false");
    |                                                     --------- ^^^^^^^ expected `&String`, found `&str`
    |                                                     |
    |                                                     arguments to this method are incorrect
    |
    = note: expected reference `&std::string::String`
               found reference `&'static str`
help: the return type of this call is `&'static str` due to the type of the argument passed
   --> crates/brush-app/src/app.rs:813:26
    |
813 |         let debug_mode = search_params.get("debug").unwrap_or("false");
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------^
    |                                                               |
    |                                                               this argument influences the return type of `unwrap_or`
note: method defined here
   --> /rustc/4d91de4e48198da2e33413efdcd9cd2cc0c46688/library/core/src/option.rs:998:12
help: use `Option::map_or` to deref inner value of `Option`
    |
813 |         let debug_mode = search_params.get("debug").map_or("false", |v| v);
    |                                                     ~~~~~~        +++++++

error[E0308]: mismatched types
   --> crates/brush-app/src/app.rs:814:66
    |
814 |         let auto_test = search_params.get("auto_test").unwrap_or("false");
    |                                                        --------- ^^^^^^^ expected `&String`, found `&str`
    |                                                        |
    |                                                        arguments to this method are incorrect
    |
    = note: expected reference `&std::string::String`
               found reference `&'static str`
help: the return type of this call is `&'static str` due to the type of the argument passed
   --> crates/brush-app/src/app.rs:814:25
    |
814 |         let auto_test = search_params.get("auto_test").unwrap_or("false");
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------^
    |                                                                  |
    |                                                                  this argument influences the return type of `unwrap_or`
note: method defined here
   --> /rustc/4d91de4e48198da2e33413efdcd9cd2cc0c46688/library/core/src/option.rs:998:12
help: use `Option::map_or` to deref inner value of `Option`
    |
814 |         let auto_test = search_params.get("auto_test").map_or("false", |v| v);
    |                                                        ~~~~~~        +++++++

error[E0277]: the trait bound `str: std::convert::From<std::string::String>` is not satisfied
   --> crates/brush-app/src/app.rs:839:30
    |
839 |   ...                   &format!("
    |  ________________________^
840 | | ...                       console.log('🧪 Scheduling test PLY file load');
841 | | ...                       setTimeout(() => {{
842 | | ...                           console.log('🧪 Executing automated test: Loading PLY file');
...   |
846 | | ...                       }}, 1500);
847 | | ...                   ").into()
    | |                        ^ ---- required by a bound introduced by this call
    | |________________________|
    |                          the trait `std::convert::From<std::string::String>` is not implemented for `str`
    |
    = help: the following other types implement trait `std::convert::From<T>`:
              `&str` implements `std::convert::From<&icu_locid::extensions::other::subtag::Subtag>`
              `&str` implements `std::convert::From<&icu_locid::extensions::private::other::Subtag>`
              `&str` implements `std::convert::From<&icu_locid::extensions::transform::key::Key>`
              `&str` implements `std::convert::From<&icu_locid::extensions::unicode::attribute::Attribute>`
              `&str` implements `std::convert::From<&icu_locid::extensions::unicode::key::Key>`
              `&str` implements `std::convert::From<&icu_locid::subtags::language::Language>`
              `&str` implements `std::convert::From<&icu_locid::subtags::region::Region>`
              `&str` implements `std::convert::From<&icu_locid::subtags::script::Script>`
            and 2 others
    = note: required for `std::string::String` to implement `Into<str>`

error[E0599]: no method named `ok` found for enum `std::option::Option` in the current scope
   --> crates/brush-app/src/app.rs:850:22
    |
836 | /                 web_sys::window()
837 | |                     .and_then(|w| w.request_animation_frame(
838 | |                         &js_sys::Function::new_with_args("", 
839 | |                             &format!("
...   |
849 | |                     ).ok())
850 | |                     .ok();
    | |_____________________-^^
    |
help: there is a method `or` with a similar name, but with different arguments
   --> /rustc/4d91de4e48198da2e33413efdcd9cd2cc0c46688/library/core/src/option.rs:1524:5

error[E0599]: no method named `unchecked_ref` found for reference `&JsValue` in the current scope
   --> crates/brush-app/src/app.rs:866:50
    |
866 | ...                   closure.as_ref().unchecked_ref(),
    |                                        ^^^^^^^^^^^^^
    |
    = help: items from traits can only be used if the trait is in scope
help: trait `JsCast` which provides `unchecked_ref` is implemented but not in scope; perhaps you want to import it
    |
1   + use wasm_bindgen::JsCast;
    |
help: there is a method `unchecked_into` with a similar name
    |
866 |                                 closure.as_ref().unchecked_into(),
    |                                                  ~~~~~~~~~~~~~~

error[E0599]: no method named `ok` found for enum `std::option::Option` in the current scope
   --> crates/brush-app/src/app.rs:871:22
    |
861 | /                 web_sys::window()
862 | |                     .and_then(|window| {
863 | |                         window
864 | |                             .add_event_listener_with_callback(
...   |
870 | |                     })
871 | |                     .ok();
    | |_____________________-^^
    |
help: there is a method `or` with a similar name, but with different arguments
   --> /rustc/4d91de4e48198da2e33413efdcd9cd2cc0c46688/library/core/src/option.rs:1524:5

error[E0599]: no method named `get_dataset_detail_overlay_mut` found for mutable reference `&mut AppContext` in the current scope
  --> crates/brush-app/src/utils.rs:80:44
   |
80 |     if let Some(dataset_overlay) = context.get_dataset_detail_overlay_mut() {
   |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `&mut AppContext`

warning: unused variable: `dataset_detail_overlay`
    --> crates/brush-app/src/app.rs:1277:21
     |
1277 |                 let dataset_detail_overlay = self.dataset_detail_overlay.clone();
     |                     ^^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dataset_detail_overlay`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `js_window`
    --> crates/brush-app/src/app.rs:1309:37
     |
1309 | ...                   let js_window = web_sys::window().unwrap();
     |                           ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_js_window`

warning: unused variable: `current_aspect`
  --> crates/brush-app/src/panels/scene.rs:91:13
   |
91 |         let current_aspect = size.x / size.y;
   |             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_current_aspect`

warning: unused variable: `view_aspect`
  --> crates/brush-app/src/panels/scene.rs:93:21
   |
93 |         if let Some(view_aspect) = context.view_aspect {
   |                     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_view_aspect`

warning: variable does not need to be mutable
  --> crates/brush-app/src/panels/scene.rs:88:13
   |
88 |         let mut size = size.floor();
   |             ----^^^^
   |             |
   |             help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: unused variable: `dataset_folder`
   --> crates/brush-app/src/overlays/dataset_detail.rs:457:61
    |
457 |     fn process_selected_file(&mut self, file_path: PathBuf, dataset_folder: PathBuf) {
    |                                                             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dataset_folder`

warning: unused variable: `dataset_folder`
   --> crates/brush-app/src/overlays/dataset_detail.rs:575:56
    |
575 |     fn copy_file_as_is(&mut self, file_path: &PathBuf, dataset_folder: &PathBuf) {
    |                                                        ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dataset_folder`

Some errors have detailed explanations: E0277, E0308, E0599.
For more information about an error, try `rustc --explain E0277`.
warning: `brush-app` (lib) generated 22 warnings
error: could not compile `brush-app` (lib) due to 7 previous errors; 22 warnings emitted
2025-03-19T18:46:05.838189Z ERROR ❌ error
error from build pipeline

Caused by:
    0: HTML build pipeline failed (1 errors), showing first
    1: error from asset pipeline
    2: running cargo build
    3: error during cargo build execution
    4: cargo call to executable 'cargo' with args: '["build", "--target=wasm32-unknown-unknown", "--manifest-path", "/Users/ryanhickman/code/brush/crates/brush-app/Cargo.toml"]' returned a bad status: exit status: 101
2025-03-19T18:46:05.838242Z  INFO 📡 serving static assets at -> /
2025-03-19T18:46:05.838289Z  INFO 📡 server listening at:
2025-03-19T18:46:05.838299Z  INFO     🏠 http://127.0.0.1:8080/
2025-03-19T18:46:05.838303Z  INFO     🏠 http://[::1]:8080/
2025-03-19T18:46:05.838450Z  INFO     🏠 http://localhost.:8080/
2025-03-19T19:15:56.727467Z  INFO 📦 starting build
warning: unused import: `std::path::Path`
 --> crates/brush-dataset/src/storage/mod.rs:7:5
  |
7 | use std::path::Path;
  |     ^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `DatasetInfo` and `StorageType`
 --> crates/brush-dataset/src/storage/indexed_db.rs:6:29
  |
6 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |                             ^^^^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `Path`
 --> crates/brush-dataset/src/storage/filesystem.rs:4:17
  |
4 | use std::path::{Path, PathBuf};
  |                 ^^^^

warning: unused import: `DatasetStorage`
 --> crates/brush-dataset/src/storage/filesystem.rs:7:13
  |
7 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |             ^^^^^^^^^^^^^^

warning: constant `DB_NAME` is never used
 --> crates/brush-dataset/src/storage/indexed_db.rs:9:7
  |
9 | const DB_NAME: &str = "brush_dataset_storage";
  |       ^^^^^^^
  |
  = note: `#[warn(dead_code)]` on by default

warning: constant `METADATA_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:10:7
   |
10 | const METADATA_STORE: &str = "metadata";
   |       ^^^^^^^^^^^^^^

warning: constant `DATASET_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:11:7
   |
11 | const DATASET_STORE: &str = "datasets";
   |       ^^^^^^^^^^^^^

warning: method `get_total_storage_used` is never used
   --> crates/brush-dataset/src/storage/filesystem.rs:126:8
    |
15  | impl FilesystemStorage {
    | ---------------------- method in this implementation
...
126 |     fn get_total_storage_used(&self) -> Result<u64> {
    |        ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::io::Error`
 --> crates/rrfd/src/lib.rs:8:5
  |
8 | use std::io::Error;
  |     ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::io::ErrorKind`
 --> crates/rrfd/src/lib.rs:9:5
  |
9 | use std::io::ErrorKind;
  |     ^^^^^^^^^^^^^^^^^^

warning: `brush-dataset` (lib) generated 8 warnings (run `cargo fix --lib -p brush-dataset` to apply 4 suggestions)
warning: `rrfd` (lib) generated 2 warnings (run `cargo fix --lib -p rrfd` to apply 2 suggestions)
   Compiling brush-app v0.2.0 (/Users/ryanhickman/code/brush/crates/brush-app)
warning: unused import: `std::fmt::Debug`
  --> crates/brush-app/src/app.rs:26:5
   |
26 | use std::fmt::Debug;
   |     ^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::hash::Hash`
  --> crates/brush-app/src/app.rs:27:5
   |
27 | use std::hash::Hash;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `std::io::Error`
  --> crates/brush-app/src/app.rs:28:5
   |
28 | use std::io::Error;
   |     ^^^^^^^^^^^^^^

warning: unused import: `std::io::ErrorKind`
  --> crates/brush-app/src/app.rs:29:5
   |
29 | use std::io::ErrorKind;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
  --> crates/brush-app/src/app.rs:30:5
   |
30 | use std::pin::Pin;
   |     ^^^^^^^^^^^^^

warning: unused import: `std::time::Duration`
  --> crates/brush-app/src/app.rs:32:5
   |
32 | use std::time::Duration;
   |     ^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Align2` and `RichText`
  --> crates/brush-app/src/app.rs:33:12
   |
33 | use egui::{Align2, RichText};
   |            ^^^^^^  ^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
  --> crates/brush-app/src/app.rs:34:5
   |
34 | use brush_dataset::splat_export;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ExportError` and `ExportFormat`
  --> crates/brush-app/src/app.rs:36:44
   |
36 | use crate::export_service::{ExportService, ExportError, ExportFormat};
   |                                            ^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `brush_dataset::storage`
  --> crates/brush-app/src/app.rs:37:5
   |
37 | use brush_dataset::storage;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
 --> crates/brush-app/src/panels/scene.rs:1:5
  |
1 | use brush_dataset::splat_export;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ControlMessage`
 --> crates/brush-app/src/panels/scene.rs:2:35
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                   ^^^^^^^^^^^^^^

warning: unused import: `tokio_with_wasm::alias as tokio_wasm`
  --> crates/brush-app/src/panels/scene.rs:17:5
   |
17 | use tokio_with_wasm::alias as tokio_wasm;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ProcessMessage`
 --> crates/brush-app/src/overlays/controls_detail.rs:2:51
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                                   ^^^^^^^^^^^^^^

warning: unused import: `std::sync::Once`
 --> crates/brush-app/src/utils.rs:2:5
  |
2 | use std::sync::Once;
  |     ^^^^^^^^^^^^^^^

error[E0277]: the trait bound `str: std::convert::From<std::string::String>` is not satisfied
   --> crates/brush-app/src/app.rs:839:30
    |
839 |   ...                   &format!("
    |  ________________________^
840 | | ...                       console.log('🧪 Scheduling test PLY file load');
841 | | ...                       setTimeout(() => {{
842 | | ...                           console.log('🧪 Executing automated test: Loading PLY file');
...   |
846 | | ...                       }}, 1500);
847 | | ...                   ").into()
    | |                        ^ ---- required by a bound introduced by this call
    | |________________________|
    |                          the trait `std::convert::From<std::string::String>` is not implemented for `str`
    |
    = help: the following other types implement trait `std::convert::From<T>`:
              `&str` implements `std::convert::From<&icu_locid::extensions::other::subtag::Subtag>`
              `&str` implements `std::convert::From<&icu_locid::extensions::private::other::Subtag>`
              `&str` implements `std::convert::From<&icu_locid::extensions::transform::key::Key>`
              `&str` implements `std::convert::From<&icu_locid::extensions::unicode::attribute::Attribute>`
              `&str` implements `std::convert::From<&icu_locid::extensions::unicode::key::Key>`
              `&str` implements `std::convert::From<&icu_locid::subtags::language::Language>`
              `&str` implements `std::convert::From<&icu_locid::subtags::region::Region>`
              `&str` implements `std::convert::From<&icu_locid::subtags::script::Script>`
            and 2 others
    = note: required for `std::string::String` to implement `Into<str>`

error[E0599]: no method named `ok` found for enum `std::option::Option` in the current scope
   --> crates/brush-app/src/app.rs:850:22
    |
836 | /                 web_sys::window()
837 | |                     .and_then(|w| w.request_animation_frame(
838 | |                         &js_sys::Function::new_with_args("", 
839 | |                             &format!("
...   |
849 | |                     ).ok())
850 | |                     .ok();
    | |_____________________-^^
    |
help: there is a method `or` with a similar name, but with different arguments
   --> /rustc/4d91de4e48198da2e33413efdcd9cd2cc0c46688/library/core/src/option.rs:1524:5

error[E0599]: no method named `unchecked_ref` found for reference `&JsValue` in the current scope
   --> crates/brush-app/src/app.rs:866:50
    |
866 | ...                   closure.as_ref().unchecked_ref(),
    |                                        ^^^^^^^^^^^^^
    |
    = help: items from traits can only be used if the trait is in scope
help: trait `JsCast` which provides `unchecked_ref` is implemented but not in scope; perhaps you want to import it
    |
1   + use wasm_bindgen::JsCast;
    |
help: there is a method `unchecked_into` with a similar name
    |
866 |                                 closure.as_ref().unchecked_into(),
    |                                                  ~~~~~~~~~~~~~~

error[E0599]: no method named `ok` found for enum `std::option::Option` in the current scope
   --> crates/brush-app/src/app.rs:871:22
    |
861 | /                 web_sys::window()
862 | |                     .and_then(|window| {
863 | |                         window
864 | |                             .add_event_listener_with_callback(
...   |
870 | |                     })
871 | |                     .ok();
    | |_____________________-^^
    |
help: there is a method `or` with a similar name, but with different arguments
   --> /rustc/4d91de4e48198da2e33413efdcd9cd2cc0c46688/library/core/src/option.rs:1524:5

error[E0599]: no method named `get_dataset_detail_overlay_mut` found for mutable reference `&mut AppContext` in the current scope
  --> crates/brush-app/src/utils.rs:80:44
   |
80 |     if let Some(dataset_overlay) = context.get_dataset_detail_overlay_mut() {
   |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `&mut AppContext`

warning: unused variable: `dataset_detail_overlay`
    --> crates/brush-app/src/app.rs:1277:21
     |
1277 |                 let dataset_detail_overlay = self.dataset_detail_overlay.clone();
     |                     ^^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dataset_detail_overlay`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `js_window`
    --> crates/brush-app/src/app.rs:1309:37
     |
1309 | ...                   let js_window = web_sys::window().unwrap();
     |                           ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_js_window`

warning: unused variable: `current_aspect`
  --> crates/brush-app/src/panels/scene.rs:91:13
   |
91 |         let current_aspect = size.x / size.y;
   |             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_current_aspect`

warning: unused variable: `view_aspect`
  --> crates/brush-app/src/panels/scene.rs:93:21
   |
93 |         if let Some(view_aspect) = context.view_aspect {
   |                     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_view_aspect`

warning: variable does not need to be mutable
  --> crates/brush-app/src/panels/scene.rs:88:13
   |
88 |         let mut size = size.floor();
   |             ----^^^^
   |             |
   |             help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: unused variable: `dataset_folder`
   --> crates/brush-app/src/overlays/dataset_detail.rs:457:61
    |
457 |     fn process_selected_file(&mut self, file_path: PathBuf, dataset_folder: PathBuf) {
    |                                                             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dataset_folder`

warning: unused variable: `dataset_folder`
   --> crates/brush-app/src/overlays/dataset_detail.rs:575:56
    |
575 |     fn copy_file_as_is(&mut self, file_path: &PathBuf, dataset_folder: &PathBuf) {
    |                                                        ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dataset_folder`

Some errors have detailed explanations: E0277, E0599.
For more information about an error, try `rustc --explain E0277`.
warning: `brush-app` (lib) generated 22 warnings
error: could not compile `brush-app` (lib) due to 5 previous errors; 22 warnings emitted
2025-03-19T19:15:58.463262Z ERROR ❌ error
error from build pipeline

Caused by:
    0: HTML build pipeline failed (1 errors), showing first
    1: error from asset pipeline
    2: running cargo build
    3: error during cargo build execution
    4: cargo call to executable 'cargo' with args: '["build", "--target=wasm32-unknown-unknown", "--manifest-path", "/Users/ryanhickman/code/brush/crates/brush-app/Cargo.toml"]' returned a bad status: exit status: 101
2025-03-19T19:16:07.215601Z  INFO 📦 starting build
warning: unused import: `std::io::Error`
 --> crates/rrfd/src/lib.rs:8:5
  |
8 | use std::io::Error;
  |     ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::io::ErrorKind`
 --> crates/rrfd/src/lib.rs:9:5
  |
9 | use std::io::ErrorKind;
  |     ^^^^^^^^^^^^^^^^^^

warning: `rrfd` (lib) generated 2 warnings (run `cargo fix --lib -p rrfd` to apply 2 suggestions)
warning: unused import: `std::path::Path`
 --> crates/brush-dataset/src/storage/mod.rs:7:5
  |
7 | use std::path::Path;
  |     ^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `DatasetInfo` and `StorageType`
 --> crates/brush-dataset/src/storage/indexed_db.rs:6:29
  |
6 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |                             ^^^^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `Path`
 --> crates/brush-dataset/src/storage/filesystem.rs:4:17
  |
4 | use std::path::{Path, PathBuf};
  |                 ^^^^

warning: unused import: `DatasetStorage`
 --> crates/brush-dataset/src/storage/filesystem.rs:7:13
  |
7 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |             ^^^^^^^^^^^^^^

warning: constant `DB_NAME` is never used
 --> crates/brush-dataset/src/storage/indexed_db.rs:9:7
  |
9 | const DB_NAME: &str = "brush_dataset_storage";
  |       ^^^^^^^
  |
  = note: `#[warn(dead_code)]` on by default

warning: constant `METADATA_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:10:7
   |
10 | const METADATA_STORE: &str = "metadata";
   |       ^^^^^^^^^^^^^^

warning: constant `DATASET_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:11:7
   |
11 | const DATASET_STORE: &str = "datasets";
   |       ^^^^^^^^^^^^^

warning: method `get_total_storage_used` is never used
   --> crates/brush-dataset/src/storage/filesystem.rs:126:8
    |
15  | impl FilesystemStorage {
    | ---------------------- method in this implementation
...
126 |     fn get_total_storage_used(&self) -> Result<u64> {
    |        ^^^^^^^^^^^^^^^^^^^^^^

   Compiling brush-app v0.2.0 (/Users/ryanhickman/code/brush/crates/brush-app)
warning: `brush-dataset` (lib) generated 8 warnings (run `cargo fix --lib -p brush-dataset` to apply 4 suggestions)
warning: unused import: `std::fmt::Debug`
  --> crates/brush-app/src/app.rs:26:5
   |
26 | use std::fmt::Debug;
   |     ^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::hash::Hash`
  --> crates/brush-app/src/app.rs:27:5
   |
27 | use std::hash::Hash;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `std::io::Error`
  --> crates/brush-app/src/app.rs:28:5
   |
28 | use std::io::Error;
   |     ^^^^^^^^^^^^^^

warning: unused import: `std::io::ErrorKind`
  --> crates/brush-app/src/app.rs:29:5
   |
29 | use std::io::ErrorKind;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
  --> crates/brush-app/src/app.rs:30:5
   |
30 | use std::pin::Pin;
   |     ^^^^^^^^^^^^^

warning: unused import: `std::time::Duration`
  --> crates/brush-app/src/app.rs:32:5
   |
32 | use std::time::Duration;
   |     ^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Align2` and `RichText`
  --> crates/brush-app/src/app.rs:33:12
   |
33 | use egui::{Align2, RichText};
   |            ^^^^^^  ^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
  --> crates/brush-app/src/app.rs:34:5
   |
34 | use brush_dataset::splat_export;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ExportError` and `ExportFormat`
  --> crates/brush-app/src/app.rs:36:44
   |
36 | use crate::export_service::{ExportService, ExportError, ExportFormat};
   |                                            ^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `brush_dataset::storage`
  --> crates/brush-app/src/app.rs:37:5
   |
37 | use brush_dataset::storage;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
 --> crates/brush-app/src/panels/scene.rs:1:5
  |
1 | use brush_dataset::splat_export;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ControlMessage`
 --> crates/brush-app/src/panels/scene.rs:2:35
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                   ^^^^^^^^^^^^^^

warning: unused import: `tokio_with_wasm::alias as tokio_wasm`
  --> crates/brush-app/src/panels/scene.rs:17:5
   |
17 | use tokio_with_wasm::alias as tokio_wasm;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ProcessMessage`
 --> crates/brush-app/src/overlays/controls_detail.rs:2:51
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                                   ^^^^^^^^^^^^^^

warning: unused import: `std::sync::Once`
 --> crates/brush-app/src/utils.rs:2:5
  |
2 | use std::sync::Once;
  |     ^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> crates/brush-app/src/app.rs:837:35
    |
837 |                       .and_then(|w| w.request_animation_frame(
    |  ___________________________________^
838 | |                         &js_sys::Function::new_with_args("", 
839 | |                             &format!("
840 | |                                 console.log('🧪 Scheduling test PLY file load');
...   |
849 | |                     ).map(|_| ()))
    | |_________________________________^ expected `Option<_>`, found `Result<(), JsValue>`
    |
    = note: expected enum `std::option::Option<_>`
               found enum `std::result::Result<(), JsValue>`
help: try wrapping the expression in `Some`
    |
837 ~                     .and_then(|w| Some(w.request_animation_frame(
838 |                         &js_sys::Function::new_with_args("", 
...
848 |                         )
849 ~                     ).map(|_| ())))
    |

error[E0599]: no method named `unchecked_ref` found for reference `&JsValue` in the current scope
   --> crates/brush-app/src/app.rs:866:50
    |
866 | ...                   closure.as_ref().unchecked_ref(),
    |                                        ^^^^^^^^^^^^^
    |
    = help: items from traits can only be used if the trait is in scope
help: trait `JsCast` which provides `unchecked_ref` is implemented but not in scope; perhaps you want to import it
    |
1   + use wasm_bindgen::JsCast;
    |
help: there is a method `unchecked_into` with a similar name
    |
866 |                                 closure.as_ref().unchecked_into(),
    |                                                  ~~~~~~~~~~~~~~

error[E0599]: no method named `ok` found for enum `std::option::Option` in the current scope
   --> crates/brush-app/src/app.rs:871:22
    |
861 | /                 web_sys::window()
862 | |                     .and_then(|window| {
863 | |                         window
864 | |                             .add_event_listener_with_callback(
...   |
870 | |                     })
871 | |                     .ok();
    | |_____________________-^^
    |
help: there is a method `or` with a similar name, but with different arguments
   --> /rustc/4d91de4e48198da2e33413efdcd9cd2cc0c46688/library/core/src/option.rs:1524:5

error[E0599]: no method named `get_dataset_detail_overlay_mut` found for mutable reference `&mut AppContext` in the current scope
  --> crates/brush-app/src/utils.rs:80:44
   |
80 |     if let Some(dataset_overlay) = context.get_dataset_detail_overlay_mut() {
   |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `&mut AppContext`

warning: unused variable: `dataset_detail_overlay`
    --> crates/brush-app/src/app.rs:1277:21
     |
1277 |                 let dataset_detail_overlay = self.dataset_detail_overlay.clone();
     |                     ^^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dataset_detail_overlay`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `js_window`
    --> crates/brush-app/src/app.rs:1309:37
     |
1309 | ...                   let js_window = web_sys::window().unwrap();
     |                           ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_js_window`

warning: unused variable: `current_aspect`
  --> crates/brush-app/src/panels/scene.rs:91:13
   |
91 |         let current_aspect = size.x / size.y;
   |             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_current_aspect`

warning: unused variable: `view_aspect`
  --> crates/brush-app/src/panels/scene.rs:93:21
   |
93 |         if let Some(view_aspect) = context.view_aspect {
   |                     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_view_aspect`

warning: variable does not need to be mutable
  --> crates/brush-app/src/panels/scene.rs:88:13
   |
88 |         let mut size = size.floor();
   |             ----^^^^
   |             |
   |             help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: unused variable: `dataset_folder`
   --> crates/brush-app/src/overlays/dataset_detail.rs:457:61
    |
457 |     fn process_selected_file(&mut self, file_path: PathBuf, dataset_folder: PathBuf) {
    |                                                             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dataset_folder`

warning: unused variable: `dataset_folder`
   --> crates/brush-app/src/overlays/dataset_detail.rs:575:56
    |
575 |     fn copy_file_as_is(&mut self, file_path: &PathBuf, dataset_folder: &PathBuf) {
    |                                                        ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dataset_folder`

Some errors have detailed explanations: E0308, E0599.
For more information about an error, try `rustc --explain E0308`.
warning: `brush-app` (lib) generated 22 warnings
error: could not compile `brush-app` (lib) due to 4 previous errors; 22 warnings emitted
2025-03-19T19:16:08.629888Z ERROR ❌ error
error from build pipeline

Caused by:
    0: HTML build pipeline failed (1 errors), showing first
    1: error from asset pipeline
    2: running cargo build
    3: error during cargo build execution
    4: cargo call to executable 'cargo' with args: '["build", "--target=wasm32-unknown-unknown", "--manifest-path", "/Users/ryanhickman/code/brush/crates/brush-app/Cargo.toml"]' returned a bad status: exit status: 101
2025-03-19T19:16:19.660914Z  INFO 📦 starting build
warning: unused import: `std::io::Error`
 --> crates/rrfd/src/lib.rs:8:5
  |
8 | use std::io::Error;
  |     ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::io::ErrorKind`
 --> crates/rrfd/src/lib.rs:9:5
  |
9 | use std::io::ErrorKind;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::path::Path`
 --> crates/brush-dataset/src/storage/mod.rs:7:5
  |
7 | use std::path::Path;
  |     ^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `DatasetInfo` and `StorageType`
 --> crates/brush-dataset/src/storage/indexed_db.rs:6:29
  |
6 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |                             ^^^^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `Path`
 --> crates/brush-dataset/src/storage/filesystem.rs:4:17
  |
4 | use std::path::{Path, PathBuf};
  |                 ^^^^

warning: unused import: `DatasetStorage`
 --> crates/brush-dataset/src/storage/filesystem.rs:7:13
  |
7 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |             ^^^^^^^^^^^^^^

warning: constant `DB_NAME` is never used
 --> crates/brush-dataset/src/storage/indexed_db.rs:9:7
  |
9 | const DB_NAME: &str = "brush_dataset_storage";
  |       ^^^^^^^
  |
  = note: `#[warn(dead_code)]` on by default

warning: constant `METADATA_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:10:7
   |
10 | const METADATA_STORE: &str = "metadata";
   |       ^^^^^^^^^^^^^^

warning: constant `DATASET_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:11:7
   |
11 | const DATASET_STORE: &str = "datasets";
   |       ^^^^^^^^^^^^^

warning: method `get_total_storage_used` is never used
   --> crates/brush-dataset/src/storage/filesystem.rs:126:8
    |
15  | impl FilesystemStorage {
    | ---------------------- method in this implementation
...
126 |     fn get_total_storage_used(&self) -> Result<u64> {
    |        ^^^^^^^^^^^^^^^^^^^^^^

warning: `rrfd` (lib) generated 2 warnings (run `cargo fix --lib -p rrfd` to apply 2 suggestions)
warning: `brush-dataset` (lib) generated 8 warnings (run `cargo fix --lib -p brush-dataset` to apply 4 suggestions)
   Compiling brush-app v0.2.0 (/Users/ryanhickman/code/brush/crates/brush-app)
warning: unused import: `std::fmt::Debug`
  --> crates/brush-app/src/app.rs:29:5
   |
29 | use std::fmt::Debug;
   |     ^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::hash::Hash`
  --> crates/brush-app/src/app.rs:30:5
   |
30 | use std::hash::Hash;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `std::io::Error`
  --> crates/brush-app/src/app.rs:31:5
   |
31 | use std::io::Error;
   |     ^^^^^^^^^^^^^^

warning: unused import: `std::io::ErrorKind`
  --> crates/brush-app/src/app.rs:32:5
   |
32 | use std::io::ErrorKind;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
  --> crates/brush-app/src/app.rs:33:5
   |
33 | use std::pin::Pin;
   |     ^^^^^^^^^^^^^

warning: unused import: `std::time::Duration`
  --> crates/brush-app/src/app.rs:35:5
   |
35 | use std::time::Duration;
   |     ^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Align2` and `RichText`
  --> crates/brush-app/src/app.rs:36:12
   |
36 | use egui::{Align2, RichText};
   |            ^^^^^^  ^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
  --> crates/brush-app/src/app.rs:37:5
   |
37 | use brush_dataset::splat_export;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ExportError` and `ExportFormat`
  --> crates/brush-app/src/app.rs:39:44
   |
39 | use crate::export_service::{ExportService, ExportError, ExportFormat};
   |                                            ^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `brush_dataset::storage`
  --> crates/brush-app/src/app.rs:40:5
   |
40 | use brush_dataset::storage;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
 --> crates/brush-app/src/panels/scene.rs:1:5
  |
1 | use brush_dataset::splat_export;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ControlMessage`
 --> crates/brush-app/src/panels/scene.rs:2:35
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                   ^^^^^^^^^^^^^^

warning: unused import: `tokio_with_wasm::alias as tokio_wasm`
  --> crates/brush-app/src/panels/scene.rs:17:5
   |
17 | use tokio_with_wasm::alias as tokio_wasm;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ProcessMessage`
 --> crates/brush-app/src/overlays/controls_detail.rs:2:51
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                                   ^^^^^^^^^^^^^^

warning: unused import: `std::sync::Once`
 --> crates/brush-app/src/utils.rs:2:5
  |
2 | use std::sync::Once;
  |     ^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> crates/brush-app/src/app.rs:840:35
    |
840 |                       .and_then(|w| w.request_animation_frame(
    |  ___________________________________^
841 | |                         &js_sys::Function::new_with_args("", 
842 | |                             &format!("
843 | |                                 console.log('🧪 Scheduling test PLY file load');
...   |
852 | |                     ).map(|_| ()))
    | |_________________________________^ expected `Option<_>`, found `Result<(), JsValue>`
    |
    = note: expected enum `std::option::Option<_>`
               found enum `std::result::Result<(), JsValue>`
help: try wrapping the expression in `Some`
    |
840 ~                     .and_then(|w| Some(w.request_animation_frame(
841 |                         &js_sys::Function::new_with_args("", 
...
851 |                         )
852 ~                     ).map(|_| ())))
    |

error[E0599]: no method named `ok` found for enum `std::option::Option` in the current scope
   --> crates/brush-app/src/app.rs:874:22
    |
864 | /                 web_sys::window()
865 | |                     .and_then(|window| {
866 | |                         window
867 | |                             .add_event_listener_with_callback(
...   |
873 | |                     })
874 | |                     .ok();
    | |_____________________-^^
    |
help: there is a method `or` with a similar name, but with different arguments
   --> /rustc/4d91de4e48198da2e33413efdcd9cd2cc0c46688/library/core/src/option.rs:1524:5

error[E0599]: no method named `get_dataset_detail_overlay_mut` found for mutable reference `&mut AppContext` in the current scope
  --> crates/brush-app/src/utils.rs:80:44
   |
80 |     if let Some(dataset_overlay) = context.get_dataset_detail_overlay_mut() {
   |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `&mut AppContext`

warning: unused variable: `dataset_detail_overlay`
    --> crates/brush-app/src/app.rs:1280:21
     |
1280 |                 let dataset_detail_overlay = self.dataset_detail_overlay.clone();
     |                     ^^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dataset_detail_overlay`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `js_window`
    --> crates/brush-app/src/app.rs:1312:37
     |
1312 | ...                   let js_window = web_sys::window().unwrap();
     |                           ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_js_window`

warning: unused variable: `current_aspect`
  --> crates/brush-app/src/panels/scene.rs:91:13
   |
91 |         let current_aspect = size.x / size.y;
   |             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_current_aspect`

warning: unused variable: `view_aspect`
  --> crates/brush-app/src/panels/scene.rs:93:21
   |
93 |         if let Some(view_aspect) = context.view_aspect {
   |                     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_view_aspect`

warning: variable does not need to be mutable
  --> crates/brush-app/src/panels/scene.rs:88:13
   |
88 |         let mut size = size.floor();
   |             ----^^^^
   |             |
   |             help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: unused variable: `dataset_folder`
   --> crates/brush-app/src/overlays/dataset_detail.rs:457:61
    |
457 |     fn process_selected_file(&mut self, file_path: PathBuf, dataset_folder: PathBuf) {
    |                                                             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dataset_folder`

warning: unused variable: `dataset_folder`
   --> crates/brush-app/src/overlays/dataset_detail.rs:575:56
    |
575 |     fn copy_file_as_is(&mut self, file_path: &PathBuf, dataset_folder: &PathBuf) {
    |                                                        ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dataset_folder`

Some errors have detailed explanations: E0308, E0599.
For more information about an error, try `rustc --explain E0308`.
warning: `brush-app` (lib) generated 22 warnings
error: could not compile `brush-app` (lib) due to 3 previous errors; 22 warnings emitted
2025-03-19T19:16:21.043095Z ERROR ❌ error
error from build pipeline

Caused by:
    0: HTML build pipeline failed (1 errors), showing first
    1: error from asset pipeline
    2: running cargo build
    3: error during cargo build execution
    4: cargo call to executable 'cargo' with args: '["build", "--target=wasm32-unknown-unknown", "--manifest-path", "/Users/ryanhickman/code/brush/crates/brush-app/Cargo.toml"]' returned a bad status: exit status: 101
2025-03-19T19:16:30.654678Z  INFO 📦 starting build
warning: unused import: `std::io::Error`
 --> crates/rrfd/src/lib.rs:8:5
  |
8 | use std::io::Error;
  |     ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::io::ErrorKind`
 --> crates/rrfd/src/lib.rs:9:5
  |
9 | use std::io::ErrorKind;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::path::Path`
 --> crates/brush-dataset/src/storage/mod.rs:7:5
  |
7 | use std::path::Path;
  |     ^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `DatasetInfo` and `StorageType`
 --> crates/brush-dataset/src/storage/indexed_db.rs:6:29
  |
6 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |                             ^^^^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `Path`
 --> crates/brush-dataset/src/storage/filesystem.rs:4:17
  |
4 | use std::path::{Path, PathBuf};
  |                 ^^^^

warning: unused import: `DatasetStorage`
 --> crates/brush-dataset/src/storage/filesystem.rs:7:13
  |
7 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |             ^^^^^^^^^^^^^^

warning: constant `DB_NAME` is never used
 --> crates/brush-dataset/src/storage/indexed_db.rs:9:7
  |
9 | const DB_NAME: &str = "brush_dataset_storage";
  |       ^^^^^^^
  |
  = note: `#[warn(dead_code)]` on by default

warning: constant `METADATA_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:10:7
   |
10 | const METADATA_STORE: &str = "metadata";
   |       ^^^^^^^^^^^^^^

warning: constant `DATASET_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:11:7
   |
11 | const DATASET_STORE: &str = "datasets";
   |       ^^^^^^^^^^^^^

warning: method `get_total_storage_used` is never used
   --> crates/brush-dataset/src/storage/filesystem.rs:126:8
    |
15  | impl FilesystemStorage {
    | ---------------------- method in this implementation
...
126 |     fn get_total_storage_used(&self) -> Result<u64> {
    |        ^^^^^^^^^^^^^^^^^^^^^^

warning: `rrfd` (lib) generated 2 warnings (run `cargo fix --lib -p rrfd` to apply 2 suggestions)
warning: `brush-dataset` (lib) generated 8 warnings (run `cargo fix --lib -p brush-dataset` to apply 4 suggestions)
   Compiling brush-app v0.2.0 (/Users/ryanhickman/code/brush/crates/brush-app)
warning: unused import: `std::fmt::Debug`
  --> crates/brush-app/src/app.rs:29:5
   |
29 | use std::fmt::Debug;
   |     ^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::hash::Hash`
  --> crates/brush-app/src/app.rs:30:5
   |
30 | use std::hash::Hash;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `std::io::Error`
  --> crates/brush-app/src/app.rs:31:5
   |
31 | use std::io::Error;
   |     ^^^^^^^^^^^^^^

warning: unused import: `std::io::ErrorKind`
  --> crates/brush-app/src/app.rs:32:5
   |
32 | use std::io::ErrorKind;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
  --> crates/brush-app/src/app.rs:33:5
   |
33 | use std::pin::Pin;
   |     ^^^^^^^^^^^^^

warning: unused import: `std::time::Duration`
  --> crates/brush-app/src/app.rs:35:5
   |
35 | use std::time::Duration;
   |     ^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Align2` and `RichText`
  --> crates/brush-app/src/app.rs:36:12
   |
36 | use egui::{Align2, RichText};
   |            ^^^^^^  ^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
  --> crates/brush-app/src/app.rs:37:5
   |
37 | use brush_dataset::splat_export;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ExportError` and `ExportFormat`
  --> crates/brush-app/src/app.rs:39:44
   |
39 | use crate::export_service::{ExportService, ExportError, ExportFormat};
   |                                            ^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `brush_dataset::storage`
  --> crates/brush-app/src/app.rs:40:5
   |
40 | use brush_dataset::storage;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
 --> crates/brush-app/src/panels/scene.rs:1:5
  |
1 | use brush_dataset::splat_export;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ControlMessage`
 --> crates/brush-app/src/panels/scene.rs:2:35
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                   ^^^^^^^^^^^^^^

warning: unused import: `tokio_with_wasm::alias as tokio_wasm`
  --> crates/brush-app/src/panels/scene.rs:17:5
   |
17 | use tokio_with_wasm::alias as tokio_wasm;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ProcessMessage`
 --> crates/brush-app/src/overlays/controls_detail.rs:2:51
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                                   ^^^^^^^^^^^^^^

warning: unused import: `std::sync::Once`
 --> crates/brush-app/src/utils.rs:2:5
  |
2 | use std::sync::Once;
  |     ^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> crates/brush-app/src/app.rs:840:35
    |
840 |                       .and_then(|w| w.request_animation_frame(
    |  ___________________________________^
841 | |                         &js_sys::Function::new_with_args("", 
842 | |                             &format!("
843 | |                                 console.log('🧪 Scheduling test PLY file load');
...   |
852 | |                     ).map(|_| ()))
    | |_________________________________^ expected `Option<_>`, found `Result<(), JsValue>`
    |
    = note: expected enum `std::option::Option<_>`
               found enum `std::result::Result<(), JsValue>`
help: try wrapping the expression in `Some`
    |
840 ~                     .and_then(|w| Some(w.request_animation_frame(
841 |                         &js_sys::Function::new_with_args("", 
...
851 |                         )
852 ~                     ).map(|_| ())))
    |

error[E0599]: no method named `get_dataset_detail_overlay_mut` found for mutable reference `&mut AppContext` in the current scope
  --> crates/brush-app/src/utils.rs:80:44
   |
80 |     if let Some(dataset_overlay) = context.get_dataset_detail_overlay_mut() {
   |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `&mut AppContext`

warning: unused variable: `dataset_detail_overlay`
    --> crates/brush-app/src/app.rs:1280:21
     |
1280 |                 let dataset_detail_overlay = self.dataset_detail_overlay.clone();
     |                     ^^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dataset_detail_overlay`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `js_window`
    --> crates/brush-app/src/app.rs:1312:37
     |
1312 | ...                   let js_window = web_sys::window().unwrap();
     |                           ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_js_window`

warning: unused variable: `current_aspect`
  --> crates/brush-app/src/panels/scene.rs:91:13
   |
91 |         let current_aspect = size.x / size.y;
   |             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_current_aspect`

warning: unused variable: `view_aspect`
  --> crates/brush-app/src/panels/scene.rs:93:21
   |
93 |         if let Some(view_aspect) = context.view_aspect {
   |                     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_view_aspect`

warning: variable does not need to be mutable
  --> crates/brush-app/src/panels/scene.rs:88:13
   |
88 |         let mut size = size.floor();
   |             ----^^^^
   |             |
   |             help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: unused variable: `dataset_folder`
   --> crates/brush-app/src/overlays/dataset_detail.rs:457:61
    |
457 |     fn process_selected_file(&mut self, file_path: PathBuf, dataset_folder: PathBuf) {
    |                                                             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dataset_folder`

warning: unused variable: `dataset_folder`
   --> crates/brush-app/src/overlays/dataset_detail.rs:575:56
    |
575 |     fn copy_file_as_is(&mut self, file_path: &PathBuf, dataset_folder: &PathBuf) {
    |                                                        ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dataset_folder`

Some errors have detailed explanations: E0308, E0599.
For more information about an error, try `rustc --explain E0308`.
warning: `brush-app` (lib) generated 22 warnings
error: could not compile `brush-app` (lib) due to 2 previous errors; 22 warnings emitted
2025-03-19T19:16:32.042881Z ERROR ❌ error
error from build pipeline

Caused by:
    0: HTML build pipeline failed (1 errors), showing first
    1: error from asset pipeline
    2: running cargo build
    3: error during cargo build execution
    4: cargo call to executable 'cargo' with args: '["build", "--target=wasm32-unknown-unknown", "--manifest-path", "/Users/ryanhickman/code/brush/crates/brush-app/Cargo.toml"]' returned a bad status: exit status: 101
2025-03-19T19:17:22.013358Z  INFO 📦 starting build
warning: unused import: `std::io::Error`
 --> crates/rrfd/src/lib.rs:8:5
  |
8 | use std::io::Error;
  |     ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::io::ErrorKind`
 --> crates/rrfd/src/lib.rs:9:5
  |
9 | use std::io::ErrorKind;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::path::Path`
 --> crates/brush-dataset/src/storage/mod.rs:7:5
  |
7 | use std::path::Path;
  |     ^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `DatasetInfo` and `StorageType`
 --> crates/brush-dataset/src/storage/indexed_db.rs:6:29
  |
6 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |                             ^^^^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `Path`
 --> crates/brush-dataset/src/storage/filesystem.rs:4:17
  |
4 | use std::path::{Path, PathBuf};
  |                 ^^^^

warning: unused import: `DatasetStorage`
 --> crates/brush-dataset/src/storage/filesystem.rs:7:13
  |
7 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |             ^^^^^^^^^^^^^^

warning: constant `DB_NAME` is never used
 --> crates/brush-dataset/src/storage/indexed_db.rs:9:7
  |
9 | const DB_NAME: &str = "brush_dataset_storage";
  |       ^^^^^^^
  |
  = note: `#[warn(dead_code)]` on by default

warning: constant `METADATA_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:10:7
   |
10 | const METADATA_STORE: &str = "metadata";
   |       ^^^^^^^^^^^^^^

warning: constant `DATASET_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:11:7
   |
11 | const DATASET_STORE: &str = "datasets";
   |       ^^^^^^^^^^^^^

warning: method `get_total_storage_used` is never used
   --> crates/brush-dataset/src/storage/filesystem.rs:126:8
    |
15  | impl FilesystemStorage {
    | ---------------------- method in this implementation
...
126 |     fn get_total_storage_used(&self) -> Result<u64> {
    |        ^^^^^^^^^^^^^^^^^^^^^^

warning: `rrfd` (lib) generated 2 warnings (run `cargo fix --lib -p rrfd` to apply 2 suggestions)
warning: `brush-dataset` (lib) generated 8 warnings (run `cargo fix --lib -p brush-dataset` to apply 4 suggestions)
   Compiling brush-app v0.2.0 (/Users/ryanhickman/code/brush/crates/brush-app)
warning: unused import: `std::fmt::Debug`
  --> crates/brush-app/src/app.rs:29:5
   |
29 | use std::fmt::Debug;
   |     ^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::hash::Hash`
  --> crates/brush-app/src/app.rs:30:5
   |
30 | use std::hash::Hash;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `std::io::Error`
  --> crates/brush-app/src/app.rs:31:5
   |
31 | use std::io::Error;
   |     ^^^^^^^^^^^^^^

warning: unused import: `std::io::ErrorKind`
  --> crates/brush-app/src/app.rs:32:5
   |
32 | use std::io::ErrorKind;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
  --> crates/brush-app/src/app.rs:33:5
   |
33 | use std::pin::Pin;
   |     ^^^^^^^^^^^^^

warning: unused import: `std::time::Duration`
  --> crates/brush-app/src/app.rs:35:5
   |
35 | use std::time::Duration;
   |     ^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Align2` and `RichText`
  --> crates/brush-app/src/app.rs:36:12
   |
36 | use egui::{Align2, RichText};
   |            ^^^^^^  ^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
  --> crates/brush-app/src/app.rs:37:5
   |
37 | use brush_dataset::splat_export;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ExportError` and `ExportFormat`
  --> crates/brush-app/src/app.rs:39:44
   |
39 | use crate::export_service::{ExportService, ExportError, ExportFormat};
   |                                            ^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `brush_dataset::storage`
  --> crates/brush-app/src/app.rs:40:5
   |
40 | use brush_dataset::storage;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
 --> crates/brush-app/src/panels/scene.rs:1:5
  |
1 | use brush_dataset::splat_export;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ControlMessage`
 --> crates/brush-app/src/panels/scene.rs:2:35
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                   ^^^^^^^^^^^^^^

warning: unused import: `tokio_with_wasm::alias as tokio_wasm`
  --> crates/brush-app/src/panels/scene.rs:17:5
   |
17 | use tokio_with_wasm::alias as tokio_wasm;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ProcessMessage`
 --> crates/brush-app/src/overlays/controls_detail.rs:2:51
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                                   ^^^^^^^^^^^^^^

warning: unused import: `std::sync::Once`
 --> crates/brush-app/src/utils.rs:2:5
  |
2 | use std::sync::Once;
  |     ^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> crates/brush-app/src/app.rs:840:35
    |
840 |                       .and_then(|w| w.request_animation_frame(
    |  ___________________________________^
841 | |                         &js_sys::Function::new_with_args("", 
842 | |                             &format!("
843 | |                                 console.log('🧪 Scheduling test PLY file load');
...   |
852 | |                     ).map(|_| ()))
    | |_________________________________^ expected `Option<_>`, found `Result<(), JsValue>`
    |
    = note: expected enum `std::option::Option<_>`
               found enum `std::result::Result<(), JsValue>`
help: try wrapping the expression in `Some`
    |
840 ~                     .and_then(|w| Some(w.request_animation_frame(
841 |                         &js_sys::Function::new_with_args("", 
...
851 |                         )
852 ~                     ).map(|_| ())))
    |

error[E0609]: no field `dataset_detail_overlay` on type `&mut AppContext`
  --> crates/brush-app/src/utils.rs:81:44
   |
81 |         let dataset_overlay = &mut context.dataset_detail_overlay;
   |                                            ^^^^^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `dataset`, `camera`, `view_aspect`, `controls`, `model_local_to_world`, `device`

warning: unused variable: `dataset_detail_overlay`
    --> crates/brush-app/src/app.rs:1280:21
     |
1280 |                 let dataset_detail_overlay = self.dataset_detail_overlay.clone();
     |                     ^^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dataset_detail_overlay`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `js_window`
    --> crates/brush-app/src/app.rs:1312:37
     |
1312 | ...                   let js_window = web_sys::window().unwrap();
     |                           ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_js_window`

warning: unused variable: `current_aspect`
  --> crates/brush-app/src/panels/scene.rs:91:13
   |
91 |         let current_aspect = size.x / size.y;
   |             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_current_aspect`

warning: unused variable: `view_aspect`
  --> crates/brush-app/src/panels/scene.rs:93:21
   |
93 |         if let Some(view_aspect) = context.view_aspect {
   |                     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_view_aspect`

warning: variable does not need to be mutable
  --> crates/brush-app/src/panels/scene.rs:88:13
   |
88 |         let mut size = size.floor();
   |             ----^^^^
   |             |
   |             help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: unused variable: `dataset_folder`
   --> crates/brush-app/src/overlays/dataset_detail.rs:457:61
    |
457 |     fn process_selected_file(&mut self, file_path: PathBuf, dataset_folder: PathBuf) {
    |                                                             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dataset_folder`

warning: unused variable: `dataset_folder`
   --> crates/brush-app/src/overlays/dataset_detail.rs:575:56
    |
575 |     fn copy_file_as_is(&mut self, file_path: &PathBuf, dataset_folder: &PathBuf) {
    |                                                        ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dataset_folder`

Some errors have detailed explanations: E0308, E0609.
For more information about an error, try `rustc --explain E0308`.
warning: `brush-app` (lib) generated 22 warnings
error: could not compile `brush-app` (lib) due to 2 previous errors; 22 warnings emitted
2025-03-19T19:17:23.352589Z ERROR ❌ error
error from build pipeline

Caused by:
    0: HTML build pipeline failed (1 errors), showing first
    1: error from asset pipeline
    2: running cargo build
    3: error during cargo build execution
    4: cargo call to executable 'cargo' with args: '["build", "--target=wasm32-unknown-unknown", "--manifest-path", "/Users/ryanhickman/code/brush/crates/brush-app/Cargo.toml"]' returned a bad status: exit status: 101
2025-03-19T19:17:32.155617Z  INFO 📦 starting build
warning: unused import: `std::io::Error`
 --> crates/rrfd/src/lib.rs:8:5
  |
8 | use std::io::Error;
  |     ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::io::ErrorKind`
 --> crates/rrfd/src/lib.rs:9:5
  |
9 | use std::io::ErrorKind;
  |     ^^^^^^^^^^^^^^^^^^

warning: `rrfd` (lib) generated 2 warnings (run `cargo fix --lib -p rrfd` to apply 2 suggestions)
warning: unused import: `std::path::Path`
 --> crates/brush-dataset/src/storage/mod.rs:7:5
  |
7 | use std::path::Path;
  |     ^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `DatasetInfo` and `StorageType`
 --> crates/brush-dataset/src/storage/indexed_db.rs:6:29
  |
6 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |                             ^^^^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `Path`
 --> crates/brush-dataset/src/storage/filesystem.rs:4:17
  |
4 | use std::path::{Path, PathBuf};
  |                 ^^^^

warning: unused import: `DatasetStorage`
 --> crates/brush-dataset/src/storage/filesystem.rs:7:13
  |
7 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |             ^^^^^^^^^^^^^^

warning: constant `DB_NAME` is never used
 --> crates/brush-dataset/src/storage/indexed_db.rs:9:7
  |
9 | const DB_NAME: &str = "brush_dataset_storage";
  |       ^^^^^^^
  |
  = note: `#[warn(dead_code)]` on by default

warning: constant `METADATA_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:10:7
   |
10 | const METADATA_STORE: &str = "metadata";
   |       ^^^^^^^^^^^^^^

warning: constant `DATASET_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:11:7
   |
11 | const DATASET_STORE: &str = "datasets";
   |       ^^^^^^^^^^^^^

warning: method `get_total_storage_used` is never used
   --> crates/brush-dataset/src/storage/filesystem.rs:126:8
    |
15  | impl FilesystemStorage {
    | ---------------------- method in this implementation
...
126 |     fn get_total_storage_used(&self) -> Result<u64> {
    |        ^^^^^^^^^^^^^^^^^^^^^^

   Compiling brush-app v0.2.0 (/Users/ryanhickman/code/brush/crates/brush-app)
warning: `brush-dataset` (lib) generated 8 warnings (run `cargo fix --lib -p brush-dataset` to apply 4 suggestions)
warning: unused import: `std::fmt::Debug`
  --> crates/brush-app/src/app.rs:29:5
   |
29 | use std::fmt::Debug;
   |     ^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::hash::Hash`
  --> crates/brush-app/src/app.rs:30:5
   |
30 | use std::hash::Hash;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `std::io::Error`
  --> crates/brush-app/src/app.rs:31:5
   |
31 | use std::io::Error;
   |     ^^^^^^^^^^^^^^

warning: unused import: `std::io::ErrorKind`
  --> crates/brush-app/src/app.rs:32:5
   |
32 | use std::io::ErrorKind;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
  --> crates/brush-app/src/app.rs:33:5
   |
33 | use std::pin::Pin;
   |     ^^^^^^^^^^^^^

warning: unused import: `std::time::Duration`
  --> crates/brush-app/src/app.rs:35:5
   |
35 | use std::time::Duration;
   |     ^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Align2` and `RichText`
  --> crates/brush-app/src/app.rs:36:12
   |
36 | use egui::{Align2, RichText};
   |            ^^^^^^  ^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
  --> crates/brush-app/src/app.rs:37:5
   |
37 | use brush_dataset::splat_export;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ExportError` and `ExportFormat`
  --> crates/brush-app/src/app.rs:39:44
   |
39 | use crate::export_service::{ExportService, ExportError, ExportFormat};
   |                                            ^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `brush_dataset::storage`
  --> crates/brush-app/src/app.rs:40:5
   |
40 | use brush_dataset::storage;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
 --> crates/brush-app/src/panels/scene.rs:1:5
  |
1 | use brush_dataset::splat_export;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ControlMessage`
 --> crates/brush-app/src/panels/scene.rs:2:35
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                   ^^^^^^^^^^^^^^

warning: unused import: `tokio_with_wasm::alias as tokio_wasm`
  --> crates/brush-app/src/panels/scene.rs:17:5
   |
17 | use tokio_with_wasm::alias as tokio_wasm;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ProcessMessage`
 --> crates/brush-app/src/overlays/controls_detail.rs:2:51
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                                   ^^^^^^^^^^^^^^

warning: unused import: `std::sync::Once`
 --> crates/brush-app/src/utils.rs:2:5
  |
2 | use std::sync::Once;
  |     ^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> crates/brush-app/src/app.rs:840:35
    |
840 |                       .and_then(|w| w.request_animation_frame(
    |  ___________________________________^
841 | |                         &js_sys::Function::new_with_args("", 
842 | |                             &format!("
843 | |                                 console.log('🧪 Scheduling test PLY file load');
...   |
852 | |                     ).map(|_| ()))
    | |_________________________________^ expected `Option<_>`, found `Result<(), JsValue>`
    |
    = note: expected enum `std::option::Option<_>`
               found enum `std::result::Result<(), JsValue>`
help: try wrapping the expression in `Some`
    |
840 ~                     .and_then(|w| Some(w.request_animation_frame(
841 |                         &js_sys::Function::new_with_args("", 
...
851 |                         )
852 ~                     ).map(|_| ())))
    |

error[E0609]: no field `dataset_detail_overlay` on type `&mut AppContext`
  --> crates/brush-app/src/utils.rs:81:44
   |
81 |         let dataset_overlay = &mut context.dataset_detail_overlay;
   |                                            ^^^^^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `dataset`, `camera`, `view_aspect`, `controls`, `model_local_to_world`, `device`

warning: unused variable: `dataset_detail_overlay`
    --> crates/brush-app/src/app.rs:1280:21
     |
1280 |                 let dataset_detail_overlay = self.dataset_detail_overlay.clone();
     |                     ^^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dataset_detail_overlay`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `current_aspect`
  --> crates/brush-app/src/panels/scene.rs:91:13
   |
91 |         let current_aspect = size.x / size.y;
   |             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_current_aspect`

warning: unused variable: `view_aspect`
  --> crates/brush-app/src/panels/scene.rs:93:21
   |
93 |         if let Some(view_aspect) = context.view_aspect {
   |                     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_view_aspect`

warning: variable does not need to be mutable
  --> crates/brush-app/src/panels/scene.rs:88:13
   |
88 |         let mut size = size.floor();
   |             ----^^^^
   |             |
   |             help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: unused variable: `dataset_folder`
   --> crates/brush-app/src/overlays/dataset_detail.rs:457:61
    |
457 |     fn process_selected_file(&mut self, file_path: PathBuf, dataset_folder: PathBuf) {
    |                                                             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dataset_folder`

warning: unused variable: `dataset_folder`
   --> crates/brush-app/src/overlays/dataset_detail.rs:575:56
    |
575 |     fn copy_file_as_is(&mut self, file_path: &PathBuf, dataset_folder: &PathBuf) {
    |                                                        ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dataset_folder`

Some errors have detailed explanations: E0308, E0609.
For more information about an error, try `rustc --explain E0308`.
warning: `brush-app` (lib) generated 21 warnings
error: could not compile `brush-app` (lib) due to 2 previous errors; 21 warnings emitted
2025-03-19T19:17:33.539515Z ERROR ❌ error
error from build pipeline

Caused by:
    0: HTML build pipeline failed (1 errors), showing first
    1: error from asset pipeline
    2: running cargo build
    3: error during cargo build execution
    4: cargo call to executable 'cargo' with args: '["build", "--target=wasm32-unknown-unknown", "--manifest-path", "/Users/ryanhickman/code/brush/crates/brush-app/Cargo.toml"]' returned a bad status: exit status: 101
2025-03-19T19:17:42.836731Z  INFO 📦 starting build
warning: unused import: `std::path::Path`
 --> crates/brush-dataset/src/storage/mod.rs:7:5
  |
7 | use std::path::Path;
  |     ^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `DatasetInfo` and `StorageType`
 --> crates/brush-dataset/src/storage/indexed_db.rs:6:29
  |
6 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |                             ^^^^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `Path`
 --> crates/brush-dataset/src/storage/filesystem.rs:4:17
  |
4 | use std::path::{Path, PathBuf};
  |                 ^^^^

warning: unused import: `DatasetStorage`
 --> crates/brush-dataset/src/storage/filesystem.rs:7:13
  |
7 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |             ^^^^^^^^^^^^^^

warning: constant `DB_NAME` is never used
 --> crates/brush-dataset/src/storage/indexed_db.rs:9:7
  |
9 | const DB_NAME: &str = "brush_dataset_storage";
  |       ^^^^^^^
  |
  = note: `#[warn(dead_code)]` on by default

warning: constant `METADATA_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:10:7
   |
10 | const METADATA_STORE: &str = "metadata";
   |       ^^^^^^^^^^^^^^

warning: constant `DATASET_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:11:7
   |
11 | const DATASET_STORE: &str = "datasets";
   |       ^^^^^^^^^^^^^

warning: method `get_total_storage_used` is never used
   --> crates/brush-dataset/src/storage/filesystem.rs:126:8
    |
15  | impl FilesystemStorage {
    | ---------------------- method in this implementation
...
126 |     fn get_total_storage_used(&self) -> Result<u64> {
    |        ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::io::Error`
 --> crates/rrfd/src/lib.rs:8:5
  |
8 | use std::io::Error;
  |     ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::io::ErrorKind`
 --> crates/rrfd/src/lib.rs:9:5
  |
9 | use std::io::ErrorKind;
  |     ^^^^^^^^^^^^^^^^^^

warning: `brush-dataset` (lib) generated 8 warnings (run `cargo fix --lib -p brush-dataset` to apply 4 suggestions)
warning: `rrfd` (lib) generated 2 warnings (run `cargo fix --lib -p rrfd` to apply 2 suggestions)
   Compiling brush-app v0.2.0 (/Users/ryanhickman/code/brush/crates/brush-app)
warning: unused import: `std::fmt::Debug`
  --> crates/brush-app/src/app.rs:29:5
   |
29 | use std::fmt::Debug;
   |     ^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::hash::Hash`
  --> crates/brush-app/src/app.rs:30:5
   |
30 | use std::hash::Hash;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `std::io::Error`
  --> crates/brush-app/src/app.rs:31:5
   |
31 | use std::io::Error;
   |     ^^^^^^^^^^^^^^

warning: unused import: `std::io::ErrorKind`
  --> crates/brush-app/src/app.rs:32:5
   |
32 | use std::io::ErrorKind;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
  --> crates/brush-app/src/app.rs:33:5
   |
33 | use std::pin::Pin;
   |     ^^^^^^^^^^^^^

warning: unused import: `std::time::Duration`
  --> crates/brush-app/src/app.rs:35:5
   |
35 | use std::time::Duration;
   |     ^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Align2` and `RichText`
  --> crates/brush-app/src/app.rs:36:12
   |
36 | use egui::{Align2, RichText};
   |            ^^^^^^  ^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
  --> crates/brush-app/src/app.rs:37:5
   |
37 | use brush_dataset::splat_export;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ExportError` and `ExportFormat`
  --> crates/brush-app/src/app.rs:39:44
   |
39 | use crate::export_service::{ExportService, ExportError, ExportFormat};
   |                                            ^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `brush_dataset::storage`
  --> crates/brush-app/src/app.rs:40:5
   |
40 | use brush_dataset::storage;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
 --> crates/brush-app/src/panels/scene.rs:1:5
  |
1 | use brush_dataset::splat_export;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ControlMessage`
 --> crates/brush-app/src/panels/scene.rs:2:35
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                   ^^^^^^^^^^^^^^

warning: unused import: `tokio_with_wasm::alias as tokio_wasm`
  --> crates/brush-app/src/panels/scene.rs:17:5
   |
17 | use tokio_with_wasm::alias as tokio_wasm;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ProcessMessage`
 --> crates/brush-app/src/overlays/controls_detail.rs:2:51
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                                   ^^^^^^^^^^^^^^

warning: unused import: `std::sync::Once`
 --> crates/brush-app/src/utils.rs:2:5
  |
2 | use std::sync::Once;
  |     ^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> crates/brush-app/src/app.rs:840:35
    |
840 |                       .and_then(|w| w.request_animation_frame(
    |  ___________________________________^
841 | |                         &js_sys::Function::new_with_args("", 
842 | |                             &format!("
843 | |                                 console.log('🧪 Scheduling test PLY file load');
...   |
852 | |                     ).map(|_| ()))
    | |_________________________________^ expected `Option<_>`, found `Result<(), JsValue>`
    |
    = note: expected enum `std::option::Option<_>`
               found enum `std::result::Result<(), JsValue>`
help: try wrapping the expression in `Some`
    |
840 ~                     .and_then(|w| Some(w.request_animation_frame(
841 |                         &js_sys::Function::new_with_args("", 
...
851 |                         )
852 ~                     ).map(|_| ())))
    |

error[E0609]: no field `dataset_detail_overlay` on type `&mut AppContext`
  --> crates/brush-app/src/utils.rs:81:44
   |
81 |         let dataset_overlay = &mut context.dataset_detail_overlay;
   |                                            ^^^^^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `dataset`, `camera`, `view_aspect`, `controls`, `model_local_to_world`, `device`

warning: unused variable: `dataset_detail_overlay`
    --> crates/brush-app/src/app.rs:1280:21
     |
1280 |                 let dataset_detail_overlay = self.dataset_detail_overlay.clone();
     |                     ^^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dataset_detail_overlay`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `view_aspect`
  --> crates/brush-app/src/panels/scene.rs:96:21
   |
96 |         if let Some(view_aspect) = context.view_aspect {
   |                     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_view_aspect`

warning: variable does not need to be mutable
  --> crates/brush-app/src/panels/scene.rs:88:13
   |
88 |         let mut size = size.floor();
   |             ----^^^^
   |             |
   |             help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: unused variable: `dataset_folder`
   --> crates/brush-app/src/overlays/dataset_detail.rs:457:61
    |
457 |     fn process_selected_file(&mut self, file_path: PathBuf, dataset_folder: PathBuf) {
    |                                                             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dataset_folder`

warning: unused variable: `dataset_folder`
   --> crates/brush-app/src/overlays/dataset_detail.rs:575:56
    |
575 |     fn copy_file_as_is(&mut self, file_path: &PathBuf, dataset_folder: &PathBuf) {
    |                                                        ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dataset_folder`

Some errors have detailed explanations: E0308, E0609.
For more information about an error, try `rustc --explain E0308`.
warning: `brush-app` (lib) generated 20 warnings
error: could not compile `brush-app` (lib) due to 2 previous errors; 20 warnings emitted
2025-03-19T19:17:44.216338Z ERROR ❌ error
error from build pipeline

Caused by:
    0: HTML build pipeline failed (1 errors), showing first
    1: error from asset pipeline
    2: running cargo build
    3: error during cargo build execution
    4: cargo call to executable 'cargo' with args: '["build", "--target=wasm32-unknown-unknown", "--manifest-path", "/Users/ryanhickman/code/brush/crates/brush-app/Cargo.toml"]' returned a bad status: exit status: 101
2025-03-19T19:17:55.749981Z  INFO 📦 starting build
warning: unused import: `std::io::Error`
 --> crates/rrfd/src/lib.rs:8:5
  |
8 | use std::io::Error;
  |     ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::io::ErrorKind`
 --> crates/rrfd/src/lib.rs:9:5
  |
9 | use std::io::ErrorKind;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::path::Path`
 --> crates/brush-dataset/src/storage/mod.rs:7:5
  |
7 | use std::path::Path;
  |     ^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `DatasetInfo` and `StorageType`
 --> crates/brush-dataset/src/storage/indexed_db.rs:6:29
  |
6 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |                             ^^^^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `Path`
 --> crates/brush-dataset/src/storage/filesystem.rs:4:17
  |
4 | use std::path::{Path, PathBuf};
  |                 ^^^^

warning: unused import: `DatasetStorage`
 --> crates/brush-dataset/src/storage/filesystem.rs:7:13
  |
7 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |             ^^^^^^^^^^^^^^

warning: constant `DB_NAME` is never used
 --> crates/brush-dataset/src/storage/indexed_db.rs:9:7
  |
9 | const DB_NAME: &str = "brush_dataset_storage";
  |       ^^^^^^^
  |
  = note: `#[warn(dead_code)]` on by default

warning: constant `METADATA_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:10:7
   |
10 | const METADATA_STORE: &str = "metadata";
   |       ^^^^^^^^^^^^^^

warning: constant `DATASET_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:11:7
   |
11 | const DATASET_STORE: &str = "datasets";
   |       ^^^^^^^^^^^^^

warning: method `get_total_storage_used` is never used
   --> crates/brush-dataset/src/storage/filesystem.rs:126:8
    |
15  | impl FilesystemStorage {
    | ---------------------- method in this implementation
...
126 |     fn get_total_storage_used(&self) -> Result<u64> {
    |        ^^^^^^^^^^^^^^^^^^^^^^

warning: `rrfd` (lib) generated 2 warnings (run `cargo fix --lib -p rrfd` to apply 2 suggestions)
warning: `brush-dataset` (lib) generated 8 warnings (run `cargo fix --lib -p brush-dataset` to apply 4 suggestions)
   Compiling brush-app v0.2.0 (/Users/ryanhickman/code/brush/crates/brush-app)
warning: unused import: `std::fmt::Debug`
  --> crates/brush-app/src/app.rs:29:5
   |
29 | use std::fmt::Debug;
   |     ^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::hash::Hash`
  --> crates/brush-app/src/app.rs:30:5
   |
30 | use std::hash::Hash;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `std::io::Error`
  --> crates/brush-app/src/app.rs:31:5
   |
31 | use std::io::Error;
   |     ^^^^^^^^^^^^^^

warning: unused import: `std::io::ErrorKind`
  --> crates/brush-app/src/app.rs:32:5
   |
32 | use std::io::ErrorKind;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
  --> crates/brush-app/src/app.rs:33:5
   |
33 | use std::pin::Pin;
   |     ^^^^^^^^^^^^^

warning: unused import: `std::time::Duration`
  --> crates/brush-app/src/app.rs:35:5
   |
35 | use std::time::Duration;
   |     ^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Align2` and `RichText`
  --> crates/brush-app/src/app.rs:36:12
   |
36 | use egui::{Align2, RichText};
   |            ^^^^^^  ^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
  --> crates/brush-app/src/app.rs:37:5
   |
37 | use brush_dataset::splat_export;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ExportError` and `ExportFormat`
  --> crates/brush-app/src/app.rs:39:44
   |
39 | use crate::export_service::{ExportService, ExportError, ExportFormat};
   |                                            ^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `brush_dataset::storage`
  --> crates/brush-app/src/app.rs:40:5
   |
40 | use brush_dataset::storage;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
 --> crates/brush-app/src/panels/scene.rs:1:5
  |
1 | use brush_dataset::splat_export;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ControlMessage`
 --> crates/brush-app/src/panels/scene.rs:2:35
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                   ^^^^^^^^^^^^^^

warning: unused import: `tokio_with_wasm::alias as tokio_wasm`
  --> crates/brush-app/src/panels/scene.rs:17:5
   |
17 | use tokio_with_wasm::alias as tokio_wasm;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ProcessMessage`
 --> crates/brush-app/src/overlays/controls_detail.rs:2:51
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                                   ^^^^^^^^^^^^^^

warning: unused import: `std::sync::Once`
 --> crates/brush-app/src/utils.rs:2:5
  |
2 | use std::sync::Once;
  |     ^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> crates/brush-app/src/app.rs:840:35
    |
840 |                       .and_then(|w| w.request_animation_frame(
    |  ___________________________________^
841 | |                         &js_sys::Function::new_with_args("", 
842 | |                             &format!("
843 | |                                 console.log('🧪 Scheduling test PLY file load');
...   |
852 | |                     ).map(|_| ()))
    | |_________________________________^ expected `Option<_>`, found `Result<(), JsValue>`
    |
    = note: expected enum `std::option::Option<_>`
               found enum `std::result::Result<(), JsValue>`
help: try wrapping the expression in `Some`
    |
840 ~                     .and_then(|w| Some(w.request_animation_frame(
841 |                         &js_sys::Function::new_with_args("", 
...
851 |                         )
852 ~                     ).map(|_| ())))
    |

error[E0609]: no field `dataset_detail_overlay` on type `&mut AppContext`
  --> crates/brush-app/src/utils.rs:81:44
   |
81 |         let dataset_overlay = &mut context.dataset_detail_overlay;
   |                                            ^^^^^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `dataset`, `camera`, `view_aspect`, `controls`, `model_local_to_world`, `device`

warning: unused variable: `dataset_detail_overlay`
    --> crates/brush-app/src/app.rs:1280:21
     |
1280 |                 let dataset_detail_overlay = self.dataset_detail_overlay.clone();
     |                     ^^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dataset_detail_overlay`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `view_aspect`
  --> crates/brush-app/src/panels/scene.rs:96:21
   |
96 |         if let Some(view_aspect) = context.view_aspect {
   |                     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_view_aspect`

warning: variable does not need to be mutable
  --> crates/brush-app/src/panels/scene.rs:88:13
   |
88 |         let mut size = size.floor();
   |             ----^^^^
   |             |
   |             help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

Some errors have detailed explanations: E0308, E0609.
For more information about an error, try `rustc --explain E0308`.
warning: `brush-app` (lib) generated 18 warnings
error: could not compile `brush-app` (lib) due to 2 previous errors; 18 warnings emitted
2025-03-19T19:17:57.138248Z ERROR ❌ error
error from build pipeline

Caused by:
    0: HTML build pipeline failed (1 errors), showing first
    1: error from asset pipeline
    2: running cargo build
    3: error during cargo build execution
    4: cargo call to executable 'cargo' with args: '["build", "--target=wasm32-unknown-unknown", "--manifest-path", "/Users/ryanhickman/code/brush/crates/brush-app/Cargo.toml"]' returned a bad status: exit status: 101
2025-03-19T19:18:06.216672Z  INFO 📦 starting build
warning: unused import: `std::io::Error`
 --> crates/rrfd/src/lib.rs:8:5
  |
8 | use std::io::Error;
  |     ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::io::ErrorKind`
 --> crates/rrfd/src/lib.rs:9:5
  |
9 | use std::io::ErrorKind;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::path::Path`
 --> crates/brush-dataset/src/storage/mod.rs:7:5
  |
7 | use std::path::Path;
  |     ^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `DatasetInfo` and `StorageType`
 --> crates/brush-dataset/src/storage/indexed_db.rs:6:29
  |
6 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |                             ^^^^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `Path`
 --> crates/brush-dataset/src/storage/filesystem.rs:4:17
  |
4 | use std::path::{Path, PathBuf};
  |                 ^^^^

warning: unused import: `DatasetStorage`
 --> crates/brush-dataset/src/storage/filesystem.rs:7:13
  |
7 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |             ^^^^^^^^^^^^^^

warning: constant `DB_NAME` is never used
 --> crates/brush-dataset/src/storage/indexed_db.rs:9:7
  |
9 | const DB_NAME: &str = "brush_dataset_storage";
  |       ^^^^^^^
  |
  = note: `#[warn(dead_code)]` on by default

warning: constant `METADATA_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:10:7
   |
10 | const METADATA_STORE: &str = "metadata";
   |       ^^^^^^^^^^^^^^

warning: constant `DATASET_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:11:7
   |
11 | const DATASET_STORE: &str = "datasets";
   |       ^^^^^^^^^^^^^

warning: method `get_total_storage_used` is never used
   --> crates/brush-dataset/src/storage/filesystem.rs:126:8
    |
15  | impl FilesystemStorage {
    | ---------------------- method in this implementation
...
126 |     fn get_total_storage_used(&self) -> Result<u64> {
    |        ^^^^^^^^^^^^^^^^^^^^^^

warning: `rrfd` (lib) generated 2 warnings (run `cargo fix --lib -p rrfd` to apply 2 suggestions)
warning: `brush-dataset` (lib) generated 8 warnings (run `cargo fix --lib -p brush-dataset` to apply 4 suggestions)
   Compiling brush-app v0.2.0 (/Users/ryanhickman/code/brush/crates/brush-app)
warning: unused import: `std::fmt::Debug`
  --> crates/brush-app/src/app.rs:29:5
   |
29 | use std::fmt::Debug;
   |     ^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::hash::Hash`
  --> crates/brush-app/src/app.rs:30:5
   |
30 | use std::hash::Hash;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `std::io::Error`
  --> crates/brush-app/src/app.rs:31:5
   |
31 | use std::io::Error;
   |     ^^^^^^^^^^^^^^

warning: unused import: `std::io::ErrorKind`
  --> crates/brush-app/src/app.rs:32:5
   |
32 | use std::io::ErrorKind;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
  --> crates/brush-app/src/app.rs:33:5
   |
33 | use std::pin::Pin;
   |     ^^^^^^^^^^^^^

warning: unused import: `std::time::Duration`
  --> crates/brush-app/src/app.rs:35:5
   |
35 | use std::time::Duration;
   |     ^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Align2` and `RichText`
  --> crates/brush-app/src/app.rs:36:12
   |
36 | use egui::{Align2, RichText};
   |            ^^^^^^  ^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
  --> crates/brush-app/src/app.rs:37:5
   |
37 | use brush_dataset::splat_export;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ExportError` and `ExportFormat`
  --> crates/brush-app/src/app.rs:39:44
   |
39 | use crate::export_service::{ExportService, ExportError, ExportFormat};
   |                                            ^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `brush_dataset::storage`
  --> crates/brush-app/src/app.rs:40:5
   |
40 | use brush_dataset::storage;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
 --> crates/brush-app/src/panels/scene.rs:1:5
  |
1 | use brush_dataset::splat_export;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ControlMessage`
 --> crates/brush-app/src/panels/scene.rs:2:35
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                   ^^^^^^^^^^^^^^

warning: unused import: `tokio_with_wasm::alias as tokio_wasm`
  --> crates/brush-app/src/panels/scene.rs:17:5
   |
17 | use tokio_with_wasm::alias as tokio_wasm;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ProcessMessage`
 --> crates/brush-app/src/overlays/controls_detail.rs:2:51
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                                   ^^^^^^^^^^^^^^

warning: unused import: `std::sync::Once`
 --> crates/brush-app/src/utils.rs:2:5
  |
2 | use std::sync::Once;
  |     ^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> crates/brush-app/src/app.rs:840:35
    |
840 |                       .and_then(|w| w.request_animation_frame(
    |  ___________________________________^
841 | |                         &js_sys::Function::new_with_args("", 
842 | |                             &format!("
843 | |                                 console.log('🧪 Scheduling test PLY file load');
...   |
852 | |                     ).map(|_| ()))
    | |_________________________________^ expected `Option<_>`, found `Result<(), JsValue>`
    |
    = note: expected enum `std::option::Option<_>`
               found enum `std::result::Result<(), JsValue>`
help: try wrapping the expression in `Some`
    |
840 ~                     .and_then(|w| Some(w.request_animation_frame(
841 |                         &js_sys::Function::new_with_args("", 
...
851 |                         )
852 ~                     ).map(|_| ())))
    |

error[E0609]: no field `dataset_detail_overlay` on type `&mut AppContext`
  --> crates/brush-app/src/utils.rs:81:44
   |
81 |         let dataset_overlay = &mut context.dataset_detail_overlay;
   |                                            ^^^^^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `dataset`, `camera`, `view_aspect`, `controls`, `model_local_to_world`, `device`

warning: unused variable: `dataset_detail_overlay`
    --> crates/brush-app/src/app.rs:1280:21
     |
1280 |                 let dataset_detail_overlay = self.dataset_detail_overlay.clone();
     |                     ^^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dataset_detail_overlay`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `view_aspect`
  --> crates/brush-app/src/panels/scene.rs:96:21
   |
96 |         if let Some(view_aspect) = context.view_aspect {
   |                     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_view_aspect`

Some errors have detailed explanations: E0308, E0609.
For more information about an error, try `rustc --explain E0308`.
warning: `brush-app` (lib) generated 17 warnings
error: could not compile `brush-app` (lib) due to 2 previous errors; 17 warnings emitted
2025-03-19T19:18:07.592293Z ERROR ❌ error
error from build pipeline

Caused by:
    0: HTML build pipeline failed (1 errors), showing first
    1: error from asset pipeline
    2: running cargo build
    3: error during cargo build execution
    4: cargo call to executable 'cargo' with args: '["build", "--target=wasm32-unknown-unknown", "--manifest-path", "/Users/ryanhickman/code/brush/crates/brush-app/Cargo.toml"]' returned a bad status: exit status: 101
2025-03-19T19:19:13.881360Z  INFO 📦 starting build
warning: unused import: `std::io::Error`
 --> crates/rrfd/src/lib.rs:8:5
  |
8 | use std::io::Error;
  |     ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::io::ErrorKind`
 --> crates/rrfd/src/lib.rs:9:5
  |
9 | use std::io::ErrorKind;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::path::Path`
 --> crates/brush-dataset/src/storage/mod.rs:7:5
  |
7 | use std::path::Path;
  |     ^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `DatasetInfo` and `StorageType`
 --> crates/brush-dataset/src/storage/indexed_db.rs:6:29
  |
6 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |                             ^^^^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `Path`
 --> crates/brush-dataset/src/storage/filesystem.rs:4:17
  |
4 | use std::path::{Path, PathBuf};
  |                 ^^^^

warning: unused import: `DatasetStorage`
 --> crates/brush-dataset/src/storage/filesystem.rs:7:13
  |
7 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |             ^^^^^^^^^^^^^^

warning: constant `DB_NAME` is never used
 --> crates/brush-dataset/src/storage/indexed_db.rs:9:7
  |
9 | const DB_NAME: &str = "brush_dataset_storage";
  |       ^^^^^^^
  |
  = note: `#[warn(dead_code)]` on by default

warning: constant `METADATA_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:10:7
   |
10 | const METADATA_STORE: &str = "metadata";
   |       ^^^^^^^^^^^^^^

warning: constant `DATASET_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:11:7
   |
11 | const DATASET_STORE: &str = "datasets";
   |       ^^^^^^^^^^^^^

warning: method `get_total_storage_used` is never used
   --> crates/brush-dataset/src/storage/filesystem.rs:126:8
    |
15  | impl FilesystemStorage {
    | ---------------------- method in this implementation
...
126 |     fn get_total_storage_used(&self) -> Result<u64> {
    |        ^^^^^^^^^^^^^^^^^^^^^^

warning: `rrfd` (lib) generated 2 warnings (run `cargo fix --lib -p rrfd` to apply 2 suggestions)
warning: `brush-dataset` (lib) generated 8 warnings (run `cargo fix --lib -p brush-dataset` to apply 4 suggestions)
   Compiling brush-app v0.2.0 (/Users/ryanhickman/code/brush/crates/brush-app)
warning: unused import: `std::fmt::Debug`
  --> crates/brush-app/src/app.rs:29:5
   |
29 | use std::fmt::Debug;
   |     ^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::hash::Hash`
  --> crates/brush-app/src/app.rs:30:5
   |
30 | use std::hash::Hash;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `std::io::Error`
  --> crates/brush-app/src/app.rs:31:5
   |
31 | use std::io::Error;
   |     ^^^^^^^^^^^^^^

warning: unused import: `std::io::ErrorKind`
  --> crates/brush-app/src/app.rs:32:5
   |
32 | use std::io::ErrorKind;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
  --> crates/brush-app/src/app.rs:33:5
   |
33 | use std::pin::Pin;
   |     ^^^^^^^^^^^^^

warning: unused import: `std::time::Duration`
  --> crates/brush-app/src/app.rs:35:5
   |
35 | use std::time::Duration;
   |     ^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Align2` and `RichText`
  --> crates/brush-app/src/app.rs:36:12
   |
36 | use egui::{Align2, RichText};
   |            ^^^^^^  ^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
  --> crates/brush-app/src/app.rs:37:5
   |
37 | use brush_dataset::splat_export;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ExportError` and `ExportFormat`
  --> crates/brush-app/src/app.rs:39:44
   |
39 | use crate::export_service::{ExportService, ExportError, ExportFormat};
   |                                            ^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `brush_dataset::storage`
  --> crates/brush-app/src/app.rs:40:5
   |
40 | use brush_dataset::storage;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
 --> crates/brush-app/src/panels/scene.rs:1:5
  |
1 | use brush_dataset::splat_export;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ControlMessage`
 --> crates/brush-app/src/panels/scene.rs:2:35
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                   ^^^^^^^^^^^^^^

warning: unused import: `tokio_with_wasm::alias as tokio_wasm`
  --> crates/brush-app/src/panels/scene.rs:17:5
   |
17 | use tokio_with_wasm::alias as tokio_wasm;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ProcessMessage`
 --> crates/brush-app/src/overlays/controls_detail.rs:2:51
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                                   ^^^^^^^^^^^^^^

warning: unused import: `std::sync::Once`
 --> crates/brush-app/src/utils.rs:2:5
  |
2 | use std::sync::Once;
  |     ^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> crates/brush-app/src/app.rs:840:35
    |
840 |                       .and_then(|w| w.request_animation_frame(
    |  ___________________________________^
841 | |                         &js_sys::Function::new_with_args("", 
842 | |                             &format!("
843 | |                                 console.log('🧪 Scheduling test PLY file load');
...   |
852 | |                     ).map(|_| ()))
    | |_________________________________^ expected `Option<_>`, found `Result<(), JsValue>`
    |
    = note: expected enum `std::option::Option<_>`
               found enum `std::result::Result<(), JsValue>`
help: try wrapping the expression in `Some`
    |
840 ~                     .and_then(|w| Some(w.request_animation_frame(
841 |                         &js_sys::Function::new_with_args("", 
...
851 |                         )
852 ~                     ).map(|_| ())))
    |

error[E0609]: no field `dataset_detail_overlay` on type `&mut AppContext`
  --> crates/brush-app/src/utils.rs:81:44
   |
81 |         let dataset_overlay = &mut context.dataset_detail_overlay;
   |                                            ^^^^^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `dataset`, `camera`, `view_aspect`, `controls`, `model_local_to_world`, `device`

warning: unused variable: `dataset_detail_overlay`
    --> crates/brush-app/src/app.rs:1280:21
     |
1280 |                 let dataset_detail_overlay = self.dataset_detail_overlay.clone();
     |                     ^^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dataset_detail_overlay`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `view_aspect`
  --> crates/brush-app/src/panels/scene.rs:96:21
   |
96 |         if let Some(view_aspect) = context.view_aspect {
   |                     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_view_aspect`

Some errors have detailed explanations: E0308, E0609.
For more information about an error, try `rustc --explain E0308`.
warning: `brush-app` (lib) generated 17 warnings
error: could not compile `brush-app` (lib) due to 2 previous errors; 17 warnings emitted
2025-03-19T19:19:15.331177Z ERROR ❌ error
error from build pipeline

Caused by:
    0: HTML build pipeline failed (1 errors), showing first
    1: error from asset pipeline
    2: running cargo build
    3: error during cargo build execution
    4: cargo call to executable 'cargo' with args: '["build", "--target=wasm32-unknown-unknown", "--manifest-path", "/Users/ryanhickman/code/brush/crates/brush-app/Cargo.toml"]' returned a bad status: exit status: 101
2025-03-19T19:19:15.331243Z  INFO 📦 starting build
warning: unused import: `std::io::Error`
 --> crates/rrfd/src/lib.rs:8:5
  |
8 | use std::io::Error;
  |     ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::io::ErrorKind`
 --> crates/rrfd/src/lib.rs:9:5
  |
9 | use std::io::ErrorKind;
  |     ^^^^^^^^^^^^^^^^^^

warning: `rrfd` (lib) generated 2 warnings (run `cargo fix --lib -p rrfd` to apply 2 suggestions)
warning: unused import: `std::path::Path`
 --> crates/brush-dataset/src/storage/mod.rs:7:5
  |
7 | use std::path::Path;
  |     ^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `DatasetInfo` and `StorageType`
 --> crates/brush-dataset/src/storage/indexed_db.rs:6:29
  |
6 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |                             ^^^^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `Path`
 --> crates/brush-dataset/src/storage/filesystem.rs:4:17
  |
4 | use std::path::{Path, PathBuf};
  |                 ^^^^

warning: unused import: `DatasetStorage`
 --> crates/brush-dataset/src/storage/filesystem.rs:7:13
  |
7 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |             ^^^^^^^^^^^^^^

warning: constant `DB_NAME` is never used
 --> crates/brush-dataset/src/storage/indexed_db.rs:9:7
  |
9 | const DB_NAME: &str = "brush_dataset_storage";
  |       ^^^^^^^
  |
  = note: `#[warn(dead_code)]` on by default

warning: constant `METADATA_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:10:7
   |
10 | const METADATA_STORE: &str = "metadata";
   |       ^^^^^^^^^^^^^^

warning: constant `DATASET_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:11:7
   |
11 | const DATASET_STORE: &str = "datasets";
   |       ^^^^^^^^^^^^^

warning: method `get_total_storage_used` is never used
   --> crates/brush-dataset/src/storage/filesystem.rs:126:8
    |
15  | impl FilesystemStorage {
    | ---------------------- method in this implementation
...
126 |     fn get_total_storage_used(&self) -> Result<u64> {
    |        ^^^^^^^^^^^^^^^^^^^^^^

warning: `brush-dataset` (lib) generated 8 warnings (run `cargo fix --lib -p brush-dataset` to apply 4 suggestions)
   Compiling brush-app v0.2.0 (/Users/ryanhickman/code/brush/crates/brush-app)
warning: unused import: `std::fmt::Debug`
  --> crates/brush-app/src/app.rs:29:5
   |
29 | use std::fmt::Debug;
   |     ^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::hash::Hash`
  --> crates/brush-app/src/app.rs:30:5
   |
30 | use std::hash::Hash;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `std::io::Error`
  --> crates/brush-app/src/app.rs:31:5
   |
31 | use std::io::Error;
   |     ^^^^^^^^^^^^^^

warning: unused import: `std::io::ErrorKind`
  --> crates/brush-app/src/app.rs:32:5
   |
32 | use std::io::ErrorKind;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
  --> crates/brush-app/src/app.rs:33:5
   |
33 | use std::pin::Pin;
   |     ^^^^^^^^^^^^^

warning: unused import: `std::time::Duration`
  --> crates/brush-app/src/app.rs:35:5
   |
35 | use std::time::Duration;
   |     ^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Align2` and `RichText`
  --> crates/brush-app/src/app.rs:36:12
   |
36 | use egui::{Align2, RichText};
   |            ^^^^^^  ^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
  --> crates/brush-app/src/app.rs:37:5
   |
37 | use brush_dataset::splat_export;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ExportError` and `ExportFormat`
  --> crates/brush-app/src/app.rs:39:44
   |
39 | use crate::export_service::{ExportService, ExportError, ExportFormat};
   |                                            ^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `brush_dataset::storage`
  --> crates/brush-app/src/app.rs:40:5
   |
40 | use brush_dataset::storage;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
 --> crates/brush-app/src/panels/scene.rs:1:5
  |
1 | use brush_dataset::splat_export;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ControlMessage`
 --> crates/brush-app/src/panels/scene.rs:2:35
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                   ^^^^^^^^^^^^^^

warning: unused import: `tokio_with_wasm::alias as tokio_wasm`
  --> crates/brush-app/src/panels/scene.rs:17:5
   |
17 | use tokio_with_wasm::alias as tokio_wasm;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ProcessMessage`
 --> crates/brush-app/src/overlays/controls_detail.rs:2:51
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                                   ^^^^^^^^^^^^^^

warning: unused import: `std::sync::Once`
 --> crates/brush-app/src/utils.rs:2:5
  |
2 | use std::sync::Once;
  |     ^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> crates/brush-app/src/app.rs:840:35
    |
840 |                       .and_then(|w| w.request_animation_frame(
    |  ___________________________________^
841 | |                         &js_sys::Function::new_with_args("", 
842 | |                             &format!("
843 | |                                 console.log('🧪 Scheduling test PLY file load');
...   |
852 | |                     ).map(|_| ()))
    | |_________________________________^ expected `Option<_>`, found `Result<(), JsValue>`
    |
    = note: expected enum `std::option::Option<_>`
               found enum `std::result::Result<(), JsValue>`
help: try wrapping the expression in `Some`
    |
840 ~                     .and_then(|w| Some(w.request_animation_frame(
841 |                         &js_sys::Function::new_with_args("", 
...
851 |                         )
852 ~                     ).map(|_| ())))
    |

error[E0609]: no field `dataset_detail_overlay` on type `&mut AppContext`
  --> crates/brush-app/src/utils.rs:81:44
   |
81 |         let dataset_overlay = &mut context.dataset_detail_overlay;
   |                                            ^^^^^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `dataset`, `camera`, `view_aspect`, `controls`, `model_local_to_world`, `device`

warning: unused variable: `dataset_detail_overlay`
    --> crates/brush-app/src/app.rs:1280:21
     |
1280 |                 let dataset_detail_overlay = self.dataset_detail_overlay.clone();
     |                     ^^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dataset_detail_overlay`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `view_aspect`
  --> crates/brush-app/src/panels/scene.rs:96:21
   |
96 |         if let Some(view_aspect) = context.view_aspect {
   |                     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_view_aspect`

Some errors have detailed explanations: E0308, E0609.
For more information about an error, try `rustc --explain E0308`.
warning: `brush-app` (lib) generated 17 warnings
error: could not compile `brush-app` (lib) due to 2 previous errors; 17 warnings emitted
2025-03-19T19:19:16.541108Z ERROR ❌ error
error from build pipeline

Caused by:
    0: HTML build pipeline failed (1 errors), showing first
    1: error from asset pipeline
    2: running cargo build
    3: error during cargo build execution
    4: cargo call to executable 'cargo' with args: '["build", "--target=wasm32-unknown-unknown", "--manifest-path", "/Users/ryanhickman/code/brush/crates/brush-app/Cargo.toml"]' returned a bad status: exit status: 101
2025-03-19T19:19:25.094398Z  INFO 📦 starting build
warning: unused import: `std::io::Error`
 --> crates/rrfd/src/lib.rs:8:5
  |
8 | use std::io::Error;
  |     ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::io::ErrorKind`
 --> crates/rrfd/src/lib.rs:9:5
  |
9 | use std::io::ErrorKind;
  |     ^^^^^^^^^^^^^^^^^^

warning: `rrfd` (lib) generated 2 warnings (run `cargo fix --lib -p rrfd` to apply 2 suggestions)
warning: unused import: `std::path::Path`
 --> crates/brush-dataset/src/storage/mod.rs:7:5
  |
7 | use std::path::Path;
  |     ^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `DatasetInfo` and `StorageType`
 --> crates/brush-dataset/src/storage/indexed_db.rs:6:29
  |
6 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |                             ^^^^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `Path`
 --> crates/brush-dataset/src/storage/filesystem.rs:4:17
  |
4 | use std::path::{Path, PathBuf};
  |                 ^^^^

warning: unused import: `DatasetStorage`
 --> crates/brush-dataset/src/storage/filesystem.rs:7:13
  |
7 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |             ^^^^^^^^^^^^^^

warning: constant `DB_NAME` is never used
 --> crates/brush-dataset/src/storage/indexed_db.rs:9:7
  |
9 | const DB_NAME: &str = "brush_dataset_storage";
  |       ^^^^^^^
  |
  = note: `#[warn(dead_code)]` on by default

warning: constant `METADATA_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:10:7
   |
10 | const METADATA_STORE: &str = "metadata";
   |       ^^^^^^^^^^^^^^

warning: constant `DATASET_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:11:7
   |
11 | const DATASET_STORE: &str = "datasets";
   |       ^^^^^^^^^^^^^

warning: method `get_total_storage_used` is never used
   --> crates/brush-dataset/src/storage/filesystem.rs:126:8
    |
15  | impl FilesystemStorage {
    | ---------------------- method in this implementation
...
126 |     fn get_total_storage_used(&self) -> Result<u64> {
    |        ^^^^^^^^^^^^^^^^^^^^^^

   Compiling brush-app v0.2.0 (/Users/ryanhickman/code/brush/crates/brush-app)
warning: `brush-dataset` (lib) generated 8 warnings (run `cargo fix --lib -p brush-dataset` to apply 4 suggestions)
warning: unused import: `std::fmt::Debug`
  --> crates/brush-app/src/app.rs:29:5
   |
29 | use std::fmt::Debug;
   |     ^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::hash::Hash`
  --> crates/brush-app/src/app.rs:30:5
   |
30 | use std::hash::Hash;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `std::io::Error`
  --> crates/brush-app/src/app.rs:31:5
   |
31 | use std::io::Error;
   |     ^^^^^^^^^^^^^^

warning: unused import: `std::io::ErrorKind`
  --> crates/brush-app/src/app.rs:32:5
   |
32 | use std::io::ErrorKind;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
  --> crates/brush-app/src/app.rs:33:5
   |
33 | use std::pin::Pin;
   |     ^^^^^^^^^^^^^

warning: unused import: `std::time::Duration`
  --> crates/brush-app/src/app.rs:35:5
   |
35 | use std::time::Duration;
   |     ^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Align2` and `RichText`
  --> crates/brush-app/src/app.rs:36:12
   |
36 | use egui::{Align2, RichText};
   |            ^^^^^^  ^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
  --> crates/brush-app/src/app.rs:37:5
   |
37 | use brush_dataset::splat_export;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ExportError` and `ExportFormat`
  --> crates/brush-app/src/app.rs:39:44
   |
39 | use crate::export_service::{ExportService, ExportError, ExportFormat};
   |                                            ^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `brush_dataset::storage`
  --> crates/brush-app/src/app.rs:40:5
   |
40 | use brush_dataset::storage;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
 --> crates/brush-app/src/panels/scene.rs:1:5
  |
1 | use brush_dataset::splat_export;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ControlMessage`
 --> crates/brush-app/src/panels/scene.rs:2:35
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                   ^^^^^^^^^^^^^^

warning: unused import: `tokio_with_wasm::alias as tokio_wasm`
  --> crates/brush-app/src/panels/scene.rs:17:5
   |
17 | use tokio_with_wasm::alias as tokio_wasm;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ProcessMessage`
 --> crates/brush-app/src/overlays/controls_detail.rs:2:51
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                                   ^^^^^^^^^^^^^^

warning: unused import: `std::sync::Once`
 --> crates/brush-app/src/utils.rs:2:5
  |
2 | use std::sync::Once;
  |     ^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> crates/brush-app/src/app.rs:840:35
    |
840 |                       .and_then(|w| w.request_animation_frame(
    |  ___________________________________^
841 | |                         &js_sys::Function::new_with_args("", 
842 | |                             &format!("
843 | |                                 console.log('🧪 Scheduling test PLY file load');
...   |
852 | |                     ).map(|_| ()))
    | |_________________________________^ expected `Option<_>`, found `Result<(), JsValue>`
    |
    = note: expected enum `std::option::Option<_>`
               found enum `std::result::Result<(), JsValue>`
help: try wrapping the expression in `Some`
    |
840 ~                     .and_then(|w| Some(w.request_animation_frame(
841 |                         &js_sys::Function::new_with_args("", 
...
851 |                         )
852 ~                     ).map(|_| ())))
    |

error[E0609]: no field `dataset_detail_overlay` on type `&mut AppContext`
  --> crates/brush-app/src/utils.rs:81:44
   |
81 |         let dataset_overlay = &mut context.dataset_detail_overlay;
   |                                            ^^^^^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `dataset`, `camera`, `view_aspect`, `controls`, `model_local_to_world`, `device`

warning: unused variable: `dataset_detail_overlay`
    --> crates/brush-app/src/app.rs:1280:21
     |
1280 |                 let dataset_detail_overlay = self.dataset_detail_overlay.clone();
     |                     ^^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dataset_detail_overlay`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `view_aspect`
  --> crates/brush-app/src/panels/scene.rs:96:21
   |
96 |         if let Some(view_aspect) = context.view_aspect {
   |                     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_view_aspect`

Some errors have detailed explanations: E0308, E0609.
For more information about an error, try `rustc --explain E0308`.
warning: `brush-app` (lib) generated 17 warnings
error: could not compile `brush-app` (lib) due to 2 previous errors; 17 warnings emitted
2025-03-19T19:19:26.495483Z ERROR ❌ error
error from build pipeline

Caused by:
    0: HTML build pipeline failed (1 errors), showing first
    1: error from asset pipeline
    2: running cargo build
    3: error during cargo build execution
    4: cargo call to executable 'cargo' with args: '["build", "--target=wasm32-unknown-unknown", "--manifest-path", "/Users/ryanhickman/code/brush/crates/brush-app/Cargo.toml"]' returned a bad status: exit status: 101
2025-03-19T19:19:26.495551Z  INFO 📦 starting build
warning: unused import: `std::io::Error`
 --> crates/rrfd/src/lib.rs:8:5
  |
8 | use std::io::Error;
  |     ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::io::ErrorKind`
 --> crates/rrfd/src/lib.rs:9:5
  |
9 | use std::io::ErrorKind;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::path::Path`
 --> crates/brush-dataset/src/storage/mod.rs:7:5
  |
7 | use std::path::Path;
  |     ^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `DatasetInfo` and `StorageType`
 --> crates/brush-dataset/src/storage/indexed_db.rs:6:29
  |
6 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |                             ^^^^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `Path`
 --> crates/brush-dataset/src/storage/filesystem.rs:4:17
  |
4 | use std::path::{Path, PathBuf};
  |                 ^^^^

warning: unused import: `DatasetStorage`
 --> crates/brush-dataset/src/storage/filesystem.rs:7:13
  |
7 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |             ^^^^^^^^^^^^^^

warning: constant `DB_NAME` is never used
 --> crates/brush-dataset/src/storage/indexed_db.rs:9:7
  |
9 | const DB_NAME: &str = "brush_dataset_storage";
  |       ^^^^^^^
  |
  = note: `#[warn(dead_code)]` on by default

warning: constant `METADATA_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:10:7
   |
10 | const METADATA_STORE: &str = "metadata";
   |       ^^^^^^^^^^^^^^

warning: constant `DATASET_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:11:7
   |
11 | const DATASET_STORE: &str = "datasets";
   |       ^^^^^^^^^^^^^

warning: method `get_total_storage_used` is never used
   --> crates/brush-dataset/src/storage/filesystem.rs:126:8
    |
15  | impl FilesystemStorage {
    | ---------------------- method in this implementation
...
126 |     fn get_total_storage_used(&self) -> Result<u64> {
    |        ^^^^^^^^^^^^^^^^^^^^^^

warning: `rrfd` (lib) generated 2 warnings (run `cargo fix --lib -p rrfd` to apply 2 suggestions)
warning: `brush-dataset` (lib) generated 8 warnings (run `cargo fix --lib -p brush-dataset` to apply 4 suggestions)
   Compiling brush-app v0.2.0 (/Users/ryanhickman/code/brush/crates/brush-app)
warning: unused import: `std::fmt::Debug`
  --> crates/brush-app/src/app.rs:29:5
   |
29 | use std::fmt::Debug;
   |     ^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::hash::Hash`
  --> crates/brush-app/src/app.rs:30:5
   |
30 | use std::hash::Hash;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `std::io::Error`
  --> crates/brush-app/src/app.rs:31:5
   |
31 | use std::io::Error;
   |     ^^^^^^^^^^^^^^

warning: unused import: `std::io::ErrorKind`
  --> crates/brush-app/src/app.rs:32:5
   |
32 | use std::io::ErrorKind;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
  --> crates/brush-app/src/app.rs:33:5
   |
33 | use std::pin::Pin;
   |     ^^^^^^^^^^^^^

warning: unused import: `std::time::Duration`
  --> crates/brush-app/src/app.rs:35:5
   |
35 | use std::time::Duration;
   |     ^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Align2` and `RichText`
  --> crates/brush-app/src/app.rs:36:12
   |
36 | use egui::{Align2, RichText};
   |            ^^^^^^  ^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
  --> crates/brush-app/src/app.rs:37:5
   |
37 | use brush_dataset::splat_export;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ExportError` and `ExportFormat`
  --> crates/brush-app/src/app.rs:39:44
   |
39 | use crate::export_service::{ExportService, ExportError, ExportFormat};
   |                                            ^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `brush_dataset::storage`
  --> crates/brush-app/src/app.rs:40:5
   |
40 | use brush_dataset::storage;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
 --> crates/brush-app/src/panels/scene.rs:1:5
  |
1 | use brush_dataset::splat_export;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ControlMessage`
 --> crates/brush-app/src/panels/scene.rs:2:35
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                   ^^^^^^^^^^^^^^

warning: unused import: `tokio_with_wasm::alias as tokio_wasm`
  --> crates/brush-app/src/panels/scene.rs:17:5
   |
17 | use tokio_with_wasm::alias as tokio_wasm;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ProcessMessage`
 --> crates/brush-app/src/overlays/controls_detail.rs:2:51
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                                   ^^^^^^^^^^^^^^

warning: unused import: `std::sync::Once`
 --> crates/brush-app/src/utils.rs:2:5
  |
2 | use std::sync::Once;
  |     ^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> crates/brush-app/src/app.rs:840:35
    |
840 |                       .and_then(|w| w.request_animation_frame(
    |  ___________________________________^
841 | |                         &js_sys::Function::new_with_args("", 
842 | |                             &format!("
843 | |                                 console.log('🧪 Scheduling test PLY file load');
...   |
852 | |                     ).map(|_| ()))
    | |_________________________________^ expected `Option<_>`, found `Result<(), JsValue>`
    |
    = note: expected enum `std::option::Option<_>`
               found enum `std::result::Result<(), JsValue>`
help: try wrapping the expression in `Some`
    |
840 ~                     .and_then(|w| Some(w.request_animation_frame(
841 |                         &js_sys::Function::new_with_args("", 
...
851 |                         )
852 ~                     ).map(|_| ())))
    |

error[E0609]: no field `dataset_detail_overlay` on type `&mut AppContext`
  --> crates/brush-app/src/utils.rs:81:44
   |
81 |         let dataset_overlay = &mut context.dataset_detail_overlay;
   |                                            ^^^^^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `dataset`, `camera`, `view_aspect`, `controls`, `model_local_to_world`, `device`

warning: unused variable: `dataset_detail_overlay`
    --> crates/brush-app/src/app.rs:1280:21
     |
1280 |                 let dataset_detail_overlay = self.dataset_detail_overlay.clone();
     |                     ^^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dataset_detail_overlay`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `view_aspect`
  --> crates/brush-app/src/panels/scene.rs:96:21
   |
96 |         if let Some(view_aspect) = context.view_aspect {
   |                     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_view_aspect`

Some errors have detailed explanations: E0308, E0609.
For more information about an error, try `rustc --explain E0308`.
warning: `brush-app` (lib) generated 17 warnings
error: could not compile `brush-app` (lib) due to 2 previous errors; 17 warnings emitted
2025-03-19T19:19:27.722161Z ERROR ❌ error
error from build pipeline

Caused by:
    0: HTML build pipeline failed (1 errors), showing first
    1: error from asset pipeline
    2: running cargo build
    3: error during cargo build execution
    4: cargo call to executable 'cargo' with args: '["build", "--target=wasm32-unknown-unknown", "--manifest-path", "/Users/ryanhickman/code/brush/crates/brush-app/Cargo.toml"]' returned a bad status: exit status: 101
2025-03-19T19:19:57.534623Z  INFO 📦 starting build
warning: unused import: `std::io::Error`
 --> crates/rrfd/src/lib.rs:8:5
  |
8 | use std::io::Error;
  |     ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::io::ErrorKind`
 --> crates/rrfd/src/lib.rs:9:5
  |
9 | use std::io::ErrorKind;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::path::Path`
 --> crates/brush-dataset/src/storage/mod.rs:7:5
  |
7 | use std::path::Path;
  |     ^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `DatasetInfo` and `StorageType`
 --> crates/brush-dataset/src/storage/indexed_db.rs:6:29
  |
6 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |                             ^^^^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `Path`
 --> crates/brush-dataset/src/storage/filesystem.rs:4:17
  |
4 | use std::path::{Path, PathBuf};
  |                 ^^^^

warning: unused import: `DatasetStorage`
 --> crates/brush-dataset/src/storage/filesystem.rs:7:13
  |
7 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |             ^^^^^^^^^^^^^^

warning: constant `DB_NAME` is never used
 --> crates/brush-dataset/src/storage/indexed_db.rs:9:7
  |
9 | const DB_NAME: &str = "brush_dataset_storage";
  |       ^^^^^^^
  |
  = note: `#[warn(dead_code)]` on by default

warning: constant `METADATA_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:10:7
   |
10 | const METADATA_STORE: &str = "metadata";
   |       ^^^^^^^^^^^^^^

warning: constant `DATASET_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:11:7
   |
11 | const DATASET_STORE: &str = "datasets";
   |       ^^^^^^^^^^^^^

warning: method `get_total_storage_used` is never used
   --> crates/brush-dataset/src/storage/filesystem.rs:126:8
    |
15  | impl FilesystemStorage {
    | ---------------------- method in this implementation
...
126 |     fn get_total_storage_used(&self) -> Result<u64> {
    |        ^^^^^^^^^^^^^^^^^^^^^^

warning: `rrfd` (lib) generated 2 warnings (run `cargo fix --lib -p rrfd` to apply 2 suggestions)
warning: `brush-dataset` (lib) generated 8 warnings (run `cargo fix --lib -p brush-dataset` to apply 4 suggestions)
   Compiling brush-app v0.2.0 (/Users/ryanhickman/code/brush/crates/brush-app)
warning: unused import: `std::fmt::Debug`
  --> crates/brush-app/src/app.rs:29:5
   |
29 | use std::fmt::Debug;
   |     ^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::hash::Hash`
  --> crates/brush-app/src/app.rs:30:5
   |
30 | use std::hash::Hash;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `std::io::Error`
  --> crates/brush-app/src/app.rs:31:5
   |
31 | use std::io::Error;
   |     ^^^^^^^^^^^^^^

warning: unused import: `std::io::ErrorKind`
  --> crates/brush-app/src/app.rs:32:5
   |
32 | use std::io::ErrorKind;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
  --> crates/brush-app/src/app.rs:33:5
   |
33 | use std::pin::Pin;
   |     ^^^^^^^^^^^^^

warning: unused import: `std::time::Duration`
  --> crates/brush-app/src/app.rs:35:5
   |
35 | use std::time::Duration;
   |     ^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Align2` and `RichText`
  --> crates/brush-app/src/app.rs:36:12
   |
36 | use egui::{Align2, RichText};
   |            ^^^^^^  ^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
  --> crates/brush-app/src/app.rs:37:5
   |
37 | use brush_dataset::splat_export;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ExportError` and `ExportFormat`
  --> crates/brush-app/src/app.rs:39:44
   |
39 | use crate::export_service::{ExportService, ExportError, ExportFormat};
   |                                            ^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `brush_dataset::storage`
  --> crates/brush-app/src/app.rs:40:5
   |
40 | use brush_dataset::storage;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
 --> crates/brush-app/src/panels/scene.rs:1:5
  |
1 | use brush_dataset::splat_export;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ControlMessage`
 --> crates/brush-app/src/panels/scene.rs:2:35
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                   ^^^^^^^^^^^^^^

warning: unused import: `tokio_with_wasm::alias as tokio_wasm`
  --> crates/brush-app/src/panels/scene.rs:17:5
   |
17 | use tokio_with_wasm::alias as tokio_wasm;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ProcessMessage`
 --> crates/brush-app/src/overlays/controls_detail.rs:2:51
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                                   ^^^^^^^^^^^^^^

warning: unused import: `std::sync::Once`
 --> crates/brush-app/src/utils.rs:2:5
  |
2 | use std::sync::Once;
  |     ^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> crates/brush-app/src/app.rs:840:35
    |
840 |                       .and_then(|w| w.request_animation_frame(
    |  ___________________________________^
841 | |                         &js_sys::Function::new_with_args("", 
842 | |                             &format!("
843 | |                                 console.log('🧪 Scheduling test PLY file load');
...   |
852 | |                     ).map(|_| ()))
    | |_________________________________^ expected `Option<_>`, found `Result<(), JsValue>`
    |
    = note: expected enum `std::option::Option<_>`
               found enum `std::result::Result<(), JsValue>`
help: try wrapping the expression in `Some`
    |
840 ~                     .and_then(|w| Some(w.request_animation_frame(
841 |                         &js_sys::Function::new_with_args("", 
...
851 |                         )
852 ~                     ).map(|_| ())))
    |

error[E0308]: mismatched types
   --> crates/brush-app/src/app.rs:860:58
    |
860 |                         crate::utils::auto_load_test_ply(&mut ctx);
    |                         -------------------------------- ^^^^^^^^ expected `&mut App`, found `&mut RwLockWriteGuard<'_, ...>`
    |                         |
    |                         arguments to this function are incorrect
    |
    = note: expected mutable reference `&mut app::App`
               found mutable reference `&mut std::sync::RwLockWriteGuard<'_, AppContext>`
note: function defined here
   --> crates/brush-app/src/utils.rs:72:8
    |
72  | pub fn auto_load_test_ply(context: &mut crate::app::App) {
    |        ^^^^^^^^^^^^^^^^^^ -----------------------------

error[E0616]: field `dataset_detail_overlay` of struct `app::App` is private
  --> crates/brush-app/src/utils.rs:82:17
   |
82 |         context.dataset_detail_overlay.set_copy_datasets_to_local(false); // Don't try to copy in web
   |                 ^^^^^^^^^^^^^^^^^^^^^^ private field

error[E0616]: field `dataset_detail_overlay` of struct `app::App` is private
  --> crates/brush-app/src/utils.rs:83:17
   |
83 |         context.dataset_detail_overlay.set_selected_file(test_file);
   |                 ^^^^^^^^^^^^^^^^^^^^^^ private field

warning: unused variable: `dataset_detail_overlay`
    --> crates/brush-app/src/app.rs:1280:21
     |
1280 |                 let dataset_detail_overlay = self.dataset_detail_overlay.clone();
     |                     ^^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dataset_detail_overlay`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `view_aspect`
  --> crates/brush-app/src/panels/scene.rs:96:21
   |
96 |         if let Some(view_aspect) = context.view_aspect {
   |                     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_view_aspect`

Some errors have detailed explanations: E0308, E0616.
For more information about an error, try `rustc --explain E0308`.
warning: `brush-app` (lib) generated 17 warnings
error: could not compile `brush-app` (lib) due to 4 previous errors; 17 warnings emitted
2025-03-19T19:19:58.899214Z ERROR ❌ error
error from build pipeline

Caused by:
    0: HTML build pipeline failed (1 errors), showing first
    1: error from asset pipeline
    2: running cargo build
    3: error during cargo build execution
    4: cargo call to executable 'cargo' with args: '["build", "--target=wasm32-unknown-unknown", "--manifest-path", "/Users/ryanhickman/code/brush/crates/brush-app/Cargo.toml"]' returned a bad status: exit status: 101
2025-03-19T19:20:09.642446Z  INFO 📦 starting build
warning: unused import: `std::io::Error`
 --> crates/rrfd/src/lib.rs:8:5
  |
8 | use std::io::Error;
  |     ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::io::ErrorKind`
 --> crates/rrfd/src/lib.rs:9:5
  |
9 | use std::io::ErrorKind;
  |     ^^^^^^^^^^^^^^^^^^

warning: `rrfd` (lib) generated 2 warnings (run `cargo fix --lib -p rrfd` to apply 2 suggestions)
warning: unused import: `std::path::Path`
 --> crates/brush-dataset/src/storage/mod.rs:7:5
  |
7 | use std::path::Path;
  |     ^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `DatasetInfo` and `StorageType`
 --> crates/brush-dataset/src/storage/indexed_db.rs:6:29
  |
6 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |                             ^^^^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `Path`
 --> crates/brush-dataset/src/storage/filesystem.rs:4:17
  |
4 | use std::path::{Path, PathBuf};
  |                 ^^^^

warning: unused import: `DatasetStorage`
 --> crates/brush-dataset/src/storage/filesystem.rs:7:13
  |
7 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |             ^^^^^^^^^^^^^^

warning: constant `DB_NAME` is never used
 --> crates/brush-dataset/src/storage/indexed_db.rs:9:7
  |
9 | const DB_NAME: &str = "brush_dataset_storage";
  |       ^^^^^^^
  |
  = note: `#[warn(dead_code)]` on by default

warning: constant `METADATA_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:10:7
   |
10 | const METADATA_STORE: &str = "metadata";
   |       ^^^^^^^^^^^^^^

warning: constant `DATASET_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:11:7
   |
11 | const DATASET_STORE: &str = "datasets";
   |       ^^^^^^^^^^^^^

warning: method `get_total_storage_used` is never used
   --> crates/brush-dataset/src/storage/filesystem.rs:126:8
    |
15  | impl FilesystemStorage {
    | ---------------------- method in this implementation
...
126 |     fn get_total_storage_used(&self) -> Result<u64> {
    |        ^^^^^^^^^^^^^^^^^^^^^^

   Compiling brush-app v0.2.0 (/Users/ryanhickman/code/brush/crates/brush-app)
warning: `brush-dataset` (lib) generated 8 warnings (run `cargo fix --lib -p brush-dataset` to apply 4 suggestions)
warning: unused import: `std::fmt::Debug`
  --> crates/brush-app/src/app.rs:29:5
   |
29 | use std::fmt::Debug;
   |     ^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::hash::Hash`
  --> crates/brush-app/src/app.rs:30:5
   |
30 | use std::hash::Hash;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `std::io::Error`
  --> crates/brush-app/src/app.rs:31:5
   |
31 | use std::io::Error;
   |     ^^^^^^^^^^^^^^

warning: unused import: `std::io::ErrorKind`
  --> crates/brush-app/src/app.rs:32:5
   |
32 | use std::io::ErrorKind;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
  --> crates/brush-app/src/app.rs:33:5
   |
33 | use std::pin::Pin;
   |     ^^^^^^^^^^^^^

warning: unused import: `std::time::Duration`
  --> crates/brush-app/src/app.rs:35:5
   |
35 | use std::time::Duration;
   |     ^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Align2` and `RichText`
  --> crates/brush-app/src/app.rs:36:12
   |
36 | use egui::{Align2, RichText};
   |            ^^^^^^  ^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
  --> crates/brush-app/src/app.rs:37:5
   |
37 | use brush_dataset::splat_export;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ExportError` and `ExportFormat`
  --> crates/brush-app/src/app.rs:39:44
   |
39 | use crate::export_service::{ExportService, ExportError, ExportFormat};
   |                                            ^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `brush_dataset::storage`
  --> crates/brush-app/src/app.rs:40:5
   |
40 | use brush_dataset::storage;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
 --> crates/brush-app/src/panels/scene.rs:1:5
  |
1 | use brush_dataset::splat_export;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ControlMessage`
 --> crates/brush-app/src/panels/scene.rs:2:35
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                   ^^^^^^^^^^^^^^

warning: unused import: `tokio_with_wasm::alias as tokio_wasm`
  --> crates/brush-app/src/panels/scene.rs:17:5
   |
17 | use tokio_with_wasm::alias as tokio_wasm;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ProcessMessage`
 --> crates/brush-app/src/overlays/controls_detail.rs:2:51
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                                   ^^^^^^^^^^^^^^

warning: unused import: `std::sync::Once`
 --> crates/brush-app/src/utils.rs:2:5
  |
2 | use std::sync::Once;
  |     ^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> crates/brush-app/src/app.rs:857:58
    |
857 |                         crate::utils::auto_load_test_ply(&mut ctx);
    |                         -------------------------------- ^^^^^^^^ expected `&mut App`, found `&mut RwLockWriteGuard<'_, ...>`
    |                         |
    |                         arguments to this function are incorrect
    |
    = note: expected mutable reference `&mut app::App`
               found mutable reference `&mut std::sync::RwLockWriteGuard<'_, AppContext>`
note: function defined here
   --> crates/brush-app/src/utils.rs:72:8
    |
72  | pub fn auto_load_test_ply(context: &mut crate::app::App) {
    |        ^^^^^^^^^^^^^^^^^^ -----------------------------

error[E0616]: field `dataset_detail_overlay` of struct `app::App` is private
  --> crates/brush-app/src/utils.rs:82:17
   |
82 |         context.dataset_detail_overlay.set_copy_datasets_to_local(false); // Don't try to copy in web
   |                 ^^^^^^^^^^^^^^^^^^^^^^ private field

error[E0616]: field `dataset_detail_overlay` of struct `app::App` is private
  --> crates/brush-app/src/utils.rs:83:17
   |
83 |         context.dataset_detail_overlay.set_selected_file(test_file);
   |                 ^^^^^^^^^^^^^^^^^^^^^^ private field

warning: unused variable: `dataset_detail_overlay`
    --> crates/brush-app/src/app.rs:1277:21
     |
1277 |                 let dataset_detail_overlay = self.dataset_detail_overlay.clone();
     |                     ^^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dataset_detail_overlay`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `view_aspect`
  --> crates/brush-app/src/panels/scene.rs:96:21
   |
96 |         if let Some(view_aspect) = context.view_aspect {
   |                     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_view_aspect`

Some errors have detailed explanations: E0308, E0616.
For more information about an error, try `rustc --explain E0308`.
warning: `brush-app` (lib) generated 17 warnings
error: could not compile `brush-app` (lib) due to 3 previous errors; 17 warnings emitted
2025-03-19T19:20:11.044464Z ERROR ❌ error
error from build pipeline

Caused by:
    0: HTML build pipeline failed (1 errors), showing first
    1: error from asset pipeline
    2: running cargo build
    3: error during cargo build execution
    4: cargo call to executable 'cargo' with args: '["build", "--target=wasm32-unknown-unknown", "--manifest-path", "/Users/ryanhickman/code/brush/crates/brush-app/Cargo.toml"]' returned a bad status: exit status: 101
2025-03-19T19:20:26.041547Z  INFO 📦 starting build
warning: unused import: `std::path::Path`
 --> crates/brush-dataset/src/storage/mod.rs:7:5
  |
7 | use std::path::Path;
  |     ^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `DatasetInfo` and `StorageType`
 --> crates/brush-dataset/src/storage/indexed_db.rs:6:29
  |
6 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |                             ^^^^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `Path`
 --> crates/brush-dataset/src/storage/filesystem.rs:4:17
  |
4 | use std::path::{Path, PathBuf};
  |                 ^^^^

warning: unused import: `DatasetStorage`
 --> crates/brush-dataset/src/storage/filesystem.rs:7:13
  |
7 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |             ^^^^^^^^^^^^^^

warning: constant `DB_NAME` is never used
 --> crates/brush-dataset/src/storage/indexed_db.rs:9:7
  |
9 | const DB_NAME: &str = "brush_dataset_storage";
  |       ^^^^^^^
  |
  = note: `#[warn(dead_code)]` on by default

warning: constant `METADATA_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:10:7
   |
10 | const METADATA_STORE: &str = "metadata";
   |       ^^^^^^^^^^^^^^

warning: constant `DATASET_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:11:7
   |
11 | const DATASET_STORE: &str = "datasets";
   |       ^^^^^^^^^^^^^

warning: method `get_total_storage_used` is never used
   --> crates/brush-dataset/src/storage/filesystem.rs:126:8
    |
15  | impl FilesystemStorage {
    | ---------------------- method in this implementation
...
126 |     fn get_total_storage_used(&self) -> Result<u64> {
    |        ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::io::Error`
 --> crates/rrfd/src/lib.rs:8:5
  |
8 | use std::io::Error;
  |     ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::io::ErrorKind`
 --> crates/rrfd/src/lib.rs:9:5
  |
9 | use std::io::ErrorKind;
  |     ^^^^^^^^^^^^^^^^^^

warning: `brush-dataset` (lib) generated 8 warnings (run `cargo fix --lib -p brush-dataset` to apply 4 suggestions)
warning: `rrfd` (lib) generated 2 warnings (run `cargo fix --lib -p rrfd` to apply 2 suggestions)
   Compiling brush-app v0.2.0 (/Users/ryanhickman/code/brush/crates/brush-app)
warning: unused import: `std::fmt::Debug`
  --> crates/brush-app/src/app.rs:29:5
   |
29 | use std::fmt::Debug;
   |     ^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::hash::Hash`
  --> crates/brush-app/src/app.rs:30:5
   |
30 | use std::hash::Hash;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `std::io::Error`
  --> crates/brush-app/src/app.rs:31:5
   |
31 | use std::io::Error;
   |     ^^^^^^^^^^^^^^

warning: unused import: `std::io::ErrorKind`
  --> crates/brush-app/src/app.rs:32:5
   |
32 | use std::io::ErrorKind;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
  --> crates/brush-app/src/app.rs:33:5
   |
33 | use std::pin::Pin;
   |     ^^^^^^^^^^^^^

warning: unused import: `std::time::Duration`
  --> crates/brush-app/src/app.rs:35:5
   |
35 | use std::time::Duration;
   |     ^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Align2` and `RichText`
  --> crates/brush-app/src/app.rs:36:12
   |
36 | use egui::{Align2, RichText};
   |            ^^^^^^  ^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
  --> crates/brush-app/src/app.rs:37:5
   |
37 | use brush_dataset::splat_export;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ExportError` and `ExportFormat`
  --> crates/brush-app/src/app.rs:39:44
   |
39 | use crate::export_service::{ExportService, ExportError, ExportFormat};
   |                                            ^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `brush_dataset::storage`
  --> crates/brush-app/src/app.rs:40:5
   |
40 | use brush_dataset::storage;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
 --> crates/brush-app/src/panels/scene.rs:1:5
  |
1 | use brush_dataset::splat_export;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ControlMessage`
 --> crates/brush-app/src/panels/scene.rs:2:35
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                   ^^^^^^^^^^^^^^

warning: unused import: `tokio_with_wasm::alias as tokio_wasm`
  --> crates/brush-app/src/panels/scene.rs:17:5
   |
17 | use tokio_with_wasm::alias as tokio_wasm;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ProcessMessage`
 --> crates/brush-app/src/overlays/controls_detail.rs:2:51
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                                   ^^^^^^^^^^^^^^

warning: unused import: `std::sync::Once`
 --> crates/brush-app/src/utils.rs:2:5
  |
2 | use std::sync::Once;
  |     ^^^^^^^^^^^^^^^

error[E0616]: field `dataset_detail_overlay` of struct `app::App` is private
  --> crates/brush-app/src/utils.rs:82:17
   |
82 |         context.dataset_detail_overlay.set_copy_datasets_to_local(false); // Don't try to copy in web
   |                 ^^^^^^^^^^^^^^^^^^^^^^ private field

error[E0616]: field `dataset_detail_overlay` of struct `app::App` is private
  --> crates/brush-app/src/utils.rs:83:17
   |
83 |         context.dataset_detail_overlay.set_selected_file(test_file);
   |                 ^^^^^^^^^^^^^^^^^^^^^^ private field

warning: unused variable: `context_arc`
   --> crates/brush-app/src/app.rs:853:21
    |
853 |                 let context_arc = Arc::clone(&context);
    |                     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_context_arc`
    |
    = note: `#[warn(unused_variables)]` on by default

error[E0382]: borrow of moved value: `context`
   --> crates/brush-app/src/app.rs:853:46
    |
694 |         let context = Arc::new(RwLock::new(context));
    |             ------- move occurs because `context` has type `Arc<std::sync::RwLock<AppContext>>`, which does not implement the `Copy` trait
...
727 |         let tree_ctx = AppTree { zen, context };
    |                                       ------- value moved here
...
853 |                 let context_arc = Arc::clone(&context);
    |                                              ^^^^^^^^ value borrowed here after move
    |
help: clone the value to increment its reference count
    |
727 |         let tree_ctx = AppTree { zen, context: context.clone() };
    |                                              +++++++++++++++++

warning: unused variable: `dataset_detail_overlay`
    --> crates/brush-app/src/app.rs:1279:21
     |
1279 |                 let dataset_detail_overlay = self.dataset_detail_overlay.clone();
     |                     ^^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dataset_detail_overlay`

warning: unused variable: `view_aspect`
  --> crates/brush-app/src/panels/scene.rs:96:21
   |
96 |         if let Some(view_aspect) = context.view_aspect {
   |                     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_view_aspect`

Some errors have detailed explanations: E0382, E0616.
For more information about an error, try `rustc --explain E0382`.
warning: `brush-app` (lib) generated 18 warnings
error: could not compile `brush-app` (lib) due to 3 previous errors; 18 warnings emitted
2025-03-19T19:20:27.417258Z ERROR ❌ error
error from build pipeline

Caused by:
    0: HTML build pipeline failed (1 errors), showing first
    1: error from asset pipeline
    2: running cargo build
    3: error during cargo build execution
    4: cargo call to executable 'cargo' with args: '["build", "--target=wasm32-unknown-unknown", "--manifest-path", "/Users/ryanhickman/code/brush/crates/brush-app/Cargo.toml"]' returned a bad status: exit status: 101
2025-03-19T19:20:39.983665Z  INFO 📦 starting build
warning: unused import: `std::io::Error`
 --> crates/rrfd/src/lib.rs:8:5
  |
8 | use std::io::Error;
  |     ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::io::ErrorKind`
 --> crates/rrfd/src/lib.rs:9:5
  |
9 | use std::io::ErrorKind;
  |     ^^^^^^^^^^^^^^^^^^

warning: `rrfd` (lib) generated 2 warnings (run `cargo fix --lib -p rrfd` to apply 2 suggestions)
warning: unused import: `std::path::Path`
 --> crates/brush-dataset/src/storage/mod.rs:7:5
  |
7 | use std::path::Path;
  |     ^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `DatasetInfo` and `StorageType`
 --> crates/brush-dataset/src/storage/indexed_db.rs:6:29
  |
6 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |                             ^^^^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `Path`
 --> crates/brush-dataset/src/storage/filesystem.rs:4:17
  |
4 | use std::path::{Path, PathBuf};
  |                 ^^^^

warning: unused import: `DatasetStorage`
 --> crates/brush-dataset/src/storage/filesystem.rs:7:13
  |
7 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |             ^^^^^^^^^^^^^^

warning: constant `DB_NAME` is never used
 --> crates/brush-dataset/src/storage/indexed_db.rs:9:7
  |
9 | const DB_NAME: &str = "brush_dataset_storage";
  |       ^^^^^^^
  |
  = note: `#[warn(dead_code)]` on by default

warning: constant `METADATA_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:10:7
   |
10 | const METADATA_STORE: &str = "metadata";
   |       ^^^^^^^^^^^^^^

warning: constant `DATASET_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:11:7
   |
11 | const DATASET_STORE: &str = "datasets";
   |       ^^^^^^^^^^^^^

warning: method `get_total_storage_used` is never used
   --> crates/brush-dataset/src/storage/filesystem.rs:126:8
    |
15  | impl FilesystemStorage {
    | ---------------------- method in this implementation
...
126 |     fn get_total_storage_used(&self) -> Result<u64> {
    |        ^^^^^^^^^^^^^^^^^^^^^^

   Compiling brush-app v0.2.0 (/Users/ryanhickman/code/brush/crates/brush-app)
warning: `brush-dataset` (lib) generated 8 warnings (run `cargo fix --lib -p brush-dataset` to apply 4 suggestions)
warning: unused import: `std::fmt::Debug`
  --> crates/brush-app/src/app.rs:29:5
   |
29 | use std::fmt::Debug;
   |     ^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::hash::Hash`
  --> crates/brush-app/src/app.rs:30:5
   |
30 | use std::hash::Hash;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `std::io::Error`
  --> crates/brush-app/src/app.rs:31:5
   |
31 | use std::io::Error;
   |     ^^^^^^^^^^^^^^

warning: unused import: `std::io::ErrorKind`
  --> crates/brush-app/src/app.rs:32:5
   |
32 | use std::io::ErrorKind;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
  --> crates/brush-app/src/app.rs:33:5
   |
33 | use std::pin::Pin;
   |     ^^^^^^^^^^^^^

warning: unused import: `std::time::Duration`
  --> crates/brush-app/src/app.rs:35:5
   |
35 | use std::time::Duration;
   |     ^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Align2` and `RichText`
  --> crates/brush-app/src/app.rs:36:12
   |
36 | use egui::{Align2, RichText};
   |            ^^^^^^  ^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
  --> crates/brush-app/src/app.rs:37:5
   |
37 | use brush_dataset::splat_export;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ExportError` and `ExportFormat`
  --> crates/brush-app/src/app.rs:39:44
   |
39 | use crate::export_service::{ExportService, ExportError, ExportFormat};
   |                                            ^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `brush_dataset::storage`
  --> crates/brush-app/src/app.rs:40:5
   |
40 | use brush_dataset::storage;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
 --> crates/brush-app/src/panels/scene.rs:1:5
  |
1 | use brush_dataset::splat_export;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ControlMessage`
 --> crates/brush-app/src/panels/scene.rs:2:35
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                   ^^^^^^^^^^^^^^

warning: unused import: `tokio_with_wasm::alias as tokio_wasm`
  --> crates/brush-app/src/panels/scene.rs:17:5
   |
17 | use tokio_with_wasm::alias as tokio_wasm;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ProcessMessage`
 --> crates/brush-app/src/overlays/controls_detail.rs:2:51
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                                   ^^^^^^^^^^^^^^

warning: unused import: `std::sync::Once`
 --> crates/brush-app/src/utils.rs:2:5
  |
2 | use std::sync::Once;
  |     ^^^^^^^^^^^^^^^

error[E0609]: no field `dataset_detail_overlay` on type `&mut app::App`
    --> crates/brush-app/src/app.rs:1346:22
     |
1346 |                 self.dataset_detail_overlay.file_selection_started();
     |                      ^^^^^^^^^^^^^^^^^^^^^^ unknown field
     |
help: a field with a similar name exists
     |
1346 |                 self._dataset_detail_overlay.file_selection_started();
     |                      ~~~~~~~~~~~~~~~~~~~~~~~

error[E0609]: no field `dataset_detail_overlay` on type `&mut app::App`
    --> crates/brush-app/src/app.rs:1357:14
     |
1357 |         self.dataset_detail_overlay.show(ctx, &mut context);
     |              ^^^^^^^^^^^^^^^^^^^^^^ unknown field
     |
help: a field with a similar name exists
     |
1357 |         self._dataset_detail_overlay.show(ctx, &mut context);
     |              ~~~~~~~~~~~~~~~~~~~~~~~

error[E0609]: no field `dataset_detail_overlay` on type `&mut app::App`
  --> crates/brush-app/src/utils.rs:82:17
   |
82 |         context.dataset_detail_overlay.set_copy_datasets_to_local(false); // Don't try to copy in web
   |                 ^^^^^^^^^^^^^^^^^^^^^^ unknown field

error[E0609]: no field `dataset_detail_overlay` on type `&mut app::App`
  --> crates/brush-app/src/utils.rs:83:17
   |
83 |         context.dataset_detail_overlay.set_selected_file(test_file);
   |                 ^^^^^^^^^^^^^^^^^^^^^^ unknown field

warning: unused variable: `context_arc`
   --> crates/brush-app/src/app.rs:853:21
    |
853 |                 let context_arc = Arc::clone(&context);
    |                     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_context_arc`
    |
    = note: `#[warn(unused_variables)]` on by default

error[E0382]: borrow of moved value: `context`
   --> crates/brush-app/src/app.rs:853:46
    |
694 |         let context = Arc::new(RwLock::new(context));
    |             ------- move occurs because `context` has type `Arc<std::sync::RwLock<AppContext>>`, which does not implement the `Copy` trait
...
727 |         let tree_ctx = AppTree { zen, context };
    |                                       ------- value moved here
...
853 |                 let context_arc = Arc::clone(&context);
    |                                              ^^^^^^^^ value borrowed here after move
    |
help: clone the value to increment its reference count
    |
727 |         let tree_ctx = AppTree { zen, context: context.clone() };
    |                                              +++++++++++++++++

warning: unused variable: `view_aspect`
  --> crates/brush-app/src/panels/scene.rs:96:21
   |
96 |         if let Some(view_aspect) = context.view_aspect {
   |                     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_view_aspect`

Some errors have detailed explanations: E0382, E0609.
For more information about an error, try `rustc --explain E0382`.
warning: `brush-app` (lib) generated 17 warnings
error: could not compile `brush-app` (lib) due to 5 previous errors; 17 warnings emitted
2025-03-19T19:20:41.310600Z ERROR ❌ error
error from build pipeline

Caused by:
    0: HTML build pipeline failed (1 errors), showing first
    1: error from asset pipeline
    2: running cargo build
    3: error during cargo build execution
    4: cargo call to executable 'cargo' with args: '["build", "--target=wasm32-unknown-unknown", "--manifest-path", "/Users/ryanhickman/code/brush/crates/brush-app/Cargo.toml"]' returned a bad status: exit status: 101
2025-03-19T19:20:41.310656Z  INFO 📦 starting build
warning: unused import: `std::io::Error`
 --> crates/rrfd/src/lib.rs:8:5
  |
8 | use std::io::Error;
  |     ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::io::ErrorKind`
 --> crates/rrfd/src/lib.rs:9:5
  |
9 | use std::io::ErrorKind;
  |     ^^^^^^^^^^^^^^^^^^

warning: `rrfd` (lib) generated 2 warnings (run `cargo fix --lib -p rrfd` to apply 2 suggestions)
warning: unused import: `std::path::Path`
 --> crates/brush-dataset/src/storage/mod.rs:7:5
  |
7 | use std::path::Path;
  |     ^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `DatasetInfo` and `StorageType`
 --> crates/brush-dataset/src/storage/indexed_db.rs:6:29
  |
6 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |                             ^^^^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `Path`
 --> crates/brush-dataset/src/storage/filesystem.rs:4:17
  |
4 | use std::path::{Path, PathBuf};
  |                 ^^^^

warning: unused import: `DatasetStorage`
 --> crates/brush-dataset/src/storage/filesystem.rs:7:13
  |
7 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |             ^^^^^^^^^^^^^^

warning: constant `DB_NAME` is never used
 --> crates/brush-dataset/src/storage/indexed_db.rs:9:7
  |
9 | const DB_NAME: &str = "brush_dataset_storage";
  |       ^^^^^^^
  |
  = note: `#[warn(dead_code)]` on by default

warning: constant `METADATA_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:10:7
   |
10 | const METADATA_STORE: &str = "metadata";
   |       ^^^^^^^^^^^^^^

warning: constant `DATASET_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:11:7
   |
11 | const DATASET_STORE: &str = "datasets";
   |       ^^^^^^^^^^^^^

warning: method `get_total_storage_used` is never used
   --> crates/brush-dataset/src/storage/filesystem.rs:126:8
    |
15  | impl FilesystemStorage {
    | ---------------------- method in this implementation
...
126 |     fn get_total_storage_used(&self) -> Result<u64> {
    |        ^^^^^^^^^^^^^^^^^^^^^^

warning: `brush-dataset` (lib) generated 8 warnings (run `cargo fix --lib -p brush-dataset` to apply 4 suggestions)
   Compiling brush-app v0.2.0 (/Users/ryanhickman/code/brush/crates/brush-app)
warning: unused import: `std::fmt::Debug`
  --> crates/brush-app/src/app.rs:29:5
   |
29 | use std::fmt::Debug;
   |     ^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::hash::Hash`
  --> crates/brush-app/src/app.rs:30:5
   |
30 | use std::hash::Hash;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `std::io::Error`
  --> crates/brush-app/src/app.rs:31:5
   |
31 | use std::io::Error;
   |     ^^^^^^^^^^^^^^

warning: unused import: `std::io::ErrorKind`
  --> crates/brush-app/src/app.rs:32:5
   |
32 | use std::io::ErrorKind;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
  --> crates/brush-app/src/app.rs:33:5
   |
33 | use std::pin::Pin;
   |     ^^^^^^^^^^^^^

warning: unused import: `std::time::Duration`
  --> crates/brush-app/src/app.rs:35:5
   |
35 | use std::time::Duration;
   |     ^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Align2` and `RichText`
  --> crates/brush-app/src/app.rs:36:12
   |
36 | use egui::{Align2, RichText};
   |            ^^^^^^  ^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
  --> crates/brush-app/src/app.rs:37:5
   |
37 | use brush_dataset::splat_export;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ExportError` and `ExportFormat`
  --> crates/brush-app/src/app.rs:39:44
   |
39 | use crate::export_service::{ExportService, ExportError, ExportFormat};
   |                                            ^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `brush_dataset::storage`
  --> crates/brush-app/src/app.rs:40:5
   |
40 | use brush_dataset::storage;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
 --> crates/brush-app/src/panels/scene.rs:1:5
  |
1 | use brush_dataset::splat_export;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ControlMessage`
 --> crates/brush-app/src/panels/scene.rs:2:35
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                   ^^^^^^^^^^^^^^

warning: unused import: `tokio_with_wasm::alias as tokio_wasm`
  --> crates/brush-app/src/panels/scene.rs:17:5
   |
17 | use tokio_with_wasm::alias as tokio_wasm;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ProcessMessage`
 --> crates/brush-app/src/overlays/controls_detail.rs:2:51
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                                   ^^^^^^^^^^^^^^

warning: unused import: `std::sync::Once`
 --> crates/brush-app/src/utils.rs:2:5
  |
2 | use std::sync::Once;
  |     ^^^^^^^^^^^^^^^

error[E0609]: no field `dataset_detail_overlay` on type `&mut app::App`
    --> crates/brush-app/src/app.rs:1346:22
     |
1346 |                 self.dataset_detail_overlay.file_selection_started();
     |                      ^^^^^^^^^^^^^^^^^^^^^^ unknown field
     |
help: a field with a similar name exists
     |
1346 |                 self._dataset_detail_overlay.file_selection_started();
     |                      ~~~~~~~~~~~~~~~~~~~~~~~

error[E0609]: no field `dataset_detail_overlay` on type `&mut app::App`
    --> crates/brush-app/src/app.rs:1357:14
     |
1357 |         self.dataset_detail_overlay.show(ctx, &mut context);
     |              ^^^^^^^^^^^^^^^^^^^^^^ unknown field
     |
help: a field with a similar name exists
     |
1357 |         self._dataset_detail_overlay.show(ctx, &mut context);
     |              ~~~~~~~~~~~~~~~~~~~~~~~

error[E0609]: no field `dataset_detail_overlay` on type `&mut app::App`
  --> crates/brush-app/src/utils.rs:82:17
   |
82 |         context.dataset_detail_overlay.set_copy_datasets_to_local(false); // Don't try to copy in web
   |                 ^^^^^^^^^^^^^^^^^^^^^^ unknown field

error[E0609]: no field `dataset_detail_overlay` on type `&mut app::App`
  --> crates/brush-app/src/utils.rs:83:17
   |
83 |         context.dataset_detail_overlay.set_selected_file(test_file);
   |                 ^^^^^^^^^^^^^^^^^^^^^^ unknown field

warning: unused variable: `context_arc`
   --> crates/brush-app/src/app.rs:853:21
    |
853 |                 let context_arc = Arc::clone(&context);
    |                     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_context_arc`
    |
    = note: `#[warn(unused_variables)]` on by default

error[E0382]: borrow of moved value: `context`
   --> crates/brush-app/src/app.rs:853:46
    |
694 |         let context = Arc::new(RwLock::new(context));
    |             ------- move occurs because `context` has type `Arc<std::sync::RwLock<AppContext>>`, which does not implement the `Copy` trait
...
727 |         let tree_ctx = AppTree { zen, context };
    |                                       ------- value moved here
...
853 |                 let context_arc = Arc::clone(&context);
    |                                              ^^^^^^^^ value borrowed here after move
    |
help: clone the value to increment its reference count
    |
727 |         let tree_ctx = AppTree { zen, context: context.clone() };
    |                                              +++++++++++++++++

warning: unused variable: `view_aspect`
  --> crates/brush-app/src/panels/scene.rs:96:21
   |
96 |         if let Some(view_aspect) = context.view_aspect {
   |                     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_view_aspect`

Some errors have detailed explanations: E0382, E0609.
For more information about an error, try `rustc --explain E0382`.
warning: `brush-app` (lib) generated 17 warnings
error: could not compile `brush-app` (lib) due to 5 previous errors; 17 warnings emitted
2025-03-19T19:20:42.489120Z ERROR ❌ error
error from build pipeline

Caused by:
    0: HTML build pipeline failed (1 errors), showing first
    1: error from asset pipeline
    2: running cargo build
    3: error during cargo build execution
    4: cargo call to executable 'cargo' with args: '["build", "--target=wasm32-unknown-unknown", "--manifest-path", "/Users/ryanhickman/code/brush/crates/brush-app/Cargo.toml"]' returned a bad status: exit status: 101
2025-03-19T19:20:50.245346Z  INFO 📦 starting build
warning: unused import: `std::io::Error`
 --> crates/rrfd/src/lib.rs:8:5
  |
8 | use std::io::Error;
  |     ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::io::ErrorKind`
 --> crates/rrfd/src/lib.rs:9:5
  |
9 | use std::io::ErrorKind;
  |     ^^^^^^^^^^^^^^^^^^

warning: `rrfd` (lib) generated 2 warnings (run `cargo fix --lib -p rrfd` to apply 2 suggestions)
warning: unused import: `std::path::Path`
 --> crates/brush-dataset/src/storage/mod.rs:7:5
  |
7 | use std::path::Path;
  |     ^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `DatasetInfo` and `StorageType`
 --> crates/brush-dataset/src/storage/indexed_db.rs:6:29
  |
6 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |                             ^^^^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `Path`
 --> crates/brush-dataset/src/storage/filesystem.rs:4:17
  |
4 | use std::path::{Path, PathBuf};
  |                 ^^^^

warning: unused import: `DatasetStorage`
 --> crates/brush-dataset/src/storage/filesystem.rs:7:13
  |
7 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |             ^^^^^^^^^^^^^^

warning: constant `DB_NAME` is never used
 --> crates/brush-dataset/src/storage/indexed_db.rs:9:7
  |
9 | const DB_NAME: &str = "brush_dataset_storage";
  |       ^^^^^^^
  |
  = note: `#[warn(dead_code)]` on by default

warning: constant `METADATA_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:10:7
   |
10 | const METADATA_STORE: &str = "metadata";
   |       ^^^^^^^^^^^^^^

warning: constant `DATASET_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:11:7
   |
11 | const DATASET_STORE: &str = "datasets";
   |       ^^^^^^^^^^^^^

warning: method `get_total_storage_used` is never used
   --> crates/brush-dataset/src/storage/filesystem.rs:126:8
    |
15  | impl FilesystemStorage {
    | ---------------------- method in this implementation
...
126 |     fn get_total_storage_used(&self) -> Result<u64> {
    |        ^^^^^^^^^^^^^^^^^^^^^^

   Compiling brush-app v0.2.0 (/Users/ryanhickman/code/brush/crates/brush-app)
warning: `brush-dataset` (lib) generated 8 warnings (run `cargo fix --lib -p brush-dataset` to apply 4 suggestions)
warning: unused import: `std::fmt::Debug`
  --> crates/brush-app/src/app.rs:29:5
   |
29 | use std::fmt::Debug;
   |     ^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::hash::Hash`
  --> crates/brush-app/src/app.rs:30:5
   |
30 | use std::hash::Hash;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `std::io::Error`
  --> crates/brush-app/src/app.rs:31:5
   |
31 | use std::io::Error;
   |     ^^^^^^^^^^^^^^

warning: unused import: `std::io::ErrorKind`
  --> crates/brush-app/src/app.rs:32:5
   |
32 | use std::io::ErrorKind;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
  --> crates/brush-app/src/app.rs:33:5
   |
33 | use std::pin::Pin;
   |     ^^^^^^^^^^^^^

warning: unused import: `std::time::Duration`
  --> crates/brush-app/src/app.rs:35:5
   |
35 | use std::time::Duration;
   |     ^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Align2` and `RichText`
  --> crates/brush-app/src/app.rs:36:12
   |
36 | use egui::{Align2, RichText};
   |            ^^^^^^  ^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
  --> crates/brush-app/src/app.rs:37:5
   |
37 | use brush_dataset::splat_export;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ExportError` and `ExportFormat`
  --> crates/brush-app/src/app.rs:39:44
   |
39 | use crate::export_service::{ExportService, ExportError, ExportFormat};
   |                                            ^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `brush_dataset::storage`
  --> crates/brush-app/src/app.rs:40:5
   |
40 | use brush_dataset::storage;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
 --> crates/brush-app/src/panels/scene.rs:1:5
  |
1 | use brush_dataset::splat_export;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ControlMessage`
 --> crates/brush-app/src/panels/scene.rs:2:35
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                   ^^^^^^^^^^^^^^

warning: unused import: `tokio_with_wasm::alias as tokio_wasm`
  --> crates/brush-app/src/panels/scene.rs:17:5
   |
17 | use tokio_with_wasm::alias as tokio_wasm;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ProcessMessage`
 --> crates/brush-app/src/overlays/controls_detail.rs:2:51
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                                   ^^^^^^^^^^^^^^

warning: unused import: `std::sync::Once`
 --> crates/brush-app/src/utils.rs:2:5
  |
2 | use std::sync::Once;
  |     ^^^^^^^^^^^^^^^

error[E0609]: no field `dataset_detail_overlay` on type `&mut app::App`
    --> crates/brush-app/src/app.rs:1346:22
     |
1346 |                 self.dataset_detail_overlay.file_selection_started();
     |                      ^^^^^^^^^^^^^^^^^^^^^^ unknown field
     |
help: a field with a similar name exists
     |
1346 |                 self._dataset_detail_overlay.file_selection_started();
     |                      ~~~~~~~~~~~~~~~~~~~~~~~

error[E0609]: no field `dataset_detail_overlay` on type `&mut app::App`
    --> crates/brush-app/src/app.rs:1357:14
     |
1357 |         self.dataset_detail_overlay.show(ctx, &mut context);
     |              ^^^^^^^^^^^^^^^^^^^^^^ unknown field
     |
help: a field with a similar name exists
     |
1357 |         self._dataset_detail_overlay.show(ctx, &mut context);
     |              ~~~~~~~~~~~~~~~~~~~~~~~

error[E0609]: no field `dataset_detail_overlay` on type `&mut app::App`
  --> crates/brush-app/src/utils.rs:82:17
   |
82 |         context.dataset_detail_overlay.set_copy_datasets_to_local(false); // Don't try to copy in web
   |                 ^^^^^^^^^^^^^^^^^^^^^^ unknown field

error[E0609]: no field `dataset_detail_overlay` on type `&mut app::App`
  --> crates/brush-app/src/utils.rs:83:17
   |
83 |         context.dataset_detail_overlay.set_selected_file(test_file);
   |                 ^^^^^^^^^^^^^^^^^^^^^^ unknown field

warning: unused variable: `context_arc`
   --> crates/brush-app/src/app.rs:853:21
    |
853 |                 let context_arc = Arc::clone(&context);
    |                     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_context_arc`
    |
    = note: `#[warn(unused_variables)]` on by default

error[E0382]: borrow of moved value: `context`
   --> crates/brush-app/src/app.rs:853:46
    |
694 |         let context = Arc::new(RwLock::new(context));
    |             ------- move occurs because `context` has type `Arc<std::sync::RwLock<AppContext>>`, which does not implement the `Copy` trait
...
727 |         let tree_ctx = AppTree { zen, context };
    |                                       ------- value moved here
...
853 |                 let context_arc = Arc::clone(&context);
    |                                              ^^^^^^^^ value borrowed here after move
    |
help: clone the value to increment its reference count
    |
727 |         let tree_ctx = AppTree { zen, context: context.clone() };
    |                                              +++++++++++++++++

warning: unused variable: `view_aspect`
  --> crates/brush-app/src/panels/scene.rs:96:21
   |
96 |         if let Some(view_aspect) = context.view_aspect {
   |                     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_view_aspect`

Some errors have detailed explanations: E0382, E0609.
For more information about an error, try `rustc --explain E0382`.
warning: `brush-app` (lib) generated 17 warnings
error: could not compile `brush-app` (lib) due to 5 previous errors; 17 warnings emitted
2025-03-19T19:20:51.608104Z ERROR ❌ error
error from build pipeline

Caused by:
    0: HTML build pipeline failed (1 errors), showing first
    1: error from asset pipeline
    2: running cargo build
    3: error during cargo build execution
    4: cargo call to executable 'cargo' with args: '["build", "--target=wasm32-unknown-unknown", "--manifest-path", "/Users/ryanhickman/code/brush/crates/brush-app/Cargo.toml"]' returned a bad status: exit status: 101
2025-03-19T19:20:56.388877Z  INFO 📦 starting build
warning: unused import: `std::io::Error`
 --> crates/rrfd/src/lib.rs:8:5
  |
8 | use std::io::Error;
  |     ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::io::ErrorKind`
 --> crates/rrfd/src/lib.rs:9:5
  |
9 | use std::io::ErrorKind;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::path::Path`
 --> crates/brush-dataset/src/storage/mod.rs:7:5
  |
7 | use std::path::Path;
  |     ^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `DatasetInfo` and `StorageType`
 --> crates/brush-dataset/src/storage/indexed_db.rs:6:29
  |
6 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |                             ^^^^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `Path`
 --> crates/brush-dataset/src/storage/filesystem.rs:4:17
  |
4 | use std::path::{Path, PathBuf};
  |                 ^^^^

warning: unused import: `DatasetStorage`
 --> crates/brush-dataset/src/storage/filesystem.rs:7:13
  |
7 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |             ^^^^^^^^^^^^^^

warning: constant `DB_NAME` is never used
 --> crates/brush-dataset/src/storage/indexed_db.rs:9:7
  |
9 | const DB_NAME: &str = "brush_dataset_storage";
  |       ^^^^^^^
  |
  = note: `#[warn(dead_code)]` on by default

warning: constant `METADATA_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:10:7
   |
10 | const METADATA_STORE: &str = "metadata";
   |       ^^^^^^^^^^^^^^

warning: constant `DATASET_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:11:7
   |
11 | const DATASET_STORE: &str = "datasets";
   |       ^^^^^^^^^^^^^

warning: method `get_total_storage_used` is never used
   --> crates/brush-dataset/src/storage/filesystem.rs:126:8
    |
15  | impl FilesystemStorage {
    | ---------------------- method in this implementation
...
126 |     fn get_total_storage_used(&self) -> Result<u64> {
    |        ^^^^^^^^^^^^^^^^^^^^^^

warning: `rrfd` (lib) generated 2 warnings (run `cargo fix --lib -p rrfd` to apply 2 suggestions)
warning: `brush-dataset` (lib) generated 8 warnings (run `cargo fix --lib -p brush-dataset` to apply 4 suggestions)
   Compiling brush-app v0.2.0 (/Users/ryanhickman/code/brush/crates/brush-app)
warning: unused import: `std::fmt::Debug`
  --> crates/brush-app/src/app.rs:29:5
   |
29 | use std::fmt::Debug;
   |     ^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::hash::Hash`
  --> crates/brush-app/src/app.rs:30:5
   |
30 | use std::hash::Hash;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `std::io::Error`
  --> crates/brush-app/src/app.rs:31:5
   |
31 | use std::io::Error;
   |     ^^^^^^^^^^^^^^

warning: unused import: `std::io::ErrorKind`
  --> crates/brush-app/src/app.rs:32:5
   |
32 | use std::io::ErrorKind;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
  --> crates/brush-app/src/app.rs:33:5
   |
33 | use std::pin::Pin;
   |     ^^^^^^^^^^^^^

warning: unused import: `std::time::Duration`
  --> crates/brush-app/src/app.rs:35:5
   |
35 | use std::time::Duration;
   |     ^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Align2` and `RichText`
  --> crates/brush-app/src/app.rs:36:12
   |
36 | use egui::{Align2, RichText};
   |            ^^^^^^  ^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
  --> crates/brush-app/src/app.rs:37:5
   |
37 | use brush_dataset::splat_export;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ExportError` and `ExportFormat`
  --> crates/brush-app/src/app.rs:39:44
   |
39 | use crate::export_service::{ExportService, ExportError, ExportFormat};
   |                                            ^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `brush_dataset::storage`
  --> crates/brush-app/src/app.rs:40:5
   |
40 | use brush_dataset::storage;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
 --> crates/brush-app/src/panels/scene.rs:1:5
  |
1 | use brush_dataset::splat_export;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ControlMessage`
 --> crates/brush-app/src/panels/scene.rs:2:35
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                   ^^^^^^^^^^^^^^

warning: unused import: `tokio_with_wasm::alias as tokio_wasm`
  --> crates/brush-app/src/panels/scene.rs:17:5
   |
17 | use tokio_with_wasm::alias as tokio_wasm;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ProcessMessage`
 --> crates/brush-app/src/overlays/controls_detail.rs:2:51
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                                   ^^^^^^^^^^^^^^

warning: unused import: `std::sync::Once`
 --> crates/brush-app/src/utils.rs:2:5
  |
2 | use std::sync::Once;
  |     ^^^^^^^^^^^^^^^

error[E0609]: no field `dataset_detail_overlay` on type `&mut app::App`
  --> crates/brush-app/src/utils.rs:82:17
   |
82 |         context.dataset_detail_overlay.set_copy_datasets_to_local(false); // Don't try to copy in web
   |                 ^^^^^^^^^^^^^^^^^^^^^^ unknown field

error[E0609]: no field `dataset_detail_overlay` on type `&mut app::App`
  --> crates/brush-app/src/utils.rs:83:17
   |
83 |         context.dataset_detail_overlay.set_selected_file(test_file);
   |                 ^^^^^^^^^^^^^^^^^^^^^^ unknown field

warning: unused variable: `context_arc`
   --> crates/brush-app/src/app.rs:853:21
    |
853 |                 let context_arc = Arc::clone(&context);
    |                     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_context_arc`
    |
    = note: `#[warn(unused_variables)]` on by default

error[E0382]: borrow of moved value: `context`
   --> crates/brush-app/src/app.rs:853:46
    |
694 |         let context = Arc::new(RwLock::new(context));
    |             ------- move occurs because `context` has type `Arc<std::sync::RwLock<AppContext>>`, which does not implement the `Copy` trait
...
727 |         let tree_ctx = AppTree { zen, context };
    |                                       ------- value moved here
...
853 |                 let context_arc = Arc::clone(&context);
    |                                              ^^^^^^^^ value borrowed here after move
    |
help: clone the value to increment its reference count
    |
727 |         let tree_ctx = AppTree { zen, context: context.clone() };
    |                                              +++++++++++++++++

warning: unused variable: `view_aspect`
  --> crates/brush-app/src/panels/scene.rs:96:21
   |
96 |         if let Some(view_aspect) = context.view_aspect {
   |                     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_view_aspect`

Some errors have detailed explanations: E0382, E0609.
For more information about an error, try `rustc --explain E0382`.
warning: `brush-app` (lib) generated 17 warnings
error: could not compile `brush-app` (lib) due to 3 previous errors; 17 warnings emitted
2025-03-19T19:20:57.754545Z ERROR ❌ error
error from build pipeline

Caused by:
    0: HTML build pipeline failed (1 errors), showing first
    1: error from asset pipeline
    2: running cargo build
    3: error during cargo build execution
    4: cargo call to executable 'cargo' with args: '["build", "--target=wasm32-unknown-unknown", "--manifest-path", "/Users/ryanhickman/code/brush/crates/brush-app/Cargo.toml"]' returned a bad status: exit status: 101
2025-03-19T19:21:05.045881Z  INFO 📦 starting build
warning: unused import: `std::io::Error`
 --> crates/rrfd/src/lib.rs:8:5
  |
8 | use std::io::Error;
  |     ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::io::ErrorKind`
 --> crates/rrfd/src/lib.rs:9:5
  |
9 | use std::io::ErrorKind;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::path::Path`
 --> crates/brush-dataset/src/storage/mod.rs:7:5
  |
7 | use std::path::Path;
  |     ^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `DatasetInfo` and `StorageType`
 --> crates/brush-dataset/src/storage/indexed_db.rs:6:29
  |
6 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |                             ^^^^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `Path`
 --> crates/brush-dataset/src/storage/filesystem.rs:4:17
  |
4 | use std::path::{Path, PathBuf};
  |                 ^^^^

warning: unused import: `DatasetStorage`
 --> crates/brush-dataset/src/storage/filesystem.rs:7:13
  |
7 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |             ^^^^^^^^^^^^^^

warning: constant `DB_NAME` is never used
 --> crates/brush-dataset/src/storage/indexed_db.rs:9:7
  |
9 | const DB_NAME: &str = "brush_dataset_storage";
  |       ^^^^^^^
  |
  = note: `#[warn(dead_code)]` on by default

warning: constant `METADATA_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:10:7
   |
10 | const METADATA_STORE: &str = "metadata";
   |       ^^^^^^^^^^^^^^

warning: constant `DATASET_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:11:7
   |
11 | const DATASET_STORE: &str = "datasets";
   |       ^^^^^^^^^^^^^

warning: method `get_total_storage_used` is never used
   --> crates/brush-dataset/src/storage/filesystem.rs:126:8
    |
15  | impl FilesystemStorage {
    | ---------------------- method in this implementation
...
126 |     fn get_total_storage_used(&self) -> Result<u64> {
    |        ^^^^^^^^^^^^^^^^^^^^^^

warning: `rrfd` (lib) generated 2 warnings (run `cargo fix --lib -p rrfd` to apply 2 suggestions)
warning: `brush-dataset` (lib) generated 8 warnings (run `cargo fix --lib -p brush-dataset` to apply 4 suggestions)
   Compiling brush-app v0.2.0 (/Users/ryanhickman/code/brush/crates/brush-app)
warning: unused import: `std::fmt::Debug`
  --> crates/brush-app/src/app.rs:26:5
   |
26 | use std::fmt::Debug;
   |     ^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::hash::Hash`
  --> crates/brush-app/src/app.rs:27:5
   |
27 | use std::hash::Hash;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `std::io::Error`
  --> crates/brush-app/src/app.rs:28:5
   |
28 | use std::io::Error;
   |     ^^^^^^^^^^^^^^

warning: unused import: `std::io::ErrorKind`
  --> crates/brush-app/src/app.rs:29:5
   |
29 | use std::io::ErrorKind;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
  --> crates/brush-app/src/app.rs:30:5
   |
30 | use std::pin::Pin;
   |     ^^^^^^^^^^^^^

warning: unused import: `std::time::Duration`
  --> crates/brush-app/src/app.rs:32:5
   |
32 | use std::time::Duration;
   |     ^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Align2` and `RichText`
  --> crates/brush-app/src/app.rs:33:12
   |
33 | use egui::{Align2, RichText};
   |            ^^^^^^  ^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
  --> crates/brush-app/src/app.rs:34:5
   |
34 | use brush_dataset::splat_export;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ExportError` and `ExportFormat`
  --> crates/brush-app/src/app.rs:36:44
   |
36 | use crate::export_service::{ExportService, ExportError, ExportFormat};
   |                                            ^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `brush_dataset::storage`
  --> crates/brush-app/src/app.rs:37:5
   |
37 | use brush_dataset::storage;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
 --> crates/brush-app/src/panels/scene.rs:1:5
  |
1 | use brush_dataset::splat_export;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ControlMessage`
 --> crates/brush-app/src/panels/scene.rs:2:35
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                   ^^^^^^^^^^^^^^

warning: unused import: `tokio_with_wasm::alias as tokio_wasm`
  --> crates/brush-app/src/panels/scene.rs:17:5
   |
17 | use tokio_with_wasm::alias as tokio_wasm;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ProcessMessage`
 --> crates/brush-app/src/overlays/controls_detail.rs:2:51
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                                   ^^^^^^^^^^^^^^

warning: unused import: `std::sync::Once`
 --> crates/brush-app/src/utils.rs:2:5
  |
2 | use std::sync::Once;
  |     ^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> crates/brush-app/src/app.rs:813:63
    |
813 |         let debug_mode = search_params.get("debug").unwrap_or("false");
    |                                                     --------- ^^^^^^^ expected `&String`, found `&str`
    |                                                     |
    |                                                     arguments to this method are incorrect
    |
    = note: expected reference `&std::string::String`
               found reference `&'static str`
help: the return type of this call is `&'static str` due to the type of the argument passed
   --> crates/brush-app/src/app.rs:813:26
    |
813 |         let debug_mode = search_params.get("debug").unwrap_or("false");
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------^
    |                                                               |
    |                                                               this argument influences the return type of `unwrap_or`
note: method defined here
   --> /rustc/4d91de4e48198da2e33413efdcd9cd2cc0c46688/library/core/src/option.rs:998:12
help: use `Option::map_or` to deref inner value of `Option`
    |
813 |         let debug_mode = search_params.get("debug").map_or("false", |v| v);
    |                                                     ~~~~~~        +++++++

error[E0308]: mismatched types
   --> crates/brush-app/src/app.rs:814:66
    |
814 |         let auto_test = search_params.get("auto_test").unwrap_or("false");
    |                                                        --------- ^^^^^^^ expected `&String`, found `&str`
    |                                                        |
    |                                                        arguments to this method are incorrect
    |
    = note: expected reference `&std::string::String`
               found reference `&'static str`
help: the return type of this call is `&'static str` due to the type of the argument passed
   --> crates/brush-app/src/app.rs:814:25
    |
814 |         let auto_test = search_params.get("auto_test").unwrap_or("false");
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------^
    |                                                                  |
    |                                                                  this argument influences the return type of `unwrap_or`
note: method defined here
   --> /rustc/4d91de4e48198da2e33413efdcd9cd2cc0c46688/library/core/src/option.rs:998:12
help: use `Option::map_or` to deref inner value of `Option`
    |
814 |         let auto_test = search_params.get("auto_test").map_or("false", |v| v);
    |                                                        ~~~~~~        +++++++

error[E0277]: the trait bound `str: std::convert::From<std::string::String>` is not satisfied
   --> crates/brush-app/src/app.rs:839:30
    |
839 |   ...                   &format!("
    |  ________________________^
840 | | ...                       console.log('🧪 Scheduling test PLY file load');
841 | | ...                       setTimeout(() => {{
842 | | ...                           console.log('🧪 Executing automated test: Loading PLY file');
...   |
846 | | ...                       }}, 1500);
847 | | ...                   ").into()
    | |                        ^ ---- required by a bound introduced by this call
    | |________________________|
    |                          the trait `std::convert::From<std::string::String>` is not implemented for `str`
    |
    = help: the following other types implement trait `std::convert::From<T>`:
              `&str` implements `std::convert::From<&icu_locid::extensions::other::subtag::Subtag>`
              `&str` implements `std::convert::From<&icu_locid::extensions::private::other::Subtag>`
              `&str` implements `std::convert::From<&icu_locid::extensions::transform::key::Key>`
              `&str` implements `std::convert::From<&icu_locid::extensions::unicode::attribute::Attribute>`
              `&str` implements `std::convert::From<&icu_locid::extensions::unicode::key::Key>`
              `&str` implements `std::convert::From<&icu_locid::subtags::language::Language>`
              `&str` implements `std::convert::From<&icu_locid::subtags::region::Region>`
              `&str` implements `std::convert::From<&icu_locid::subtags::script::Script>`
            and 2 others
    = note: required for `std::string::String` to implement `Into<str>`

error[E0599]: no method named `ok` found for enum `std::option::Option` in the current scope
   --> crates/brush-app/src/app.rs:850:22
    |
836 | /                 web_sys::window()
837 | |                     .and_then(|w| w.request_animation_frame(
838 | |                         &js_sys::Function::new_with_args("", 
839 | |                             &format!("
...   |
849 | |                     ).ok())
850 | |                     .ok();
    | |_____________________-^^
    |
help: there is a method `or` with a similar name, but with different arguments
   --> /rustc/4d91de4e48198da2e33413efdcd9cd2cc0c46688/library/core/src/option.rs:1524:5

error[E0599]: no method named `unchecked_ref` found for reference `&JsValue` in the current scope
   --> crates/brush-app/src/app.rs:866:50
    |
866 | ...                   closure.as_ref().unchecked_ref(),
    |                                        ^^^^^^^^^^^^^
    |
    = help: items from traits can only be used if the trait is in scope
help: trait `JsCast` which provides `unchecked_ref` is implemented but not in scope; perhaps you want to import it
    |
1   + use wasm_bindgen::JsCast;
    |
help: there is a method `unchecked_into` with a similar name
    |
866 |                                 closure.as_ref().unchecked_into(),
    |                                                  ~~~~~~~~~~~~~~

error[E0599]: no method named `ok` found for enum `std::option::Option` in the current scope
   --> crates/brush-app/src/app.rs:871:22
    |
861 | /                 web_sys::window()
862 | |                     .and_then(|window| {
863 | |                         window
864 | |                             .add_event_listener_with_callback(
...   |
870 | |                     })
871 | |                     .ok();
    | |_____________________-^^
    |
help: there is a method `or` with a similar name, but with different arguments
   --> /rustc/4d91de4e48198da2e33413efdcd9cd2cc0c46688/library/core/src/option.rs:1524:5

error[E0599]: no method named `get_dataset_detail_overlay_mut` found for mutable reference `&mut AppContext` in the current scope
  --> crates/brush-app/src/utils.rs:80:44
   |
80 |     if let Some(dataset_overlay) = context.get_dataset_detail_overlay_mut() {
   |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `&mut AppContext`

warning: unused variable: `dataset_detail_overlay`
    --> crates/brush-app/src/app.rs:1277:21
     |
1277 |                 let dataset_detail_overlay = self.dataset_detail_overlay.clone();
     |                     ^^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dataset_detail_overlay`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `js_window`
    --> crates/brush-app/src/app.rs:1309:37
     |
1309 | ...                   let js_window = web_sys::window().unwrap();
     |                           ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_js_window`

warning: unused variable: `view_aspect`
  --> crates/brush-app/src/panels/scene.rs:96:21
   |
96 |         if let Some(view_aspect) = context.view_aspect {
   |                     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_view_aspect`

Some errors have detailed explanations: E0277, E0308, E0599.
For more information about an error, try `rustc --explain E0277`.
warning: `brush-app` (lib) generated 18 warnings
error: could not compile `brush-app` (lib) due to 7 previous errors; 18 warnings emitted
2025-03-19T19:21:06.562649Z ERROR ❌ error
error from build pipeline

Caused by:
    0: HTML build pipeline failed (1 errors), showing first
    1: error from asset pipeline
    2: running cargo build
    3: error during cargo build execution
    4: cargo call to executable 'cargo' with args: '["build", "--target=wasm32-unknown-unknown", "--manifest-path", "/Users/ryanhickman/code/brush/crates/brush-app/Cargo.toml"]' returned a bad status: exit status: 101
2025-03-19T19:21:06.562711Z  INFO 📦 starting build
warning: unused import: `std::io::Error`
 --> crates/rrfd/src/lib.rs:8:5
  |
8 | use std::io::Error;
  |     ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::io::ErrorKind`
 --> crates/rrfd/src/lib.rs:9:5
  |
9 | use std::io::ErrorKind;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::path::Path`
 --> crates/brush-dataset/src/storage/mod.rs:7:5
  |
7 | use std::path::Path;
  |     ^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `DatasetInfo` and `StorageType`
 --> crates/brush-dataset/src/storage/indexed_db.rs:6:29
  |
6 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |                             ^^^^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `Path`
 --> crates/brush-dataset/src/storage/filesystem.rs:4:17
  |
4 | use std::path::{Path, PathBuf};
  |                 ^^^^

warning: unused import: `DatasetStorage`
 --> crates/brush-dataset/src/storage/filesystem.rs:7:13
  |
7 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |             ^^^^^^^^^^^^^^

warning: constant `DB_NAME` is never used
 --> crates/brush-dataset/src/storage/indexed_db.rs:9:7
  |
9 | const DB_NAME: &str = "brush_dataset_storage";
  |       ^^^^^^^
  |
  = note: `#[warn(dead_code)]` on by default

warning: constant `METADATA_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:10:7
   |
10 | const METADATA_STORE: &str = "metadata";
   |       ^^^^^^^^^^^^^^

warning: constant `DATASET_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:11:7
   |
11 | const DATASET_STORE: &str = "datasets";
   |       ^^^^^^^^^^^^^

warning: method `get_total_storage_used` is never used
   --> crates/brush-dataset/src/storage/filesystem.rs:126:8
    |
15  | impl FilesystemStorage {
    | ---------------------- method in this implementation
...
126 |     fn get_total_storage_used(&self) -> Result<u64> {
    |        ^^^^^^^^^^^^^^^^^^^^^^

warning: `rrfd` (lib) generated 2 warnings (run `cargo fix --lib -p rrfd` to apply 2 suggestions)
warning: `brush-dataset` (lib) generated 8 warnings (run `cargo fix --lib -p brush-dataset` to apply 4 suggestions)
   Compiling brush-app v0.2.0 (/Users/ryanhickman/code/brush/crates/brush-app)
warning: unused import: `std::fmt::Debug`
  --> crates/brush-app/src/app.rs:26:5
   |
26 | use std::fmt::Debug;
   |     ^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::hash::Hash`
  --> crates/brush-app/src/app.rs:27:5
   |
27 | use std::hash::Hash;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `std::io::Error`
  --> crates/brush-app/src/app.rs:28:5
   |
28 | use std::io::Error;
   |     ^^^^^^^^^^^^^^

warning: unused import: `std::io::ErrorKind`
  --> crates/brush-app/src/app.rs:29:5
   |
29 | use std::io::ErrorKind;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
  --> crates/brush-app/src/app.rs:30:5
   |
30 | use std::pin::Pin;
   |     ^^^^^^^^^^^^^

warning: unused import: `std::time::Duration`
  --> crates/brush-app/src/app.rs:32:5
   |
32 | use std::time::Duration;
   |     ^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Align2` and `RichText`
  --> crates/brush-app/src/app.rs:33:12
   |
33 | use egui::{Align2, RichText};
   |            ^^^^^^  ^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
  --> crates/brush-app/src/app.rs:34:5
   |
34 | use brush_dataset::splat_export;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ExportError` and `ExportFormat`
  --> crates/brush-app/src/app.rs:36:44
   |
36 | use crate::export_service::{ExportService, ExportError, ExportFormat};
   |                                            ^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `brush_dataset::storage`
  --> crates/brush-app/src/app.rs:37:5
   |
37 | use brush_dataset::storage;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
 --> crates/brush-app/src/panels/scene.rs:1:5
  |
1 | use brush_dataset::splat_export;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ControlMessage`
 --> crates/brush-app/src/panels/scene.rs:2:35
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                   ^^^^^^^^^^^^^^

warning: unused import: `tokio_with_wasm::alias as tokio_wasm`
  --> crates/brush-app/src/panels/scene.rs:17:5
   |
17 | use tokio_with_wasm::alias as tokio_wasm;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ProcessMessage`
 --> crates/brush-app/src/overlays/controls_detail.rs:2:51
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                                   ^^^^^^^^^^^^^^

warning: unused import: `std::sync::Once`
 --> crates/brush-app/src/utils.rs:2:5
  |
2 | use std::sync::Once;
  |     ^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> crates/brush-app/src/app.rs:813:63
    |
813 |         let debug_mode = search_params.get("debug").unwrap_or("false");
    |                                                     --------- ^^^^^^^ expected `&String`, found `&str`
    |                                                     |
    |                                                     arguments to this method are incorrect
    |
    = note: expected reference `&std::string::String`
               found reference `&'static str`
help: the return type of this call is `&'static str` due to the type of the argument passed
   --> crates/brush-app/src/app.rs:813:26
    |
813 |         let debug_mode = search_params.get("debug").unwrap_or("false");
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------^
    |                                                               |
    |                                                               this argument influences the return type of `unwrap_or`
note: method defined here
   --> /rustc/4d91de4e48198da2e33413efdcd9cd2cc0c46688/library/core/src/option.rs:998:12
help: use `Option::map_or` to deref inner value of `Option`
    |
813 |         let debug_mode = search_params.get("debug").map_or("false", |v| v);
    |                                                     ~~~~~~        +++++++

error[E0308]: mismatched types
   --> crates/brush-app/src/app.rs:814:66
    |
814 |         let auto_test = search_params.get("auto_test").unwrap_or("false");
    |                                                        --------- ^^^^^^^ expected `&String`, found `&str`
    |                                                        |
    |                                                        arguments to this method are incorrect
    |
    = note: expected reference `&std::string::String`
               found reference `&'static str`
help: the return type of this call is `&'static str` due to the type of the argument passed
   --> crates/brush-app/src/app.rs:814:25
    |
814 |         let auto_test = search_params.get("auto_test").unwrap_or("false");
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------^
    |                                                                  |
    |                                                                  this argument influences the return type of `unwrap_or`
note: method defined here
   --> /rustc/4d91de4e48198da2e33413efdcd9cd2cc0c46688/library/core/src/option.rs:998:12
help: use `Option::map_or` to deref inner value of `Option`
    |
814 |         let auto_test = search_params.get("auto_test").map_or("false", |v| v);
    |                                                        ~~~~~~        +++++++

error[E0277]: the trait bound `str: std::convert::From<std::string::String>` is not satisfied
   --> crates/brush-app/src/app.rs:839:30
    |
839 |   ...                   &format!("
    |  ________________________^
840 | | ...                       console.log('🧪 Scheduling test PLY file load');
841 | | ...                       setTimeout(() => {{
842 | | ...                           console.log('🧪 Executing automated test: Loading PLY file');
...   |
846 | | ...                       }}, 1500);
847 | | ...                   ").into()
    | |                        ^ ---- required by a bound introduced by this call
    | |________________________|
    |                          the trait `std::convert::From<std::string::String>` is not implemented for `str`
    |
    = help: the following other types implement trait `std::convert::From<T>`:
              `&str` implements `std::convert::From<&icu_locid::extensions::other::subtag::Subtag>`
              `&str` implements `std::convert::From<&icu_locid::extensions::private::other::Subtag>`
              `&str` implements `std::convert::From<&icu_locid::extensions::transform::key::Key>`
              `&str` implements `std::convert::From<&icu_locid::extensions::unicode::attribute::Attribute>`
              `&str` implements `std::convert::From<&icu_locid::extensions::unicode::key::Key>`
              `&str` implements `std::convert::From<&icu_locid::subtags::language::Language>`
              `&str` implements `std::convert::From<&icu_locid::subtags::region::Region>`
              `&str` implements `std::convert::From<&icu_locid::subtags::script::Script>`
            and 2 others
    = note: required for `std::string::String` to implement `Into<str>`

error[E0599]: no method named `ok` found for enum `std::option::Option` in the current scope
   --> crates/brush-app/src/app.rs:850:22
    |
836 | /                 web_sys::window()
837 | |                     .and_then(|w| w.request_animation_frame(
838 | |                         &js_sys::Function::new_with_args("", 
839 | |                             &format!("
...   |
849 | |                     ).ok())
850 | |                     .ok();
    | |_____________________-^^
    |
help: there is a method `or` with a similar name, but with different arguments
   --> /rustc/4d91de4e48198da2e33413efdcd9cd2cc0c46688/library/core/src/option.rs:1524:5

error[E0599]: no method named `unchecked_ref` found for reference `&JsValue` in the current scope
   --> crates/brush-app/src/app.rs:866:50
    |
866 | ...                   closure.as_ref().unchecked_ref(),
    |                                        ^^^^^^^^^^^^^
    |
    = help: items from traits can only be used if the trait is in scope
help: trait `JsCast` which provides `unchecked_ref` is implemented but not in scope; perhaps you want to import it
    |
1   + use wasm_bindgen::JsCast;
    |
help: there is a method `unchecked_into` with a similar name
    |
866 |                                 closure.as_ref().unchecked_into(),
    |                                                  ~~~~~~~~~~~~~~

error[E0599]: no method named `ok` found for enum `std::option::Option` in the current scope
   --> crates/brush-app/src/app.rs:871:22
    |
861 | /                 web_sys::window()
862 | |                     .and_then(|window| {
863 | |                         window
864 | |                             .add_event_listener_with_callback(
...   |
870 | |                     })
871 | |                     .ok();
    | |_____________________-^^
    |
help: there is a method `or` with a similar name, but with different arguments
   --> /rustc/4d91de4e48198da2e33413efdcd9cd2cc0c46688/library/core/src/option.rs:1524:5

error[E0599]: no method named `get_dataset_detail_overlay_mut` found for mutable reference `&mut AppContext` in the current scope
  --> crates/brush-app/src/utils.rs:80:44
   |
80 |     if let Some(dataset_overlay) = context.get_dataset_detail_overlay_mut() {
   |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `&mut AppContext`

warning: unused variable: `dataset_detail_overlay`
    --> crates/brush-app/src/app.rs:1277:21
     |
1277 |                 let dataset_detail_overlay = self.dataset_detail_overlay.clone();
     |                     ^^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dataset_detail_overlay`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `js_window`
    --> crates/brush-app/src/app.rs:1309:37
     |
1309 | ...                   let js_window = web_sys::window().unwrap();
     |                           ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_js_window`

warning: unused variable: `view_aspect`
  --> crates/brush-app/src/panels/scene.rs:96:21
   |
96 |         if let Some(view_aspect) = context.view_aspect {
   |                     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_view_aspect`

Some errors have detailed explanations: E0277, E0308, E0599.
For more information about an error, try `rustc --explain E0277`.
warning: `brush-app` (lib) generated 18 warnings
error: could not compile `brush-app` (lib) due to 7 previous errors; 18 warnings emitted
2025-03-19T19:21:07.856411Z ERROR ❌ error
error from build pipeline

Caused by:
    0: HTML build pipeline failed (1 errors), showing first
    1: error from asset pipeline
    2: running cargo build
    3: error during cargo build execution
    4: cargo call to executable 'cargo' with args: '["build", "--target=wasm32-unknown-unknown", "--manifest-path", "/Users/ryanhickman/code/brush/crates/brush-app/Cargo.toml"]' returned a bad status: exit status: 101
2025-03-19T19:21:53.699397Z  INFO 📦 starting build
warning: unused import: `std::io::Error`
 --> crates/rrfd/src/lib.rs:8:5
  |
8 | use std::io::Error;
  |     ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::io::ErrorKind`
 --> crates/rrfd/src/lib.rs:9:5
  |
9 | use std::io::ErrorKind;
  |     ^^^^^^^^^^^^^^^^^^

warning: `rrfd` (lib) generated 2 warnings (run `cargo fix --lib -p rrfd` to apply 2 suggestions)
warning: unused import: `std::path::Path`
 --> crates/brush-dataset/src/storage/mod.rs:7:5
  |
7 | use std::path::Path;
  |     ^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `DatasetInfo` and `StorageType`
 --> crates/brush-dataset/src/storage/indexed_db.rs:6:29
  |
6 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |                             ^^^^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `Path`
 --> crates/brush-dataset/src/storage/filesystem.rs:4:17
  |
4 | use std::path::{Path, PathBuf};
  |                 ^^^^

warning: unused import: `DatasetStorage`
 --> crates/brush-dataset/src/storage/filesystem.rs:7:13
  |
7 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |             ^^^^^^^^^^^^^^

warning: constant `DB_NAME` is never used
 --> crates/brush-dataset/src/storage/indexed_db.rs:9:7
  |
9 | const DB_NAME: &str = "brush_dataset_storage";
  |       ^^^^^^^
  |
  = note: `#[warn(dead_code)]` on by default

warning: constant `METADATA_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:10:7
   |
10 | const METADATA_STORE: &str = "metadata";
   |       ^^^^^^^^^^^^^^

warning: constant `DATASET_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:11:7
   |
11 | const DATASET_STORE: &str = "datasets";
   |       ^^^^^^^^^^^^^

warning: method `get_total_storage_used` is never used
   --> crates/brush-dataset/src/storage/filesystem.rs:126:8
    |
15  | impl FilesystemStorage {
    | ---------------------- method in this implementation
...
126 |     fn get_total_storage_used(&self) -> Result<u64> {
    |        ^^^^^^^^^^^^^^^^^^^^^^

   Compiling brush-app v0.2.0 (/Users/ryanhickman/code/brush/crates/brush-app)
warning: `brush-dataset` (lib) generated 8 warnings (run `cargo fix --lib -p brush-dataset` to apply 4 suggestions)
warning: unused import: `std::fmt::Debug`
  --> crates/brush-app/src/app.rs:26:5
   |
26 | use std::fmt::Debug;
   |     ^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::hash::Hash`
  --> crates/brush-app/src/app.rs:27:5
   |
27 | use std::hash::Hash;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `std::io::Error`
  --> crates/brush-app/src/app.rs:28:5
   |
28 | use std::io::Error;
   |     ^^^^^^^^^^^^^^

warning: unused import: `std::io::ErrorKind`
  --> crates/brush-app/src/app.rs:29:5
   |
29 | use std::io::ErrorKind;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
  --> crates/brush-app/src/app.rs:30:5
   |
30 | use std::pin::Pin;
   |     ^^^^^^^^^^^^^

warning: unused import: `std::time::Duration`
  --> crates/brush-app/src/app.rs:32:5
   |
32 | use std::time::Duration;
   |     ^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Align2` and `RichText`
  --> crates/brush-app/src/app.rs:33:12
   |
33 | use egui::{Align2, RichText};
   |            ^^^^^^  ^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
  --> crates/brush-app/src/app.rs:34:5
   |
34 | use brush_dataset::splat_export;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ExportError` and `ExportFormat`
  --> crates/brush-app/src/app.rs:36:44
   |
36 | use crate::export_service::{ExportService, ExportError, ExportFormat};
   |                                            ^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `brush_dataset::storage`
  --> crates/brush-app/src/app.rs:37:5
   |
37 | use brush_dataset::storage;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
 --> crates/brush-app/src/panels/scene.rs:1:5
  |
1 | use brush_dataset::splat_export;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ControlMessage`
 --> crates/brush-app/src/panels/scene.rs:2:35
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                   ^^^^^^^^^^^^^^

warning: unused import: `tokio_with_wasm::alias as tokio_wasm`
  --> crates/brush-app/src/panels/scene.rs:17:5
   |
17 | use tokio_with_wasm::alias as tokio_wasm;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ProcessMessage`
 --> crates/brush-app/src/overlays/controls_detail.rs:2:51
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                                   ^^^^^^^^^^^^^^

warning: unused import: `std::sync::Once`
 --> crates/brush-app/src/utils.rs:2:5
  |
2 | use std::sync::Once;
  |     ^^^^^^^^^^^^^^^

error[E0277]: the trait bound `str: std::convert::From<std::string::String>` is not satisfied
   --> crates/brush-app/src/app.rs:839:30
    |
839 |   ...                   &format!("
    |  ________________________^
840 | | ...                       console.log('🧪 Scheduling test PLY file load');
841 | | ...                       setTimeout(() => {{
842 | | ...                           console.log('🧪 Executing automated test: Loading PLY file');
...   |
846 | | ...                       }}, 1500);
847 | | ...                   ").into()
    | |                        ^ ---- required by a bound introduced by this call
    | |________________________|
    |                          the trait `std::convert::From<std::string::String>` is not implemented for `str`
    |
    = help: the following other types implement trait `std::convert::From<T>`:
              `&str` implements `std::convert::From<&icu_locid::extensions::other::subtag::Subtag>`
              `&str` implements `std::convert::From<&icu_locid::extensions::private::other::Subtag>`
              `&str` implements `std::convert::From<&icu_locid::extensions::transform::key::Key>`
              `&str` implements `std::convert::From<&icu_locid::extensions::unicode::attribute::Attribute>`
              `&str` implements `std::convert::From<&icu_locid::extensions::unicode::key::Key>`
              `&str` implements `std::convert::From<&icu_locid::subtags::language::Language>`
              `&str` implements `std::convert::From<&icu_locid::subtags::region::Region>`
              `&str` implements `std::convert::From<&icu_locid::subtags::script::Script>`
            and 2 others
    = note: required for `std::string::String` to implement `Into<str>`

error[E0599]: no method named `ok` found for enum `std::option::Option` in the current scope
   --> crates/brush-app/src/app.rs:850:22
    |
836 | /                 web_sys::window()
837 | |                     .and_then(|w| w.request_animation_frame(
838 | |                         &js_sys::Function::new_with_args("", 
839 | |                             &format!("
...   |
849 | |                     ).ok())
850 | |                     .ok();
    | |_____________________-^^
    |
help: there is a method `or` with a similar name, but with different arguments
   --> /rustc/4d91de4e48198da2e33413efdcd9cd2cc0c46688/library/core/src/option.rs:1524:5

error[E0599]: no method named `unchecked_ref` found for reference `&JsValue` in the current scope
   --> crates/brush-app/src/app.rs:866:50
    |
866 | ...                   closure.as_ref().unchecked_ref(),
    |                                        ^^^^^^^^^^^^^
    |
    = help: items from traits can only be used if the trait is in scope
help: trait `JsCast` which provides `unchecked_ref` is implemented but not in scope; perhaps you want to import it
    |
1   + use wasm_bindgen::JsCast;
    |
help: there is a method `unchecked_into` with a similar name
    |
866 |                                 closure.as_ref().unchecked_into(),
    |                                                  ~~~~~~~~~~~~~~

error[E0599]: no method named `ok` found for enum `std::option::Option` in the current scope
   --> crates/brush-app/src/app.rs:871:22
    |
861 | /                 web_sys::window()
862 | |                     .and_then(|window| {
863 | |                         window
864 | |                             .add_event_listener_with_callback(
...   |
870 | |                     })
871 | |                     .ok();
    | |_____________________-^^
    |
help: there is a method `or` with a similar name, but with different arguments
   --> /rustc/4d91de4e48198da2e33413efdcd9cd2cc0c46688/library/core/src/option.rs:1524:5

error[E0599]: no method named `get_dataset_detail_overlay_mut` found for mutable reference `&mut AppContext` in the current scope
  --> crates/brush-app/src/utils.rs:80:44
   |
80 |     if let Some(dataset_overlay) = context.get_dataset_detail_overlay_mut() {
   |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `&mut AppContext`

warning: unused variable: `dataset_detail_overlay`
    --> crates/brush-app/src/app.rs:1277:21
     |
1277 |                 let dataset_detail_overlay = self.dataset_detail_overlay.clone();
     |                     ^^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dataset_detail_overlay`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `js_window`
    --> crates/brush-app/src/app.rs:1309:37
     |
1309 | ...                   let js_window = web_sys::window().unwrap();
     |                           ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_js_window`

warning: unused variable: `view_aspect`
  --> crates/brush-app/src/panels/scene.rs:96:21
   |
96 |         if let Some(view_aspect) = context.view_aspect {
   |                     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_view_aspect`

Some errors have detailed explanations: E0277, E0599.
For more information about an error, try `rustc --explain E0277`.
warning: `brush-app` (lib) generated 18 warnings
error: could not compile `brush-app` (lib) due to 5 previous errors; 18 warnings emitted
2025-03-19T19:21:55.225134Z ERROR ❌ error
error from build pipeline

Caused by:
    0: HTML build pipeline failed (1 errors), showing first
    1: error from asset pipeline
    2: running cargo build
    3: error during cargo build execution
    4: cargo call to executable 'cargo' with args: '["build", "--target=wasm32-unknown-unknown", "--manifest-path", "/Users/ryanhickman/code/brush/crates/brush-app/Cargo.toml"]' returned a bad status: exit status: 101
2025-03-19T19:22:04.771860Z  INFO 📦 starting build
warning: unused import: `std::io::Error`
 --> crates/rrfd/src/lib.rs:8:5
  |
8 | use std::io::Error;
  |     ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::io::ErrorKind`
 --> crates/rrfd/src/lib.rs:9:5
  |
9 | use std::io::ErrorKind;
  |     ^^^^^^^^^^^^^^^^^^

warning: `rrfd` (lib) generated 2 warnings (run `cargo fix --lib -p rrfd` to apply 2 suggestions)
warning: unused import: `std::path::Path`
 --> crates/brush-dataset/src/storage/mod.rs:7:5
  |
7 | use std::path::Path;
  |     ^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `DatasetInfo` and `StorageType`
 --> crates/brush-dataset/src/storage/indexed_db.rs:6:29
  |
6 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |                             ^^^^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `Path`
 --> crates/brush-dataset/src/storage/filesystem.rs:4:17
  |
4 | use std::path::{Path, PathBuf};
  |                 ^^^^

warning: unused import: `DatasetStorage`
 --> crates/brush-dataset/src/storage/filesystem.rs:7:13
  |
7 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |             ^^^^^^^^^^^^^^

warning: constant `DB_NAME` is never used
 --> crates/brush-dataset/src/storage/indexed_db.rs:9:7
  |
9 | const DB_NAME: &str = "brush_dataset_storage";
  |       ^^^^^^^
  |
  = note: `#[warn(dead_code)]` on by default

warning: constant `METADATA_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:10:7
   |
10 | const METADATA_STORE: &str = "metadata";
   |       ^^^^^^^^^^^^^^

warning: constant `DATASET_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:11:7
   |
11 | const DATASET_STORE: &str = "datasets";
   |       ^^^^^^^^^^^^^

warning: method `get_total_storage_used` is never used
   --> crates/brush-dataset/src/storage/filesystem.rs:126:8
    |
15  | impl FilesystemStorage {
    | ---------------------- method in this implementation
...
126 |     fn get_total_storage_used(&self) -> Result<u64> {
    |        ^^^^^^^^^^^^^^^^^^^^^^

   Compiling brush-app v0.2.0 (/Users/ryanhickman/code/brush/crates/brush-app)
warning: `brush-dataset` (lib) generated 8 warnings (run `cargo fix --lib -p brush-dataset` to apply 4 suggestions)
warning: unused import: `std::fmt::Debug`
  --> crates/brush-app/src/app.rs:26:5
   |
26 | use std::fmt::Debug;
   |     ^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::hash::Hash`
  --> crates/brush-app/src/app.rs:27:5
   |
27 | use std::hash::Hash;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `std::io::Error`
  --> crates/brush-app/src/app.rs:28:5
   |
28 | use std::io::Error;
   |     ^^^^^^^^^^^^^^

warning: unused import: `std::io::ErrorKind`
  --> crates/brush-app/src/app.rs:29:5
   |
29 | use std::io::ErrorKind;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
  --> crates/brush-app/src/app.rs:30:5
   |
30 | use std::pin::Pin;
   |     ^^^^^^^^^^^^^

warning: unused imports: `Duration` and `SystemTime`
  --> crates/brush-app/src/app.rs:32:17
   |
32 | use std::time::{Duration, SystemTime};
   |                 ^^^^^^^^  ^^^^^^^^^^

warning: unused imports: `Align2` and `RichText`
  --> crates/brush-app/src/app.rs:33:12
   |
33 | use egui::{Align2, RichText};
   |            ^^^^^^  ^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
  --> crates/brush-app/src/app.rs:34:5
   |
34 | use brush_dataset::splat_export;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ExportError` and `ExportFormat`
  --> crates/brush-app/src/app.rs:36:44
   |
36 | use crate::export_service::{ExportService, ExportError, ExportFormat};
   |                                            ^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `brush_dataset::storage`
  --> crates/brush-app/src/app.rs:37:5
   |
37 | use brush_dataset::storage;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
 --> crates/brush-app/src/panels/scene.rs:1:5
  |
1 | use brush_dataset::splat_export;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ControlMessage`
 --> crates/brush-app/src/panels/scene.rs:2:35
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                   ^^^^^^^^^^^^^^

warning: unused import: `tokio_with_wasm::alias as tokio_wasm`
  --> crates/brush-app/src/panels/scene.rs:17:5
   |
17 | use tokio_with_wasm::alias as tokio_wasm;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ProcessMessage`
 --> crates/brush-app/src/overlays/controls_detail.rs:2:51
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                                   ^^^^^^^^^^^^^^

warning: unused import: `std::sync::Once`
 --> crates/brush-app/src/utils.rs:2:5
  |
2 | use std::sync::Once;
  |     ^^^^^^^^^^^^^^^

error[E0277]: the trait bound `str: std::convert::From<std::string::String>` is not satisfied
   --> crates/brush-app/src/app.rs:841:30
    |
841 |   ...                   &format!("
    |  ________________________^
842 | | ...                       console.log('🧪 Scheduling test PLY file load');
843 | | ...                       setTimeout(() => {{
844 | | ...                           console.log('🧪 Executing automated test: Loading PLY file');
...   |
848 | | ...                       }}, 1500);
849 | | ...                   ").into()
    | |                        ^ ---- required by a bound introduced by this call
    | |________________________|
    |                          the trait `std::convert::From<std::string::String>` is not implemented for `str`
    |
    = help: the following other types implement trait `std::convert::From<T>`:
              `&str` implements `std::convert::From<&icu_locid::extensions::other::subtag::Subtag>`
              `&str` implements `std::convert::From<&icu_locid::extensions::private::other::Subtag>`
              `&str` implements `std::convert::From<&icu_locid::extensions::transform::key::Key>`
              `&str` implements `std::convert::From<&icu_locid::extensions::unicode::attribute::Attribute>`
              `&str` implements `std::convert::From<&icu_locid::extensions::unicode::key::Key>`
              `&str` implements `std::convert::From<&icu_locid::subtags::language::Language>`
              `&str` implements `std::convert::From<&icu_locid::subtags::region::Region>`
              `&str` implements `std::convert::From<&icu_locid::subtags::script::Script>`
            and 2 others
    = note: required for `std::string::String` to implement `Into<str>`

error[E0599]: no method named `ok` found for enum `std::option::Option` in the current scope
   --> crates/brush-app/src/app.rs:852:22
    |
838 | /                 web_sys::window()
839 | |                     .and_then(|w| w.request_animation_frame(
840 | |                         &js_sys::Function::new_with_args("", 
841 | |                             &format!("
...   |
851 | |                     ).ok())
852 | |                     .ok();
    | |_____________________-^^
    |
help: there is a method `or` with a similar name, but with different arguments
   --> /rustc/4d91de4e48198da2e33413efdcd9cd2cc0c46688/library/core/src/option.rs:1524:5

error[E0599]: no method named `ok` found for enum `std::option::Option` in the current scope
   --> crates/brush-app/src/app.rs:873:22
    |
863 | /                 web_sys::window()
864 | |                     .and_then(|window| {
865 | |                         window
866 | |                             .add_event_listener_with_callback(
...   |
872 | |                     })
873 | |                     .ok();
    | |_____________________-^^
    |
help: there is a method `or` with a similar name, but with different arguments
   --> /rustc/4d91de4e48198da2e33413efdcd9cd2cc0c46688/library/core/src/option.rs:1524:5

error[E0599]: no method named `get_dataset_detail_overlay_mut` found for mutable reference `&mut AppContext` in the current scope
  --> crates/brush-app/src/utils.rs:80:44
   |
80 |     if let Some(dataset_overlay) = context.get_dataset_detail_overlay_mut() {
   |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `&mut AppContext`

warning: unused variable: `dataset_detail_overlay`
    --> crates/brush-app/src/app.rs:1279:21
     |
1279 |                 let dataset_detail_overlay = self.dataset_detail_overlay.clone();
     |                     ^^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dataset_detail_overlay`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `js_window`
    --> crates/brush-app/src/app.rs:1311:37
     |
1311 | ...                   let js_window = web_sys::window().unwrap();
     |                           ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_js_window`

warning: unused variable: `view_aspect`
  --> crates/brush-app/src/panels/scene.rs:96:21
   |
96 |         if let Some(view_aspect) = context.view_aspect {
   |                     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_view_aspect`

Some errors have detailed explanations: E0277, E0599.
For more information about an error, try `rustc --explain E0277`.
warning: `brush-app` (lib) generated 18 warnings
error: could not compile `brush-app` (lib) due to 4 previous errors; 18 warnings emitted
2025-03-19T19:22:06.180421Z ERROR ❌ error
error from build pipeline

Caused by:
    0: HTML build pipeline failed (1 errors), showing first
    1: error from asset pipeline
    2: running cargo build
    3: error during cargo build execution
    4: cargo call to executable 'cargo' with args: '["build", "--target=wasm32-unknown-unknown", "--manifest-path", "/Users/ryanhickman/code/brush/crates/brush-app/Cargo.toml"]' returned a bad status: exit status: 101
2025-03-19T19:22:17.093792Z  INFO 📦 starting build
warning: unused import: `std::io::Error`
 --> crates/rrfd/src/lib.rs:8:5
  |
8 | use std::io::Error;
  |     ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::io::ErrorKind`
 --> crates/rrfd/src/lib.rs:9:5
  |
9 | use std::io::ErrorKind;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::path::Path`
 --> crates/brush-dataset/src/storage/mod.rs:7:5
  |
7 | use std::path::Path;
  |     ^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `DatasetInfo` and `StorageType`
 --> crates/brush-dataset/src/storage/indexed_db.rs:6:29
  |
6 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |                             ^^^^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `Path`
 --> crates/brush-dataset/src/storage/filesystem.rs:4:17
  |
4 | use std::path::{Path, PathBuf};
  |                 ^^^^

warning: unused import: `DatasetStorage`
 --> crates/brush-dataset/src/storage/filesystem.rs:7:13
  |
7 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |             ^^^^^^^^^^^^^^

warning: constant `DB_NAME` is never used
 --> crates/brush-dataset/src/storage/indexed_db.rs:9:7
  |
9 | const DB_NAME: &str = "brush_dataset_storage";
  |       ^^^^^^^
  |
  = note: `#[warn(dead_code)]` on by default

warning: constant `METADATA_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:10:7
   |
10 | const METADATA_STORE: &str = "metadata";
   |       ^^^^^^^^^^^^^^

warning: constant `DATASET_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:11:7
   |
11 | const DATASET_STORE: &str = "datasets";
   |       ^^^^^^^^^^^^^

warning: method `get_total_storage_used` is never used
   --> crates/brush-dataset/src/storage/filesystem.rs:126:8
    |
15  | impl FilesystemStorage {
    | ---------------------- method in this implementation
...
126 |     fn get_total_storage_used(&self) -> Result<u64> {
    |        ^^^^^^^^^^^^^^^^^^^^^^

warning: `rrfd` (lib) generated 2 warnings (run `cargo fix --lib -p rrfd` to apply 2 suggestions)
warning: `brush-dataset` (lib) generated 8 warnings (run `cargo fix --lib -p brush-dataset` to apply 4 suggestions)
   Compiling brush-app v0.2.0 (/Users/ryanhickman/code/brush/crates/brush-app)
warning: unused import: `std::fmt::Debug`
  --> crates/brush-app/src/app.rs:26:5
   |
26 | use std::fmt::Debug;
   |     ^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::hash::Hash`
  --> crates/brush-app/src/app.rs:27:5
   |
27 | use std::hash::Hash;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `std::io::Error`
  --> crates/brush-app/src/app.rs:28:5
   |
28 | use std::io::Error;
   |     ^^^^^^^^^^^^^^

warning: unused import: `std::io::ErrorKind`
  --> crates/brush-app/src/app.rs:29:5
   |
29 | use std::io::ErrorKind;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
  --> crates/brush-app/src/app.rs:30:5
   |
30 | use std::pin::Pin;
   |     ^^^^^^^^^^^^^

warning: unused imports: `Duration` and `SystemTime`
  --> crates/brush-app/src/app.rs:32:17
   |
32 | use std::time::{Duration, SystemTime};
   |                 ^^^^^^^^  ^^^^^^^^^^

warning: unused imports: `Align2` and `RichText`
  --> crates/brush-app/src/app.rs:33:12
   |
33 | use egui::{Align2, RichText};
   |            ^^^^^^  ^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
  --> crates/brush-app/src/app.rs:34:5
   |
34 | use brush_dataset::splat_export;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ExportError` and `ExportFormat`
  --> crates/brush-app/src/app.rs:36:44
   |
36 | use crate::export_service::{ExportService, ExportError, ExportFormat};
   |                                            ^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `brush_dataset::storage`
  --> crates/brush-app/src/app.rs:37:5
   |
37 | use brush_dataset::storage;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
 --> crates/brush-app/src/panels/scene.rs:1:5
  |
1 | use brush_dataset::splat_export;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ControlMessage`
 --> crates/brush-app/src/panels/scene.rs:2:35
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                   ^^^^^^^^^^^^^^

warning: unused import: `tokio_with_wasm::alias as tokio_wasm`
  --> crates/brush-app/src/panels/scene.rs:17:5
   |
17 | use tokio_with_wasm::alias as tokio_wasm;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ProcessMessage`
 --> crates/brush-app/src/overlays/controls_detail.rs:2:51
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                                   ^^^^^^^^^^^^^^

warning: unused import: `std::sync::Once`
 --> crates/brush-app/src/utils.rs:2:5
  |
2 | use std::sync::Once;
  |     ^^^^^^^^^^^^^^^

error[E0277]: the trait bound `str: std::convert::From<std::string::String>` is not satisfied
   --> crates/brush-app/src/app.rs:841:30
    |
841 |   ...                   &format!("
    |  ________________________^
842 | | ...                       console.log('🧪 Scheduling test PLY file load');
843 | | ...                       setTimeout(() => {{
844 | | ...                           console.log('🧪 Executing automated test: Loading PLY file');
...   |
848 | | ...                       }}, 1500);
849 | | ...                   ").into()
    | |                        ^ ---- required by a bound introduced by this call
    | |________________________|
    |                          the trait `std::convert::From<std::string::String>` is not implemented for `str`
    |
    = help: the following other types implement trait `std::convert::From<T>`:
              `&str` implements `std::convert::From<&icu_locid::extensions::other::subtag::Subtag>`
              `&str` implements `std::convert::From<&icu_locid::extensions::private::other::Subtag>`
              `&str` implements `std::convert::From<&icu_locid::extensions::transform::key::Key>`
              `&str` implements `std::convert::From<&icu_locid::extensions::unicode::attribute::Attribute>`
              `&str` implements `std::convert::From<&icu_locid::extensions::unicode::key::Key>`
              `&str` implements `std::convert::From<&icu_locid::subtags::language::Language>`
              `&str` implements `std::convert::From<&icu_locid::subtags::region::Region>`
              `&str` implements `std::convert::From<&icu_locid::subtags::script::Script>`
            and 2 others
    = note: required for `std::string::String` to implement `Into<str>`

error[E0599]: no method named `ok` found for enum `std::option::Option` in the current scope
   --> crates/brush-app/src/app.rs:852:22
    |
838 | /                 web_sys::window()
839 | |                     .and_then(|w| w.request_animation_frame(
840 | |                         &js_sys::Function::new_with_args("", 
841 | |                             &format!("
...   |
851 | |                     ).ok())
852 | |                     .ok();
    | |_____________________-^^
    |
help: there is a method `or` with a similar name, but with different arguments
   --> /rustc/4d91de4e48198da2e33413efdcd9cd2cc0c46688/library/core/src/option.rs:1524:5

error[E0599]: no method named `ok` found for enum `std::option::Option` in the current scope
   --> crates/brush-app/src/app.rs:873:22
    |
863 | /                 web_sys::window()
864 | |                     .and_then(|window| {
865 | |                         window
866 | |                             .add_event_listener_with_callback(
...   |
872 | |                     })
873 | |                     .ok();
    | |_____________________-^^
    |
help: there is a method `or` with a similar name, but with different arguments
   --> /rustc/4d91de4e48198da2e33413efdcd9cd2cc0c46688/library/core/src/option.rs:1524:5

warning: unused variable: `dataset_detail_overlay`
    --> crates/brush-app/src/app.rs:1279:21
     |
1279 |                 let dataset_detail_overlay = self.dataset_detail_overlay.clone();
     |                     ^^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dataset_detail_overlay`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `js_window`
    --> crates/brush-app/src/app.rs:1311:37
     |
1311 | ...                   let js_window = web_sys::window().unwrap();
     |                           ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_js_window`

warning: unused variable: `view_aspect`
  --> crates/brush-app/src/panels/scene.rs:96:21
   |
96 |         if let Some(view_aspect) = context.view_aspect {
   |                     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_view_aspect`

warning: unused variable: `test_file`
  --> crates/brush-app/src/utils.rs:77:9
   |
77 |     let test_file = PathBuf::from("test_data/sample.ply");
   |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_test_file`

warning: unused variable: `context`
  --> crates/brush-app/src/utils.rs:72:27
   |
72 | pub fn auto_load_test_ply(context: &mut crate::app::AppContext) {
   |                           ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_context`

Some errors have detailed explanations: E0277, E0599.
For more information about an error, try `rustc --explain E0277`.
warning: `brush-app` (lib) generated 20 warnings
error: could not compile `brush-app` (lib) due to 3 previous errors; 20 warnings emitted
2025-03-19T19:22:18.502957Z ERROR ❌ error
error from build pipeline

Caused by:
    0: HTML build pipeline failed (1 errors), showing first
    1: error from asset pipeline
    2: running cargo build
    3: error during cargo build execution
    4: cargo call to executable 'cargo' with args: '["build", "--target=wasm32-unknown-unknown", "--manifest-path", "/Users/ryanhickman/code/brush/crates/brush-app/Cargo.toml"]' returned a bad status: exit status: 101
2025-03-19T19:22:31.272377Z  INFO 📦 starting build
warning: unused import: `std::io::Error`
 --> crates/rrfd/src/lib.rs:8:5
  |
8 | use std::io::Error;
  |     ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::io::ErrorKind`
 --> crates/rrfd/src/lib.rs:9:5
  |
9 | use std::io::ErrorKind;
  |     ^^^^^^^^^^^^^^^^^^

warning: `rrfd` (lib) generated 2 warnings (run `cargo fix --lib -p rrfd` to apply 2 suggestions)
warning: unused import: `std::path::Path`
 --> crates/brush-dataset/src/storage/mod.rs:7:5
  |
7 | use std::path::Path;
  |     ^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `DatasetInfo` and `StorageType`
 --> crates/brush-dataset/src/storage/indexed_db.rs:6:29
  |
6 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |                             ^^^^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `Path`
 --> crates/brush-dataset/src/storage/filesystem.rs:4:17
  |
4 | use std::path::{Path, PathBuf};
  |                 ^^^^

warning: unused import: `DatasetStorage`
 --> crates/brush-dataset/src/storage/filesystem.rs:7:13
  |
7 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |             ^^^^^^^^^^^^^^

warning: constant `DB_NAME` is never used
 --> crates/brush-dataset/src/storage/indexed_db.rs:9:7
  |
9 | const DB_NAME: &str = "brush_dataset_storage";
  |       ^^^^^^^
  |
  = note: `#[warn(dead_code)]` on by default

warning: constant `METADATA_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:10:7
   |
10 | const METADATA_STORE: &str = "metadata";
   |       ^^^^^^^^^^^^^^

warning: constant `DATASET_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:11:7
   |
11 | const DATASET_STORE: &str = "datasets";
   |       ^^^^^^^^^^^^^

warning: method `get_total_storage_used` is never used
   --> crates/brush-dataset/src/storage/filesystem.rs:126:8
    |
15  | impl FilesystemStorage {
    | ---------------------- method in this implementation
...
126 |     fn get_total_storage_used(&self) -> Result<u64> {
    |        ^^^^^^^^^^^^^^^^^^^^^^

   Compiling brush-app v0.2.0 (/Users/ryanhickman/code/brush/crates/brush-app)
warning: `brush-dataset` (lib) generated 8 warnings (run `cargo fix --lib -p brush-dataset` to apply 4 suggestions)
warning: unused import: `std::fmt::Debug`
  --> crates/brush-app/src/app.rs:26:5
   |
26 | use std::fmt::Debug;
   |     ^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::hash::Hash`
  --> crates/brush-app/src/app.rs:27:5
   |
27 | use std::hash::Hash;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `std::io::Error`
  --> crates/brush-app/src/app.rs:28:5
   |
28 | use std::io::Error;
   |     ^^^^^^^^^^^^^^

warning: unused import: `std::io::ErrorKind`
  --> crates/brush-app/src/app.rs:29:5
   |
29 | use std::io::ErrorKind;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
  --> crates/brush-app/src/app.rs:30:5
   |
30 | use std::pin::Pin;
   |     ^^^^^^^^^^^^^

warning: unused imports: `Duration` and `SystemTime`
  --> crates/brush-app/src/app.rs:32:17
   |
32 | use std::time::{Duration, SystemTime};
   |                 ^^^^^^^^  ^^^^^^^^^^

warning: unused imports: `Align2` and `RichText`
  --> crates/brush-app/src/app.rs:33:12
   |
33 | use egui::{Align2, RichText};
   |            ^^^^^^  ^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
  --> crates/brush-app/src/app.rs:34:5
   |
34 | use brush_dataset::splat_export;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ExportError` and `ExportFormat`
  --> crates/brush-app/src/app.rs:36:44
   |
36 | use crate::export_service::{ExportService, ExportError, ExportFormat};
   |                                            ^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `brush_dataset::storage`
  --> crates/brush-app/src/app.rs:37:5
   |
37 | use brush_dataset::storage;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
 --> crates/brush-app/src/panels/scene.rs:1:5
  |
1 | use brush_dataset::splat_export;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ControlMessage`
 --> crates/brush-app/src/panels/scene.rs:2:35
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                   ^^^^^^^^^^^^^^

warning: unused import: `tokio_with_wasm::alias as tokio_wasm`
  --> crates/brush-app/src/panels/scene.rs:17:5
   |
17 | use tokio_with_wasm::alias as tokio_wasm;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ProcessMessage`
 --> crates/brush-app/src/overlays/controls_detail.rs:2:51
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                                   ^^^^^^^^^^^^^^

warning: unused import: `std::sync::Once`
 --> crates/brush-app/src/utils.rs:2:5
  |
2 | use std::sync::Once;
  |     ^^^^^^^^^^^^^^^

error[E0599]: no method named `ok` found for enum `std::option::Option` in the current scope
   --> crates/brush-app/src/app.rs:873:22
    |
863 | /                 web_sys::window()
864 | |                     .and_then(|window| {
865 | |                         window
866 | |                             .add_event_listener_with_callback(
...   |
872 | |                     })
873 | |                     .ok();
    | |_____________________-^^
    |
help: there is a method `or` with a similar name, but with different arguments
   --> /rustc/4d91de4e48198da2e33413efdcd9cd2cc0c46688/library/core/src/option.rs:1524:5

warning: unused variable: `dataset_detail_overlay`
    --> crates/brush-app/src/app.rs:1279:21
     |
1279 |                 let dataset_detail_overlay = self.dataset_detail_overlay.clone();
     |                     ^^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dataset_detail_overlay`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `js_window`
    --> crates/brush-app/src/app.rs:1311:37
     |
1311 | ...                   let js_window = web_sys::window().unwrap();
     |                           ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_js_window`

warning: unused variable: `view_aspect`
  --> crates/brush-app/src/panels/scene.rs:96:21
   |
96 |         if let Some(view_aspect) = context.view_aspect {
   |                     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_view_aspect`

warning: unused variable: `test_file`
  --> crates/brush-app/src/utils.rs:77:9
   |
77 |     let test_file = PathBuf::from("test_data/sample.ply");
   |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_test_file`

warning: unused variable: `context`
  --> crates/brush-app/src/utils.rs:72:27
   |
72 | pub fn auto_load_test_ply(context: &mut crate::app::AppContext) {
   |                           ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_context`

For more information about this error, try `rustc --explain E0599`.
warning: `brush-app` (lib) generated 20 warnings
error: could not compile `brush-app` (lib) due to 1 previous error; 20 warnings emitted
2025-03-19T19:22:32.631944Z ERROR ❌ error
error from build pipeline

Caused by:
    0: HTML build pipeline failed (1 errors), showing first
    1: error from asset pipeline
    2: running cargo build
    3: error during cargo build execution
    4: cargo call to executable 'cargo' with args: '["build", "--target=wasm32-unknown-unknown", "--manifest-path", "/Users/ryanhickman/code/brush/crates/brush-app/Cargo.toml"]' returned a bad status: exit status: 101
2025-03-19T19:22:32.632009Z  INFO 📦 starting build
warning: unused import: `std::io::Error`
 --> crates/rrfd/src/lib.rs:8:5
  |
8 | use std::io::Error;
  |     ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::io::ErrorKind`
 --> crates/rrfd/src/lib.rs:9:5
  |
9 | use std::io::ErrorKind;
  |     ^^^^^^^^^^^^^^^^^^

warning: `rrfd` (lib) generated 2 warnings (run `cargo fix --lib -p rrfd` to apply 2 suggestions)
warning: unused import: `std::path::Path`
 --> crates/brush-dataset/src/storage/mod.rs:7:5
  |
7 | use std::path::Path;
  |     ^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `DatasetInfo` and `StorageType`
 --> crates/brush-dataset/src/storage/indexed_db.rs:6:29
  |
6 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |                             ^^^^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `Path`
 --> crates/brush-dataset/src/storage/filesystem.rs:4:17
  |
4 | use std::path::{Path, PathBuf};
  |                 ^^^^

warning: unused import: `DatasetStorage`
 --> crates/brush-dataset/src/storage/filesystem.rs:7:13
  |
7 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |             ^^^^^^^^^^^^^^

warning: constant `DB_NAME` is never used
 --> crates/brush-dataset/src/storage/indexed_db.rs:9:7
  |
9 | const DB_NAME: &str = "brush_dataset_storage";
  |       ^^^^^^^
  |
  = note: `#[warn(dead_code)]` on by default

warning: constant `METADATA_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:10:7
   |
10 | const METADATA_STORE: &str = "metadata";
   |       ^^^^^^^^^^^^^^

warning: constant `DATASET_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:11:7
   |
11 | const DATASET_STORE: &str = "datasets";
   |       ^^^^^^^^^^^^^

warning: method `get_total_storage_used` is never used
   --> crates/brush-dataset/src/storage/filesystem.rs:126:8
    |
15  | impl FilesystemStorage {
    | ---------------------- method in this implementation
...
126 |     fn get_total_storage_used(&self) -> Result<u64> {
    |        ^^^^^^^^^^^^^^^^^^^^^^

warning: `brush-dataset` (lib) generated 8 warnings (run `cargo fix --lib -p brush-dataset` to apply 4 suggestions)
   Compiling brush-app v0.2.0 (/Users/ryanhickman/code/brush/crates/brush-app)
warning: unused import: `std::fmt::Debug`
  --> crates/brush-app/src/app.rs:26:5
   |
26 | use std::fmt::Debug;
   |     ^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::hash::Hash`
  --> crates/brush-app/src/app.rs:27:5
   |
27 | use std::hash::Hash;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `std::io::Error`
  --> crates/brush-app/src/app.rs:28:5
   |
28 | use std::io::Error;
   |     ^^^^^^^^^^^^^^

warning: unused import: `std::io::ErrorKind`
  --> crates/brush-app/src/app.rs:29:5
   |
29 | use std::io::ErrorKind;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
  --> crates/brush-app/src/app.rs:30:5
   |
30 | use std::pin::Pin;
   |     ^^^^^^^^^^^^^

warning: unused imports: `Duration` and `SystemTime`
  --> crates/brush-app/src/app.rs:32:17
   |
32 | use std::time::{Duration, SystemTime};
   |                 ^^^^^^^^  ^^^^^^^^^^

warning: unused imports: `Align2` and `RichText`
  --> crates/brush-app/src/app.rs:33:12
   |
33 | use egui::{Align2, RichText};
   |            ^^^^^^  ^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
  --> crates/brush-app/src/app.rs:34:5
   |
34 | use brush_dataset::splat_export;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ExportError` and `ExportFormat`
  --> crates/brush-app/src/app.rs:36:44
   |
36 | use crate::export_service::{ExportService, ExportError, ExportFormat};
   |                                            ^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `brush_dataset::storage`
  --> crates/brush-app/src/app.rs:37:5
   |
37 | use brush_dataset::storage;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
 --> crates/brush-app/src/panels/scene.rs:1:5
  |
1 | use brush_dataset::splat_export;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ControlMessage`
 --> crates/brush-app/src/panels/scene.rs:2:35
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                   ^^^^^^^^^^^^^^

warning: unused import: `tokio_with_wasm::alias as tokio_wasm`
  --> crates/brush-app/src/panels/scene.rs:17:5
   |
17 | use tokio_with_wasm::alias as tokio_wasm;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ProcessMessage`
 --> crates/brush-app/src/overlays/controls_detail.rs:2:51
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                                   ^^^^^^^^^^^^^^

warning: unused import: `std::sync::Once`
 --> crates/brush-app/src/utils.rs:2:5
  |
2 | use std::sync::Once;
  |     ^^^^^^^^^^^^^^^

error[E0599]: no method named `ok` found for enum `std::option::Option` in the current scope
   --> crates/brush-app/src/app.rs:873:22
    |
863 | /                 web_sys::window()
864 | |                     .and_then(|window| {
865 | |                         window
866 | |                             .add_event_listener_with_callback(
...   |
872 | |                     })
873 | |                     .ok();
    | |_____________________-^^
    |
help: there is a method `or` with a similar name, but with different arguments
   --> /rustc/4d91de4e48198da2e33413efdcd9cd2cc0c46688/library/core/src/option.rs:1524:5

warning: unused variable: `dataset_detail_overlay`
    --> crates/brush-app/src/app.rs:1279:21
     |
1279 |                 let dataset_detail_overlay = self.dataset_detail_overlay.clone();
     |                     ^^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dataset_detail_overlay`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `js_window`
    --> crates/brush-app/src/app.rs:1311:37
     |
1311 | ...                   let js_window = web_sys::window().unwrap();
     |                           ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_js_window`

warning: unused variable: `view_aspect`
  --> crates/brush-app/src/panels/scene.rs:96:21
   |
96 |         if let Some(view_aspect) = context.view_aspect {
   |                     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_view_aspect`

warning: unused variable: `test_file`
  --> crates/brush-app/src/utils.rs:77:9
   |
77 |     let test_file = PathBuf::from("test_data/sample.ply");
   |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_test_file`

warning: unused variable: `context`
  --> crates/brush-app/src/utils.rs:72:27
   |
72 | pub fn auto_load_test_ply(context: &mut crate::app::AppContext) {
   |                           ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_context`

For more information about this error, try `rustc --explain E0599`.
warning: `brush-app` (lib) generated 20 warnings
error: could not compile `brush-app` (lib) due to 1 previous error; 20 warnings emitted
2025-03-19T19:22:33.853066Z ERROR ❌ error
error from build pipeline

Caused by:
    0: HTML build pipeline failed (1 errors), showing first
    1: error from asset pipeline
    2: running cargo build
    3: error during cargo build execution
    4: cargo call to executable 'cargo' with args: '["build", "--target=wasm32-unknown-unknown", "--manifest-path", "/Users/ryanhickman/code/brush/crates/brush-app/Cargo.toml"]' returned a bad status: exit status: 101
2025-03-19T19:22:41.797340Z  INFO 📦 starting build
warning: unused import: `std::path::Path`
 --> crates/brush-dataset/src/storage/mod.rs:7:5
  |
7 | use std::path::Path;
  |     ^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `DatasetInfo` and `StorageType`
 --> crates/brush-dataset/src/storage/indexed_db.rs:6:29
  |
6 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |                             ^^^^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `Path`
 --> crates/brush-dataset/src/storage/filesystem.rs:4:17
  |
4 | use std::path::{Path, PathBuf};
  |                 ^^^^

warning: unused import: `DatasetStorage`
 --> crates/brush-dataset/src/storage/filesystem.rs:7:13
  |
7 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |             ^^^^^^^^^^^^^^

warning: constant `DB_NAME` is never used
 --> crates/brush-dataset/src/storage/indexed_db.rs:9:7
  |
9 | const DB_NAME: &str = "brush_dataset_storage";
  |       ^^^^^^^
  |
  = note: `#[warn(dead_code)]` on by default

warning: constant `METADATA_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:10:7
   |
10 | const METADATA_STORE: &str = "metadata";
   |       ^^^^^^^^^^^^^^

warning: constant `DATASET_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:11:7
   |
11 | const DATASET_STORE: &str = "datasets";
   |       ^^^^^^^^^^^^^

warning: method `get_total_storage_used` is never used
   --> crates/brush-dataset/src/storage/filesystem.rs:126:8
    |
15  | impl FilesystemStorage {
    | ---------------------- method in this implementation
...
126 |     fn get_total_storage_used(&self) -> Result<u64> {
    |        ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::io::Error`
 --> crates/rrfd/src/lib.rs:8:5
  |
8 | use std::io::Error;
  |     ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::io::ErrorKind`
 --> crates/rrfd/src/lib.rs:9:5
  |
9 | use std::io::ErrorKind;
  |     ^^^^^^^^^^^^^^^^^^

warning: `brush-dataset` (lib) generated 8 warnings (run `cargo fix --lib -p brush-dataset` to apply 4 suggestions)
warning: `rrfd` (lib) generated 2 warnings (run `cargo fix --lib -p rrfd` to apply 2 suggestions)
   Compiling brush-app v0.2.0 (/Users/ryanhickman/code/brush/crates/brush-app)
warning: unused import: `std::fmt::Debug`
  --> crates/brush-app/src/app.rs:26:5
   |
26 | use std::fmt::Debug;
   |     ^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::hash::Hash`
  --> crates/brush-app/src/app.rs:27:5
   |
27 | use std::hash::Hash;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `std::io::Error`
  --> crates/brush-app/src/app.rs:28:5
   |
28 | use std::io::Error;
   |     ^^^^^^^^^^^^^^

warning: unused import: `std::io::ErrorKind`
  --> crates/brush-app/src/app.rs:29:5
   |
29 | use std::io::ErrorKind;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
  --> crates/brush-app/src/app.rs:30:5
   |
30 | use std::pin::Pin;
   |     ^^^^^^^^^^^^^

warning: unused imports: `Duration` and `SystemTime`
  --> crates/brush-app/src/app.rs:32:17
   |
32 | use std::time::{Duration, SystemTime};
   |                 ^^^^^^^^  ^^^^^^^^^^

warning: unused imports: `Align2` and `RichText`
  --> crates/brush-app/src/app.rs:33:12
   |
33 | use egui::{Align2, RichText};
   |            ^^^^^^  ^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
  --> crates/brush-app/src/app.rs:34:5
   |
34 | use brush_dataset::splat_export;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ExportError` and `ExportFormat`
  --> crates/brush-app/src/app.rs:36:44
   |
36 | use crate::export_service::{ExportService, ExportError, ExportFormat};
   |                                            ^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `brush_dataset::storage`
  --> crates/brush-app/src/app.rs:37:5
   |
37 | use brush_dataset::storage;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
 --> crates/brush-app/src/panels/scene.rs:1:5
  |
1 | use brush_dataset::splat_export;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ControlMessage`
 --> crates/brush-app/src/panels/scene.rs:2:35
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                   ^^^^^^^^^^^^^^

warning: unused import: `tokio_with_wasm::alias as tokio_wasm`
  --> crates/brush-app/src/panels/scene.rs:17:5
   |
17 | use tokio_with_wasm::alias as tokio_wasm;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ProcessMessage`
 --> crates/brush-app/src/overlays/controls_detail.rs:2:51
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                                   ^^^^^^^^^^^^^^

warning: unused import: `std::sync::Once`
 --> crates/brush-app/src/utils.rs:2:5
  |
2 | use std::sync::Once;
  |     ^^^^^^^^^^^^^^^

warning: unused variable: `dataset_detail_overlay`
    --> crates/brush-app/src/app.rs:1274:21
     |
1274 |                 let dataset_detail_overlay = self.dataset_detail_overlay.clone();
     |                     ^^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dataset_detail_overlay`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `js_window`
    --> crates/brush-app/src/app.rs:1306:37
     |
1306 | ...                   let js_window = web_sys::window().unwrap();
     |                           ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_js_window`

warning: unused variable: `view_aspect`
  --> crates/brush-app/src/panels/scene.rs:96:21
   |
96 |         if let Some(view_aspect) = context.view_aspect {
   |                     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_view_aspect`

warning: unused variable: `test_file`
  --> crates/brush-app/src/utils.rs:77:9
   |
77 |     let test_file = PathBuf::from("test_data/sample.ply");
   |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_test_file`

warning: unused variable: `context`
  --> crates/brush-app/src/utils.rs:72:27
   |
72 | pub fn auto_load_test_ply(context: &mut crate::app::AppContext) {
   |                           ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_context`

warning: function `parse_search` is never used
   --> crates/brush-app/src/app.rs:103:4
    |
103 | fn parse_search(search: &str) -> HashMap<String, String> {
    |    ^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: method `get_scene_panel_mut` is never used
   --> crates/brush-app/src/app.rs:581:8
    |
166 | impl AppContext {
    | --------------- method in this implementation
...
581 |     fn get_scene_panel_mut(&mut self) -> Option<&mut ScenePanel> {
    |        ^^^^^^^^^^^^^^^^^^^

warning: field `default_format` is never read
  --> crates/brush-app/src/export_service.rs:74:5
   |
69 | pub struct ExportService {
   |            ------------- field in this struct
...
74 |     default_format: ExportFormat,
   |     ^^^^^^^^^^^^^^
   |
   = note: `ExportService` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: struct `SettingsPanel` is never constructed
  --> crates/brush-app/src/panels/settings.rs:10:19
   |
10 | pub(crate) struct SettingsPanel {
   |                   ^^^^^^^^^^^^^

warning: associated function `new` is never used
  --> crates/brush-app/src/panels/settings.rs:16:19
   |
15 | impl SettingsPanel {
   | ------------------ associated function in this implementation
16 |     pub(crate) fn new() -> Self {
   |                   ^^^

warning: struct `PresetsPanel` is never constructed
 --> crates/brush-app/src/panels/presets.rs:5:19
  |
5 | pub(crate) struct PresetsPanel {}
  |                   ^^^^^^^^^^^^

warning: associated function `new` is never used
 --> crates/brush-app/src/panels/presets.rs:8:19
  |
7 | impl PresetsPanel {
  | ----------------- associated function in this implementation
8 |     pub(crate) fn new() -> Self {
  |                   ^^^

warning: function `url_button` is never used
  --> crates/brush-app/src/panels/presets.rs:13:4
   |
13 | fn url_button(label: &str, url: &str, ui: &mut egui::Ui) {
   |    ^^^^^^^^^^

warning: struct `StatsPanel` is never constructed
  --> crates/brush-app/src/panels/stats.rs:10:19
   |
10 | pub(crate) struct StatsPanel {
   |                   ^^^^^^^^^^

warning: associated function `new` is never used
  --> crates/brush-app/src/panels/stats.rs:27:19
   |
26 | impl StatsPanel {
   | --------------- associated function in this implementation
27 |     pub(crate) fn new(device: WgpuDevice, adapter_info: AdapterInfo) -> Self {
   |                   ^^^

warning: function `bytes_format` is never used
  --> crates/brush-app/src/panels/stats.rs:43:4
   |
43 | fn bytes_format(bytes: u64) -> String {
   |    ^^^^^^^^^^^^

warning: fields `index`, `view_type`, and `texture_handle` are never read
  --> crates/brush-app/src/overlays/dataset_detail.rs:18:5
   |
17 | struct SelectedView {
   |        ------------ fields in this struct
18 |     index: usize,
   |     ^^^^^
19 |     view_type: ViewType,
   |     ^^^^^^^^^
20 |     texture_handle: TextureHandle,
   |     ^^^^^^^^^^^^^^
   |
   = note: `SelectedView` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: function `selected_scene` is never used
  --> crates/brush-app/src/overlays/dataset_detail.rs:32:4
   |
32 | fn selected_scene(t: ViewType, context: &AppContext) -> &Scene {
   |    ^^^^^^^^^^^^^^

warning: method `get_view` is never used
  --> crates/brush-app/src/overlays/dataset_detail.rs:44:8
   |
43 | impl SelectedView {
   | ----------------- method in this implementation
44 |     fn get_view<'a>(&'a self, context: &'a AppContext) -> &'a SceneView {
   |        ^^^^^^^^

warning: function `url_button` is never used
  --> crates/brush-app/src/overlays/dataset_detail.rs:86:4
   |
86 | fn url_button(label: &str, url: &str, ui: &mut egui::Ui) {
   |    ^^^^^^^^^^

warning: multiple methods are never used
    --> crates/brush-app/src/overlays/dataset_detail.rs:172:19
     |
90   | impl DatasetDetailOverlay {
     | ------------------------- methods in this implementation
...
172  |     pub(crate) fn set_selected_folder(&mut self, folder: PathBuf) {
     |                   ^^^^^^^^^^^^^^^^^^^
...
362  |     pub(crate) fn wants_to_select_folder(&self) -> bool {
     |                   ^^^^^^^^^^^^^^^^^^^^^^
...
367  |     pub(crate) fn folder_selection_started(&mut self) {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^
...
372  |     pub(crate) fn cancel_folder_selection(&mut self) {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^
...
402  |     pub(crate) fn set_selected_file(&mut self, file_path: PathBuf) {
     |                   ^^^^^^^^^^^^^^^^^
...
575  |     fn copy_file_as_is(&mut self, file_path: &PathBuf, _dataset_folder: &PathBuf) {
     |        ^^^^^^^^^^^^^^^
...
1335 |     fn copy_folder(&self, source_folder: &PathBuf, dest_folder: &PathBuf) -> io::Result<()> {
     |        ^^^^^^^^^^^
...
1358 |     pub(crate) fn wants_to_select_dataset_folder(&self) -> bool {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1362 |     pub(crate) fn dataset_folder_selection_started(&mut self) {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1367 |     pub(crate) fn cancel_dataset_folder_selection(&mut self) {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1378 |     pub(crate) fn set_selected_dataset_folder(&mut self, folder_path: PathBuf) {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1443 |     fn process_selected_dataset_folder(&mut self, folder_path: PathBuf, dataset_folder: PathBuf) {
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1576 |     pub(crate) fn copy_datasets_to_local(&self) -> bool {
     |                   ^^^^^^^^^^^^^^^^^^^^^^
...
1582 |     pub(crate) fn set_copy_datasets_to_local(&mut self, should_copy: bool) {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1596 |     pub(crate) fn get_datasets_folder(&self) -> Option<PathBuf> {
     |                   ^^^^^^^^^^^^^^^^^^^
...
1629 |     pub(crate) fn set_selected_folders(&mut self, folder_paths: Vec<PathBuf>) {
     |                   ^^^^^^^^^^^^^^^^^^^^

warning: field `url` is never read
  --> crates/brush-app/src/overlays/settings_detail.rs:14:5
   |
11 | pub(crate) struct SettingsDetailOverlay {
   |                   --------------------- field in this struct
...
14 |     url: String,
   |     ^^^

warning: field `gpu_stats` is never read
  --> crates/brush-app/src/overlays/stats_detail.rs:22:5
   |
10 | pub(crate) struct StatsDetailOverlay {
   |                   ------------------ field in this struct
...
22 |     gpu_stats: GpuStats,
   |     ^^^^^^^^^

warning: methods `get_live_update`, `set_live_update`, `get_paused`, and `set_paused` are never used
   --> crates/brush-app/src/overlays/controls_detail.rs:195:19
    |
16  | impl ControlsDetailOverlay {
    | -------------------------- methods in this implementation
...
195 |     pub(crate) fn get_live_update(&self) -> bool {
    |                   ^^^^^^^^^^^^^^^
...
199 |     pub(crate) fn set_live_update(&mut self, live_update: bool) {
    |                   ^^^^^^^^^^^^^^^
...
203 |     pub(crate) fn get_paused(&self) -> bool {
    |                   ^^^^^^^^^^
...
207 |     pub(crate) fn set_paused(&mut self, paused: bool) {
    |                   ^^^^^^^^^^

warning: `brush-app` (lib) generated 39 warnings (run `cargo fix --lib -p brush-app` to apply 15 suggestions)
warning: unused import: `brush_app::app::AppCreateCb`
 --> crates/brush-app/src/bin/bin.rs:5:5
  |
5 | use brush_app::app::AppCreateCb;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `wgpu_options`
   --> crates/brush-app/src/bin/bin.rs:190:17
    |
190 |             let wgpu_options = brush_ui::create_egui_options();
    |                 ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_wgpu_options`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: constant `BUILD_TIME` is never used
  --> crates/brush-app/src/bin/bin.rs:19:7
   |
19 | const BUILD_TIME: &str = "2025-03-17 (manual)";
   |       ^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: `brush-app` (bin "brush_app") generated 3 warnings (run `cargo fix --bin "brush_app"` to apply 1 suggestion)
    Finished `dev` profile [optimized + debuginfo] target(s) in 5.22s
2025-03-19T19:22:48.757065Z  INFO applying new distribution
2025-03-19T19:22:48.759471Z  INFO ✅ success
2025-03-19T19:22:57.347066Z  INFO 📦 starting build
warning: unused import: `std::io::Error`
 --> crates/rrfd/src/lib.rs:8:5
  |
8 | use std::io::Error;
  |     ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::io::ErrorKind`
 --> crates/rrfd/src/lib.rs:9:5
  |
9 | use std::io::ErrorKind;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::path::Path`
 --> crates/brush-dataset/src/storage/mod.rs:7:5
  |
7 | use std::path::Path;
  |     ^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `DatasetInfo` and `StorageType`
 --> crates/brush-dataset/src/storage/indexed_db.rs:6:29
  |
6 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |                             ^^^^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `Path`
 --> crates/brush-dataset/src/storage/filesystem.rs:4:17
  |
4 | use std::path::{Path, PathBuf};
  |                 ^^^^

warning: unused import: `DatasetStorage`
 --> crates/brush-dataset/src/storage/filesystem.rs:7:13
  |
7 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |             ^^^^^^^^^^^^^^

warning: constant `DB_NAME` is never used
 --> crates/brush-dataset/src/storage/indexed_db.rs:9:7
  |
9 | const DB_NAME: &str = "brush_dataset_storage";
  |       ^^^^^^^
  |
  = note: `#[warn(dead_code)]` on by default

warning: constant `METADATA_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:10:7
   |
10 | const METADATA_STORE: &str = "metadata";
   |       ^^^^^^^^^^^^^^

warning: constant `DATASET_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:11:7
   |
11 | const DATASET_STORE: &str = "datasets";
   |       ^^^^^^^^^^^^^

warning: method `get_total_storage_used` is never used
   --> crates/brush-dataset/src/storage/filesystem.rs:126:8
    |
15  | impl FilesystemStorage {
    | ---------------------- method in this implementation
...
126 |     fn get_total_storage_used(&self) -> Result<u64> {
    |        ^^^^^^^^^^^^^^^^^^^^^^

warning: `rrfd` (lib) generated 2 warnings (run `cargo fix --lib -p rrfd` to apply 2 suggestions)
warning: `brush-dataset` (lib) generated 8 warnings (run `cargo fix --lib -p brush-dataset` to apply 4 suggestions)
   Compiling brush-app v0.2.0 (/Users/ryanhickman/code/brush/crates/brush-app)
warning: unused import: `std::fmt::Debug`
  --> crates/brush-app/src/app.rs:26:5
   |
26 | use std::fmt::Debug;
   |     ^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::hash::Hash`
  --> crates/brush-app/src/app.rs:27:5
   |
27 | use std::hash::Hash;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `std::io::Error`
  --> crates/brush-app/src/app.rs:28:5
   |
28 | use std::io::Error;
   |     ^^^^^^^^^^^^^^

warning: unused import: `std::io::ErrorKind`
  --> crates/brush-app/src/app.rs:29:5
   |
29 | use std::io::ErrorKind;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
  --> crates/brush-app/src/app.rs:30:5
   |
30 | use std::pin::Pin;
   |     ^^^^^^^^^^^^^

warning: unused imports: `Duration` and `SystemTime`
  --> crates/brush-app/src/app.rs:32:17
   |
32 | use std::time::{Duration, SystemTime};
   |                 ^^^^^^^^  ^^^^^^^^^^

warning: unused imports: `Align2` and `RichText`
  --> crates/brush-app/src/app.rs:33:12
   |
33 | use egui::{Align2, RichText};
   |            ^^^^^^  ^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
  --> crates/brush-app/src/app.rs:34:5
   |
34 | use brush_dataset::splat_export;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ExportError` and `ExportFormat`
  --> crates/brush-app/src/app.rs:36:44
   |
36 | use crate::export_service::{ExportService, ExportError, ExportFormat};
   |                                            ^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `brush_dataset::storage`
  --> crates/brush-app/src/app.rs:37:5
   |
37 | use brush_dataset::storage;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
 --> crates/brush-app/src/panels/scene.rs:1:5
  |
1 | use brush_dataset::splat_export;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ControlMessage`
 --> crates/brush-app/src/panels/scene.rs:2:35
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                   ^^^^^^^^^^^^^^

warning: unused import: `tokio_with_wasm::alias as tokio_wasm`
  --> crates/brush-app/src/panels/scene.rs:17:5
   |
17 | use tokio_with_wasm::alias as tokio_wasm;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ProcessMessage`
 --> crates/brush-app/src/overlays/controls_detail.rs:2:51
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                                   ^^^^^^^^^^^^^^

warning: unused import: `std::sync::Once`
 --> crates/brush-app/src/utils.rs:2:5
  |
2 | use std::sync::Once;
  |     ^^^^^^^^^^^^^^^

warning: unused variable: `view_aspect`
  --> crates/brush-app/src/panels/scene.rs:96:21
   |
96 |         if let Some(view_aspect) = context.view_aspect {
   |                     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_view_aspect`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `test_file`
  --> crates/brush-app/src/utils.rs:77:9
   |
77 |     let test_file = PathBuf::from("test_data/sample.ply");
   |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_test_file`

warning: unused variable: `context`
  --> crates/brush-app/src/utils.rs:72:27
   |
72 | pub fn auto_load_test_ply(context: &mut crate::app::AppContext) {
   |                           ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_context`

warning: function `parse_search` is never used
   --> crates/brush-app/src/app.rs:103:4
    |
103 | fn parse_search(search: &str) -> HashMap<String, String> {
    |    ^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: method `get_scene_panel_mut` is never used
   --> crates/brush-app/src/app.rs:581:8
    |
166 | impl AppContext {
    | --------------- method in this implementation
...
581 |     fn get_scene_panel_mut(&mut self) -> Option<&mut ScenePanel> {
    |        ^^^^^^^^^^^^^^^^^^^

warning: field `default_format` is never read
  --> crates/brush-app/src/export_service.rs:74:5
   |
69 | pub struct ExportService {
   |            ------------- field in this struct
...
74 |     default_format: ExportFormat,
   |     ^^^^^^^^^^^^^^
   |
   = note: `ExportService` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: struct `SettingsPanel` is never constructed
  --> crates/brush-app/src/panels/settings.rs:10:19
   |
10 | pub(crate) struct SettingsPanel {
   |                   ^^^^^^^^^^^^^

warning: associated function `new` is never used
  --> crates/brush-app/src/panels/settings.rs:16:19
   |
15 | impl SettingsPanel {
   | ------------------ associated function in this implementation
16 |     pub(crate) fn new() -> Self {
   |                   ^^^

warning: struct `PresetsPanel` is never constructed
 --> crates/brush-app/src/panels/presets.rs:5:19
  |
5 | pub(crate) struct PresetsPanel {}
  |                   ^^^^^^^^^^^^

warning: associated function `new` is never used
 --> crates/brush-app/src/panels/presets.rs:8:19
  |
7 | impl PresetsPanel {
  | ----------------- associated function in this implementation
8 |     pub(crate) fn new() -> Self {
  |                   ^^^

warning: function `url_button` is never used
  --> crates/brush-app/src/panels/presets.rs:13:4
   |
13 | fn url_button(label: &str, url: &str, ui: &mut egui::Ui) {
   |    ^^^^^^^^^^

warning: struct `StatsPanel` is never constructed
  --> crates/brush-app/src/panels/stats.rs:10:19
   |
10 | pub(crate) struct StatsPanel {
   |                   ^^^^^^^^^^

warning: associated function `new` is never used
  --> crates/brush-app/src/panels/stats.rs:27:19
   |
26 | impl StatsPanel {
   | --------------- associated function in this implementation
27 |     pub(crate) fn new(device: WgpuDevice, adapter_info: AdapterInfo) -> Self {
   |                   ^^^

warning: function `bytes_format` is never used
  --> crates/brush-app/src/panels/stats.rs:43:4
   |
43 | fn bytes_format(bytes: u64) -> String {
   |    ^^^^^^^^^^^^

warning: fields `index`, `view_type`, and `texture_handle` are never read
  --> crates/brush-app/src/overlays/dataset_detail.rs:18:5
   |
17 | struct SelectedView {
   |        ------------ fields in this struct
18 |     index: usize,
   |     ^^^^^
19 |     view_type: ViewType,
   |     ^^^^^^^^^
20 |     texture_handle: TextureHandle,
   |     ^^^^^^^^^^^^^^
   |
   = note: `SelectedView` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: function `selected_scene` is never used
  --> crates/brush-app/src/overlays/dataset_detail.rs:32:4
   |
32 | fn selected_scene(t: ViewType, context: &AppContext) -> &Scene {
   |    ^^^^^^^^^^^^^^

warning: method `get_view` is never used
  --> crates/brush-app/src/overlays/dataset_detail.rs:44:8
   |
43 | impl SelectedView {
   | ----------------- method in this implementation
44 |     fn get_view<'a>(&'a self, context: &'a AppContext) -> &'a SceneView {
   |        ^^^^^^^^

warning: function `url_button` is never used
  --> crates/brush-app/src/overlays/dataset_detail.rs:86:4
   |
86 | fn url_button(label: &str, url: &str, ui: &mut egui::Ui) {
   |    ^^^^^^^^^^

warning: multiple methods are never used
    --> crates/brush-app/src/overlays/dataset_detail.rs:172:19
     |
90   | impl DatasetDetailOverlay {
     | ------------------------- methods in this implementation
...
172  |     pub(crate) fn set_selected_folder(&mut self, folder: PathBuf) {
     |                   ^^^^^^^^^^^^^^^^^^^
...
362  |     pub(crate) fn wants_to_select_folder(&self) -> bool {
     |                   ^^^^^^^^^^^^^^^^^^^^^^
...
367  |     pub(crate) fn folder_selection_started(&mut self) {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^
...
372  |     pub(crate) fn cancel_folder_selection(&mut self) {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^
...
402  |     pub(crate) fn set_selected_file(&mut self, file_path: PathBuf) {
     |                   ^^^^^^^^^^^^^^^^^
...
575  |     fn copy_file_as_is(&mut self, file_path: &PathBuf, _dataset_folder: &PathBuf) {
     |        ^^^^^^^^^^^^^^^
...
1335 |     fn copy_folder(&self, source_folder: &PathBuf, dest_folder: &PathBuf) -> io::Result<()> {
     |        ^^^^^^^^^^^
...
1358 |     pub(crate) fn wants_to_select_dataset_folder(&self) -> bool {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1362 |     pub(crate) fn dataset_folder_selection_started(&mut self) {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1367 |     pub(crate) fn cancel_dataset_folder_selection(&mut self) {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1378 |     pub(crate) fn set_selected_dataset_folder(&mut self, folder_path: PathBuf) {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1443 |     fn process_selected_dataset_folder(&mut self, folder_path: PathBuf, dataset_folder: PathBuf) {
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1576 |     pub(crate) fn copy_datasets_to_local(&self) -> bool {
     |                   ^^^^^^^^^^^^^^^^^^^^^^
...
1582 |     pub(crate) fn set_copy_datasets_to_local(&mut self, should_copy: bool) {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1596 |     pub(crate) fn get_datasets_folder(&self) -> Option<PathBuf> {
     |                   ^^^^^^^^^^^^^^^^^^^
...
1629 |     pub(crate) fn set_selected_folders(&mut self, folder_paths: Vec<PathBuf>) {
     |                   ^^^^^^^^^^^^^^^^^^^^

warning: field `url` is never read
  --> crates/brush-app/src/overlays/settings_detail.rs:14:5
   |
11 | pub(crate) struct SettingsDetailOverlay {
   |                   --------------------- field in this struct
...
14 |     url: String,
   |     ^^^

warning: field `gpu_stats` is never read
  --> crates/brush-app/src/overlays/stats_detail.rs:22:5
   |
10 | pub(crate) struct StatsDetailOverlay {
   |                   ------------------ field in this struct
...
22 |     gpu_stats: GpuStats,
   |     ^^^^^^^^^

warning: methods `get_live_update`, `set_live_update`, `get_paused`, and `set_paused` are never used
   --> crates/brush-app/src/overlays/controls_detail.rs:195:19
    |
16  | impl ControlsDetailOverlay {
    | -------------------------- methods in this implementation
...
195 |     pub(crate) fn get_live_update(&self) -> bool {
    |                   ^^^^^^^^^^^^^^^
...
199 |     pub(crate) fn set_live_update(&mut self, live_update: bool) {
    |                   ^^^^^^^^^^^^^^^
...
203 |     pub(crate) fn get_paused(&self) -> bool {
    |                   ^^^^^^^^^^
...
207 |     pub(crate) fn set_paused(&mut self, paused: bool) {
    |                   ^^^^^^^^^^

warning: `brush-app` (lib) generated 37 warnings (run `cargo fix --lib -p brush-app` to apply 15 suggestions)
warning: unused import: `brush_app::app::AppCreateCb`
 --> crates/brush-app/src/bin/bin.rs:5:5
  |
5 | use brush_app::app::AppCreateCb;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `wgpu_options`
   --> crates/brush-app/src/bin/bin.rs:190:17
    |
190 |             let wgpu_options = brush_ui::create_egui_options();
    |                 ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_wgpu_options`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: constant `BUILD_TIME` is never used
  --> crates/brush-app/src/bin/bin.rs:19:7
   |
19 | const BUILD_TIME: &str = "2025-03-17 (manual)";
   |       ^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: `brush-app` (bin "brush_app") generated 3 warnings (run `cargo fix --bin "brush_app"` to apply 1 suggestion)
    Finished `dev` profile [optimized + debuginfo] target(s) in 2.66s
2025-03-19T19:23:01.708733Z  INFO applying new distribution
2025-03-19T19:23:01.710801Z  INFO ✅ success
2025-03-19T19:23:06.162942Z  INFO 📦 starting build
warning: unused import: `std::path::Path`
 --> crates/brush-dataset/src/storage/mod.rs:7:5
  |
7 | use std::path::Path;
  |     ^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `DatasetInfo` and `StorageType`
 --> crates/brush-dataset/src/storage/indexed_db.rs:6:29
  |
6 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |                             ^^^^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `Path`
 --> crates/brush-dataset/src/storage/filesystem.rs:4:17
  |
4 | use std::path::{Path, PathBuf};
  |                 ^^^^

warning: unused import: `DatasetStorage`
 --> crates/brush-dataset/src/storage/filesystem.rs:7:13
  |
7 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |             ^^^^^^^^^^^^^^

warning: constant `DB_NAME` is never used
 --> crates/brush-dataset/src/storage/indexed_db.rs:9:7
  |
9 | const DB_NAME: &str = "brush_dataset_storage";
  |       ^^^^^^^
  |
  = note: `#[warn(dead_code)]` on by default

warning: constant `METADATA_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:10:7
   |
10 | const METADATA_STORE: &str = "metadata";
   |       ^^^^^^^^^^^^^^

warning: constant `DATASET_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:11:7
   |
11 | const DATASET_STORE: &str = "datasets";
   |       ^^^^^^^^^^^^^

warning: method `get_total_storage_used` is never used
   --> crates/brush-dataset/src/storage/filesystem.rs:126:8
    |
15  | impl FilesystemStorage {
    | ---------------------- method in this implementation
...
126 |     fn get_total_storage_used(&self) -> Result<u64> {
    |        ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::io::Error`
 --> crates/rrfd/src/lib.rs:8:5
  |
8 | use std::io::Error;
  |     ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::io::ErrorKind`
 --> crates/rrfd/src/lib.rs:9:5
  |
9 | use std::io::ErrorKind;
  |     ^^^^^^^^^^^^^^^^^^

warning: `brush-dataset` (lib) generated 8 warnings (run `cargo fix --lib -p brush-dataset` to apply 4 suggestions)
warning: `rrfd` (lib) generated 2 warnings (run `cargo fix --lib -p rrfd` to apply 2 suggestions)
   Compiling brush-app v0.2.0 (/Users/ryanhickman/code/brush/crates/brush-app)
warning: unused import: `std::fmt::Debug`
  --> crates/brush-app/src/app.rs:26:5
   |
26 | use std::fmt::Debug;
   |     ^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::hash::Hash`
  --> crates/brush-app/src/app.rs:27:5
   |
27 | use std::hash::Hash;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `std::io::Error`
  --> crates/brush-app/src/app.rs:28:5
   |
28 | use std::io::Error;
   |     ^^^^^^^^^^^^^^

warning: unused import: `std::io::ErrorKind`
  --> crates/brush-app/src/app.rs:29:5
   |
29 | use std::io::ErrorKind;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
  --> crates/brush-app/src/app.rs:30:5
   |
30 | use std::pin::Pin;
   |     ^^^^^^^^^^^^^

warning: unused imports: `Duration` and `SystemTime`
  --> crates/brush-app/src/app.rs:32:17
   |
32 | use std::time::{Duration, SystemTime};
   |                 ^^^^^^^^  ^^^^^^^^^^

warning: unused imports: `Align2` and `RichText`
  --> crates/brush-app/src/app.rs:33:12
   |
33 | use egui::{Align2, RichText};
   |            ^^^^^^  ^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
  --> crates/brush-app/src/app.rs:34:5
   |
34 | use brush_dataset::splat_export;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ExportError` and `ExportFormat`
  --> crates/brush-app/src/app.rs:36:44
   |
36 | use crate::export_service::{ExportService, ExportError, ExportFormat};
   |                                            ^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `brush_dataset::storage`
  --> crates/brush-app/src/app.rs:37:5
   |
37 | use brush_dataset::storage;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
 --> crates/brush-app/src/panels/scene.rs:1:5
  |
1 | use brush_dataset::splat_export;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ControlMessage`
 --> crates/brush-app/src/panels/scene.rs:2:35
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                   ^^^^^^^^^^^^^^

warning: unused import: `tokio_with_wasm::alias as tokio_wasm`
  --> crates/brush-app/src/panels/scene.rs:17:5
   |
17 | use tokio_with_wasm::alias as tokio_wasm;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ProcessMessage`
 --> crates/brush-app/src/overlays/controls_detail.rs:2:51
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                                   ^^^^^^^^^^^^^^

warning: unused import: `std::sync::Once`
 --> crates/brush-app/src/utils.rs:2:5
  |
2 | use std::sync::Once;
  |     ^^^^^^^^^^^^^^^

warning: unused variable: `view_aspect`
  --> crates/brush-app/src/panels/scene.rs:96:21
   |
96 |         if let Some(view_aspect) = context.view_aspect {
   |                     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_view_aspect`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `test_file`
  --> crates/brush-app/src/utils.rs:77:9
   |
77 |     let test_file = PathBuf::from("test_data/sample.ply");
   |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_test_file`

warning: unused variable: `context`
  --> crates/brush-app/src/utils.rs:72:27
   |
72 | pub fn auto_load_test_ply(context: &mut crate::app::AppContext) {
   |                           ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_context`

warning: function `parse_search` is never used
   --> crates/brush-app/src/app.rs:103:4
    |
103 | fn parse_search(search: &str) -> HashMap<String, String> {
    |    ^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: method `get_scene_panel_mut` is never used
   --> crates/brush-app/src/app.rs:581:8
    |
166 | impl AppContext {
    | --------------- method in this implementation
...
581 |     fn get_scene_panel_mut(&mut self) -> Option<&mut ScenePanel> {
    |        ^^^^^^^^^^^^^^^^^^^

warning: field `default_format` is never read
  --> crates/brush-app/src/export_service.rs:74:5
   |
69 | pub struct ExportService {
   |            ------------- field in this struct
...
74 |     default_format: ExportFormat,
   |     ^^^^^^^^^^^^^^
   |
   = note: `ExportService` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: struct `SettingsPanel` is never constructed
  --> crates/brush-app/src/panels/settings.rs:10:19
   |
10 | pub(crate) struct SettingsPanel {
   |                   ^^^^^^^^^^^^^

warning: associated function `new` is never used
  --> crates/brush-app/src/panels/settings.rs:16:19
   |
15 | impl SettingsPanel {
   | ------------------ associated function in this implementation
16 |     pub(crate) fn new() -> Self {
   |                   ^^^

warning: struct `PresetsPanel` is never constructed
 --> crates/brush-app/src/panels/presets.rs:5:19
  |
5 | pub(crate) struct PresetsPanel {}
  |                   ^^^^^^^^^^^^

warning: associated function `new` is never used
 --> crates/brush-app/src/panels/presets.rs:8:19
  |
7 | impl PresetsPanel {
  | ----------------- associated function in this implementation
8 |     pub(crate) fn new() -> Self {
  |                   ^^^

warning: function `url_button` is never used
  --> crates/brush-app/src/panels/presets.rs:13:4
   |
13 | fn url_button(label: &str, url: &str, ui: &mut egui::Ui) {
   |    ^^^^^^^^^^

warning: struct `StatsPanel` is never constructed
  --> crates/brush-app/src/panels/stats.rs:10:19
   |
10 | pub(crate) struct StatsPanel {
   |                   ^^^^^^^^^^

warning: associated function `new` is never used
  --> crates/brush-app/src/panels/stats.rs:27:19
   |
26 | impl StatsPanel {
   | --------------- associated function in this implementation
27 |     pub(crate) fn new(device: WgpuDevice, adapter_info: AdapterInfo) -> Self {
   |                   ^^^

warning: function `bytes_format` is never used
  --> crates/brush-app/src/panels/stats.rs:43:4
   |
43 | fn bytes_format(bytes: u64) -> String {
   |    ^^^^^^^^^^^^

warning: fields `index`, `view_type`, and `texture_handle` are never read
  --> crates/brush-app/src/overlays/dataset_detail.rs:18:5
   |
17 | struct SelectedView {
   |        ------------ fields in this struct
18 |     index: usize,
   |     ^^^^^
19 |     view_type: ViewType,
   |     ^^^^^^^^^
20 |     texture_handle: TextureHandle,
   |     ^^^^^^^^^^^^^^
   |
   = note: `SelectedView` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: function `selected_scene` is never used
  --> crates/brush-app/src/overlays/dataset_detail.rs:32:4
   |
32 | fn selected_scene(t: ViewType, context: &AppContext) -> &Scene {
   |    ^^^^^^^^^^^^^^

warning: method `get_view` is never used
  --> crates/brush-app/src/overlays/dataset_detail.rs:44:8
   |
43 | impl SelectedView {
   | ----------------- method in this implementation
44 |     fn get_view<'a>(&'a self, context: &'a AppContext) -> &'a SceneView {
   |        ^^^^^^^^

warning: function `url_button` is never used
  --> crates/brush-app/src/overlays/dataset_detail.rs:86:4
   |
86 | fn url_button(label: &str, url: &str, ui: &mut egui::Ui) {
   |    ^^^^^^^^^^

warning: multiple methods are never used
    --> crates/brush-app/src/overlays/dataset_detail.rs:172:19
     |
90   | impl DatasetDetailOverlay {
     | ------------------------- methods in this implementation
...
172  |     pub(crate) fn set_selected_folder(&mut self, folder: PathBuf) {
     |                   ^^^^^^^^^^^^^^^^^^^
...
362  |     pub(crate) fn wants_to_select_folder(&self) -> bool {
     |                   ^^^^^^^^^^^^^^^^^^^^^^
...
367  |     pub(crate) fn folder_selection_started(&mut self) {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^
...
372  |     pub(crate) fn cancel_folder_selection(&mut self) {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^
...
402  |     pub(crate) fn set_selected_file(&mut self, file_path: PathBuf) {
     |                   ^^^^^^^^^^^^^^^^^
...
575  |     fn copy_file_as_is(&mut self, file_path: &PathBuf, _dataset_folder: &PathBuf) {
     |        ^^^^^^^^^^^^^^^
...
1335 |     fn copy_folder(&self, source_folder: &PathBuf, dest_folder: &PathBuf) -> io::Result<()> {
     |        ^^^^^^^^^^^
...
1358 |     pub(crate) fn wants_to_select_dataset_folder(&self) -> bool {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1362 |     pub(crate) fn dataset_folder_selection_started(&mut self) {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1367 |     pub(crate) fn cancel_dataset_folder_selection(&mut self) {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1378 |     pub(crate) fn set_selected_dataset_folder(&mut self, folder_path: PathBuf) {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1443 |     fn process_selected_dataset_folder(&mut self, folder_path: PathBuf, dataset_folder: PathBuf) {
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1576 |     pub(crate) fn copy_datasets_to_local(&self) -> bool {
     |                   ^^^^^^^^^^^^^^^^^^^^^^
...
1582 |     pub(crate) fn set_copy_datasets_to_local(&mut self, should_copy: bool) {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1596 |     pub(crate) fn get_datasets_folder(&self) -> Option<PathBuf> {
     |                   ^^^^^^^^^^^^^^^^^^^
...
1629 |     pub(crate) fn set_selected_folders(&mut self, folder_paths: Vec<PathBuf>) {
     |                   ^^^^^^^^^^^^^^^^^^^^

warning: field `url` is never read
  --> crates/brush-app/src/overlays/settings_detail.rs:14:5
   |
11 | pub(crate) struct SettingsDetailOverlay {
   |                   --------------------- field in this struct
...
14 |     url: String,
   |     ^^^

warning: field `gpu_stats` is never read
  --> crates/brush-app/src/overlays/stats_detail.rs:22:5
   |
10 | pub(crate) struct StatsDetailOverlay {
   |                   ------------------ field in this struct
...
22 |     gpu_stats: GpuStats,
   |     ^^^^^^^^^

warning: methods `get_live_update`, `set_live_update`, `get_paused`, and `set_paused` are never used
   --> crates/brush-app/src/overlays/controls_detail.rs:195:19
    |
16  | impl ControlsDetailOverlay {
    | -------------------------- methods in this implementation
...
195 |     pub(crate) fn get_live_update(&self) -> bool {
    |                   ^^^^^^^^^^^^^^^
...
199 |     pub(crate) fn set_live_update(&mut self, live_update: bool) {
    |                   ^^^^^^^^^^^^^^^
...
203 |     pub(crate) fn get_paused(&self) -> bool {
    |                   ^^^^^^^^^^
...
207 |     pub(crate) fn set_paused(&mut self, paused: bool) {
    |                   ^^^^^^^^^^

warning: `brush-app` (lib) generated 37 warnings (run `cargo fix --lib -p brush-app` to apply 15 suggestions)
warning: unused import: `brush_app::app::AppCreateCb`
 --> crates/brush-app/src/bin/bin.rs:5:5
  |
5 | use brush_app::app::AppCreateCb;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `wgpu_options`
   --> crates/brush-app/src/bin/bin.rs:190:17
    |
190 |             let wgpu_options = brush_ui::create_egui_options();
    |                 ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_wgpu_options`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: constant `BUILD_TIME` is never used
  --> crates/brush-app/src/bin/bin.rs:19:7
   |
19 | const BUILD_TIME: &str = "2025-03-17 (manual)";
   |       ^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: `brush-app` (bin "brush_app") generated 3 warnings (run `cargo fix --bin "brush_app"` to apply 1 suggestion)
    Finished `dev` profile [optimized + debuginfo] target(s) in 2.19s
2025-03-19T19:23:10.062823Z  INFO applying new distribution
2025-03-19T19:23:10.064863Z  INFO ✅ success
2025-03-19T19:23:22.249030Z  INFO 📦 starting build
warning: unused import: `std::path::Path`
 --> crates/brush-dataset/src/storage/mod.rs:7:5
  |
7 | use std::path::Path;
  |     ^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `DatasetInfo` and `StorageType`
 --> crates/brush-dataset/src/storage/indexed_db.rs:6:29
  |
6 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |                             ^^^^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `Path`
 --> crates/brush-dataset/src/storage/filesystem.rs:4:17
  |
4 | use std::path::{Path, PathBuf};
  |                 ^^^^

warning: unused import: `DatasetStorage`
 --> crates/brush-dataset/src/storage/filesystem.rs:7:13
  |
7 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |             ^^^^^^^^^^^^^^

warning: constant `DB_NAME` is never used
 --> crates/brush-dataset/src/storage/indexed_db.rs:9:7
  |
9 | const DB_NAME: &str = "brush_dataset_storage";
  |       ^^^^^^^
  |
  = note: `#[warn(dead_code)]` on by default

warning: constant `METADATA_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:10:7
   |
10 | const METADATA_STORE: &str = "metadata";
   |       ^^^^^^^^^^^^^^

warning: constant `DATASET_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:11:7
   |
11 | const DATASET_STORE: &str = "datasets";
   |       ^^^^^^^^^^^^^

warning: method `get_total_storage_used` is never used
   --> crates/brush-dataset/src/storage/filesystem.rs:126:8
    |
15  | impl FilesystemStorage {
    | ---------------------- method in this implementation
...
126 |     fn get_total_storage_used(&self) -> Result<u64> {
    |        ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::io::Error`
 --> crates/rrfd/src/lib.rs:8:5
  |
8 | use std::io::Error;
  |     ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::io::ErrorKind`
 --> crates/rrfd/src/lib.rs:9:5
  |
9 | use std::io::ErrorKind;
  |     ^^^^^^^^^^^^^^^^^^

warning: `brush-dataset` (lib) generated 8 warnings (run `cargo fix --lib -p brush-dataset` to apply 4 suggestions)
warning: `rrfd` (lib) generated 2 warnings (run `cargo fix --lib -p rrfd` to apply 2 suggestions)
   Compiling brush-app v0.2.0 (/Users/ryanhickman/code/brush/crates/brush-app)
warning: unused import: `std::fmt::Debug`
  --> crates/brush-app/src/app.rs:26:5
   |
26 | use std::fmt::Debug;
   |     ^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::hash::Hash`
  --> crates/brush-app/src/app.rs:27:5
   |
27 | use std::hash::Hash;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `std::io::Error`
  --> crates/brush-app/src/app.rs:28:5
   |
28 | use std::io::Error;
   |     ^^^^^^^^^^^^^^

warning: unused import: `std::io::ErrorKind`
  --> crates/brush-app/src/app.rs:29:5
   |
29 | use std::io::ErrorKind;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
  --> crates/brush-app/src/app.rs:30:5
   |
30 | use std::pin::Pin;
   |     ^^^^^^^^^^^^^

warning: unused imports: `Duration` and `SystemTime`
  --> crates/brush-app/src/app.rs:32:17
   |
32 | use std::time::{Duration, SystemTime};
   |                 ^^^^^^^^  ^^^^^^^^^^

warning: unused imports: `Align2` and `RichText`
  --> crates/brush-app/src/app.rs:33:12
   |
33 | use egui::{Align2, RichText};
   |            ^^^^^^  ^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
  --> crates/brush-app/src/app.rs:34:5
   |
34 | use brush_dataset::splat_export;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ExportError` and `ExportFormat`
  --> crates/brush-app/src/app.rs:36:44
   |
36 | use crate::export_service::{ExportService, ExportError, ExportFormat};
   |                                            ^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `brush_dataset::storage`
  --> crates/brush-app/src/app.rs:37:5
   |
37 | use brush_dataset::storage;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
 --> crates/brush-app/src/panels/scene.rs:1:5
  |
1 | use brush_dataset::splat_export;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ControlMessage`
 --> crates/brush-app/src/panels/scene.rs:2:35
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                   ^^^^^^^^^^^^^^

warning: unused import: `tokio_with_wasm::alias as tokio_wasm`
  --> crates/brush-app/src/panels/scene.rs:17:5
   |
17 | use tokio_with_wasm::alias as tokio_wasm;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ProcessMessage`
 --> crates/brush-app/src/overlays/controls_detail.rs:2:51
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                                   ^^^^^^^^^^^^^^

warning: unused import: `std::sync::Once`
 --> crates/brush-app/src/utils.rs:2:5
  |
2 | use std::sync::Once;
  |     ^^^^^^^^^^^^^^^

warning: unused variable: `view_aspect`
  --> crates/brush-app/src/panels/scene.rs:96:21
   |
96 |         if let Some(view_aspect) = context.view_aspect {
   |                     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_view_aspect`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `test_file`
  --> crates/brush-app/src/utils.rs:77:9
   |
77 |     let test_file = PathBuf::from("test_data/sample.ply");
   |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_test_file`

warning: unused variable: `context`
  --> crates/brush-app/src/utils.rs:72:27
   |
72 | pub fn auto_load_test_ply(context: &mut crate::app::AppContext) {
   |                           ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_context`

warning: function `parse_search` is never used
   --> crates/brush-app/src/app.rs:103:4
    |
103 | fn parse_search(search: &str) -> HashMap<String, String> {
    |    ^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: method `get_scene_panel_mut` is never used
   --> crates/brush-app/src/app.rs:581:8
    |
166 | impl AppContext {
    | --------------- method in this implementation
...
581 |     fn get_scene_panel_mut(&mut self) -> Option<&mut ScenePanel> {
    |        ^^^^^^^^^^^^^^^^^^^

warning: field `default_format` is never read
  --> crates/brush-app/src/export_service.rs:74:5
   |
69 | pub struct ExportService {
   |            ------------- field in this struct
...
74 |     default_format: ExportFormat,
   |     ^^^^^^^^^^^^^^
   |
   = note: `ExportService` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: struct `SettingsPanel` is never constructed
  --> crates/brush-app/src/panels/settings.rs:10:19
   |
10 | pub(crate) struct SettingsPanel {
   |                   ^^^^^^^^^^^^^

warning: associated function `new` is never used
  --> crates/brush-app/src/panels/settings.rs:16:19
   |
15 | impl SettingsPanel {
   | ------------------ associated function in this implementation
16 |     pub(crate) fn new() -> Self {
   |                   ^^^

warning: struct `PresetsPanel` is never constructed
 --> crates/brush-app/src/panels/presets.rs:5:19
  |
5 | pub(crate) struct PresetsPanel {}
  |                   ^^^^^^^^^^^^

warning: associated function `new` is never used
 --> crates/brush-app/src/panels/presets.rs:8:19
  |
7 | impl PresetsPanel {
  | ----------------- associated function in this implementation
8 |     pub(crate) fn new() -> Self {
  |                   ^^^

warning: function `url_button` is never used
  --> crates/brush-app/src/panels/presets.rs:13:4
   |
13 | fn url_button(label: &str, url: &str, ui: &mut egui::Ui) {
   |    ^^^^^^^^^^

warning: struct `StatsPanel` is never constructed
  --> crates/brush-app/src/panels/stats.rs:10:19
   |
10 | pub(crate) struct StatsPanel {
   |                   ^^^^^^^^^^

warning: associated function `new` is never used
  --> crates/brush-app/src/panels/stats.rs:27:19
   |
26 | impl StatsPanel {
   | --------------- associated function in this implementation
27 |     pub(crate) fn new(device: WgpuDevice, adapter_info: AdapterInfo) -> Self {
   |                   ^^^

warning: function `bytes_format` is never used
  --> crates/brush-app/src/panels/stats.rs:43:4
   |
43 | fn bytes_format(bytes: u64) -> String {
   |    ^^^^^^^^^^^^

warning: fields `index`, `view_type`, and `texture_handle` are never read
  --> crates/brush-app/src/overlays/dataset_detail.rs:18:5
   |
17 | struct SelectedView {
   |        ------------ fields in this struct
18 |     index: usize,
   |     ^^^^^
19 |     view_type: ViewType,
   |     ^^^^^^^^^
20 |     texture_handle: TextureHandle,
   |     ^^^^^^^^^^^^^^
   |
   = note: `SelectedView` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: function `selected_scene` is never used
  --> crates/brush-app/src/overlays/dataset_detail.rs:32:4
   |
32 | fn selected_scene(t: ViewType, context: &AppContext) -> &Scene {
   |    ^^^^^^^^^^^^^^

warning: method `get_view` is never used
  --> crates/brush-app/src/overlays/dataset_detail.rs:44:8
   |
43 | impl SelectedView {
   | ----------------- method in this implementation
44 |     fn get_view<'a>(&'a self, context: &'a AppContext) -> &'a SceneView {
   |        ^^^^^^^^

warning: function `url_button` is never used
  --> crates/brush-app/src/overlays/dataset_detail.rs:86:4
   |
86 | fn url_button(label: &str, url: &str, ui: &mut egui::Ui) {
   |    ^^^^^^^^^^

warning: multiple methods are never used
    --> crates/brush-app/src/overlays/dataset_detail.rs:172:19
     |
90   | impl DatasetDetailOverlay {
     | ------------------------- methods in this implementation
...
172  |     pub(crate) fn set_selected_folder(&mut self, folder: PathBuf) {
     |                   ^^^^^^^^^^^^^^^^^^^
...
362  |     pub(crate) fn wants_to_select_folder(&self) -> bool {
     |                   ^^^^^^^^^^^^^^^^^^^^^^
...
367  |     pub(crate) fn folder_selection_started(&mut self) {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^
...
372  |     pub(crate) fn cancel_folder_selection(&mut self) {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^
...
402  |     pub(crate) fn set_selected_file(&mut self, file_path: PathBuf) {
     |                   ^^^^^^^^^^^^^^^^^
...
575  |     fn copy_file_as_is(&mut self, file_path: &PathBuf, _dataset_folder: &PathBuf) {
     |        ^^^^^^^^^^^^^^^
...
1335 |     fn copy_folder(&self, source_folder: &PathBuf, dest_folder: &PathBuf) -> io::Result<()> {
     |        ^^^^^^^^^^^
...
1358 |     pub(crate) fn wants_to_select_dataset_folder(&self) -> bool {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1362 |     pub(crate) fn dataset_folder_selection_started(&mut self) {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1367 |     pub(crate) fn cancel_dataset_folder_selection(&mut self) {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1378 |     pub(crate) fn set_selected_dataset_folder(&mut self, folder_path: PathBuf) {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1443 |     fn process_selected_dataset_folder(&mut self, folder_path: PathBuf, dataset_folder: PathBuf) {
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1576 |     pub(crate) fn copy_datasets_to_local(&self) -> bool {
     |                   ^^^^^^^^^^^^^^^^^^^^^^
...
1582 |     pub(crate) fn set_copy_datasets_to_local(&mut self, should_copy: bool) {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1596 |     pub(crate) fn get_datasets_folder(&self) -> Option<PathBuf> {
     |                   ^^^^^^^^^^^^^^^^^^^
...
1629 |     pub(crate) fn set_selected_folders(&mut self, folder_paths: Vec<PathBuf>) {
     |                   ^^^^^^^^^^^^^^^^^^^^

warning: field `url` is never read
  --> crates/brush-app/src/overlays/settings_detail.rs:14:5
   |
11 | pub(crate) struct SettingsDetailOverlay {
   |                   --------------------- field in this struct
...
14 |     url: String,
   |     ^^^

warning: field `gpu_stats` is never read
  --> crates/brush-app/src/overlays/stats_detail.rs:22:5
   |
10 | pub(crate) struct StatsDetailOverlay {
   |                   ------------------ field in this struct
...
22 |     gpu_stats: GpuStats,
   |     ^^^^^^^^^

warning: methods `get_live_update`, `set_live_update`, `get_paused`, and `set_paused` are never used
   --> crates/brush-app/src/overlays/controls_detail.rs:195:19
    |
16  | impl ControlsDetailOverlay {
    | -------------------------- methods in this implementation
...
195 |     pub(crate) fn get_live_update(&self) -> bool {
    |                   ^^^^^^^^^^^^^^^
...
199 |     pub(crate) fn set_live_update(&mut self, live_update: bool) {
    |                   ^^^^^^^^^^^^^^^
...
203 |     pub(crate) fn get_paused(&self) -> bool {
    |                   ^^^^^^^^^^
...
207 |     pub(crate) fn set_paused(&mut self, paused: bool) {
    |                   ^^^^^^^^^^

warning: `brush-app` (lib) generated 37 warnings (run `cargo fix --lib -p brush-app` to apply 15 suggestions)
warning: unused import: `brush_app::app::AppCreateCb`
 --> crates/brush-app/src/bin/bin.rs:5:5
  |
5 | use brush_app::app::AppCreateCb;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `wgpu_options`
   --> crates/brush-app/src/bin/bin.rs:190:17
    |
190 |             let wgpu_options = brush_ui::create_egui_options();
    |                 ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_wgpu_options`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: constant `BUILD_TIME` is never used
  --> crates/brush-app/src/bin/bin.rs:19:7
   |
19 | const BUILD_TIME: &str = "2025-03-17 (manual)";
   |       ^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: `brush-app` (bin "brush_app") generated 3 warnings (run `cargo fix --bin "brush_app"` to apply 1 suggestion)
    Finished `dev` profile [optimized + debuginfo] target(s) in 2.10s
2025-03-19T19:23:26.037651Z  INFO applying new distribution
2025-03-19T19:23:26.040145Z  INFO ✅ success
2025-03-19T19:23:33.123267Z  INFO 📦 starting build
warning: unused import: `std::path::Path`
 --> crates/brush-dataset/src/storage/mod.rs:7:5
  |
7 | use std::path::Path;
  |     ^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `DatasetInfo` and `StorageType`
 --> crates/brush-dataset/src/storage/indexed_db.rs:6:29
  |
6 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |                             ^^^^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `Path`
 --> crates/brush-dataset/src/storage/filesystem.rs:4:17
  |
4 | use std::path::{Path, PathBuf};
  |                 ^^^^

warning: unused import: `DatasetStorage`
 --> crates/brush-dataset/src/storage/filesystem.rs:7:13
  |
7 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |             ^^^^^^^^^^^^^^

warning: constant `DB_NAME` is never used
 --> crates/brush-dataset/src/storage/indexed_db.rs:9:7
  |
9 | const DB_NAME: &str = "brush_dataset_storage";
  |       ^^^^^^^
  |
  = note: `#[warn(dead_code)]` on by default

warning: constant `METADATA_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:10:7
   |
10 | const METADATA_STORE: &str = "metadata";
   |       ^^^^^^^^^^^^^^

warning: constant `DATASET_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:11:7
   |
11 | const DATASET_STORE: &str = "datasets";
   |       ^^^^^^^^^^^^^

warning: method `get_total_storage_used` is never used
   --> crates/brush-dataset/src/storage/filesystem.rs:126:8
    |
15  | impl FilesystemStorage {
    | ---------------------- method in this implementation
...
126 |     fn get_total_storage_used(&self) -> Result<u64> {
    |        ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::io::Error`
 --> crates/rrfd/src/lib.rs:8:5
  |
8 | use std::io::Error;
  |     ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::io::ErrorKind`
 --> crates/rrfd/src/lib.rs:9:5
  |
9 | use std::io::ErrorKind;
  |     ^^^^^^^^^^^^^^^^^^

warning: `brush-dataset` (lib) generated 8 warnings (run `cargo fix --lib -p brush-dataset` to apply 4 suggestions)
warning: `rrfd` (lib) generated 2 warnings (run `cargo fix --lib -p rrfd` to apply 2 suggestions)
   Compiling brush-app v0.2.0 (/Users/ryanhickman/code/brush/crates/brush-app)
warning: unused import: `std::fmt::Debug`
  --> crates/brush-app/src/app.rs:26:5
   |
26 | use std::fmt::Debug;
   |     ^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::hash::Hash`
  --> crates/brush-app/src/app.rs:27:5
   |
27 | use std::hash::Hash;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `std::io::Error`
  --> crates/brush-app/src/app.rs:28:5
   |
28 | use std::io::Error;
   |     ^^^^^^^^^^^^^^

warning: unused import: `std::io::ErrorKind`
  --> crates/brush-app/src/app.rs:29:5
   |
29 | use std::io::ErrorKind;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
  --> crates/brush-app/src/app.rs:30:5
   |
30 | use std::pin::Pin;
   |     ^^^^^^^^^^^^^

warning: unused imports: `Duration` and `SystemTime`
  --> crates/brush-app/src/app.rs:32:17
   |
32 | use std::time::{Duration, SystemTime};
   |                 ^^^^^^^^  ^^^^^^^^^^

warning: unused imports: `Align2` and `RichText`
  --> crates/brush-app/src/app.rs:33:12
   |
33 | use egui::{Align2, RichText};
   |            ^^^^^^  ^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
  --> crates/brush-app/src/app.rs:34:5
   |
34 | use brush_dataset::splat_export;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ExportError` and `ExportFormat`
  --> crates/brush-app/src/app.rs:36:44
   |
36 | use crate::export_service::{ExportService, ExportError, ExportFormat};
   |                                            ^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `brush_dataset::storage`
  --> crates/brush-app/src/app.rs:37:5
   |
37 | use brush_dataset::storage;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
 --> crates/brush-app/src/panels/scene.rs:1:5
  |
1 | use brush_dataset::splat_export;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ControlMessage`
 --> crates/brush-app/src/panels/scene.rs:2:35
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                   ^^^^^^^^^^^^^^

warning: unused import: `tokio_with_wasm::alias as tokio_wasm`
  --> crates/brush-app/src/panels/scene.rs:17:5
   |
17 | use tokio_with_wasm::alias as tokio_wasm;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ProcessMessage`
 --> crates/brush-app/src/overlays/controls_detail.rs:2:51
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                                   ^^^^^^^^^^^^^^

warning: unused import: `std::sync::Once`
 --> crates/brush-app/src/utils.rs:2:5
  |
2 | use std::sync::Once;
  |     ^^^^^^^^^^^^^^^

warning: unused variable: `view_aspect`
  --> crates/brush-app/src/panels/scene.rs:96:21
   |
96 |         if let Some(view_aspect) = context.view_aspect {
   |                     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_view_aspect`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `test_file`
  --> crates/brush-app/src/utils.rs:77:9
   |
77 |     let test_file = PathBuf::from("test_data/sample.ply");
   |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_test_file`

warning: unused variable: `context`
  --> crates/brush-app/src/utils.rs:72:27
   |
72 | pub fn auto_load_test_ply(context: &mut crate::app::AppContext) {
   |                           ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_context`

warning: function `parse_search` is never used
   --> crates/brush-app/src/app.rs:103:4
    |
103 | fn parse_search(search: &str) -> HashMap<String, String> {
    |    ^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: method `get_scene_panel_mut` is never used
   --> crates/brush-app/src/app.rs:581:8
    |
166 | impl AppContext {
    | --------------- method in this implementation
...
581 |     fn get_scene_panel_mut(&mut self) -> Option<&mut ScenePanel> {
    |        ^^^^^^^^^^^^^^^^^^^

warning: field `default_format` is never read
  --> crates/brush-app/src/export_service.rs:74:5
   |
69 | pub struct ExportService {
   |            ------------- field in this struct
...
74 |     default_format: ExportFormat,
   |     ^^^^^^^^^^^^^^
   |
   = note: `ExportService` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: struct `SettingsPanel` is never constructed
  --> crates/brush-app/src/panels/settings.rs:10:19
   |
10 | pub(crate) struct SettingsPanel {
   |                   ^^^^^^^^^^^^^

warning: associated function `new` is never used
  --> crates/brush-app/src/panels/settings.rs:16:19
   |
15 | impl SettingsPanel {
   | ------------------ associated function in this implementation
16 |     pub(crate) fn new() -> Self {
   |                   ^^^

warning: struct `PresetsPanel` is never constructed
 --> crates/brush-app/src/panels/presets.rs:5:19
  |
5 | pub(crate) struct PresetsPanel {}
  |                   ^^^^^^^^^^^^

warning: associated function `new` is never used
 --> crates/brush-app/src/panels/presets.rs:8:19
  |
7 | impl PresetsPanel {
  | ----------------- associated function in this implementation
8 |     pub(crate) fn new() -> Self {
  |                   ^^^

warning: function `url_button` is never used
  --> crates/brush-app/src/panels/presets.rs:13:4
   |
13 | fn url_button(label: &str, url: &str, ui: &mut egui::Ui) {
   |    ^^^^^^^^^^

warning: struct `StatsPanel` is never constructed
  --> crates/brush-app/src/panels/stats.rs:10:19
   |
10 | pub(crate) struct StatsPanel {
   |                   ^^^^^^^^^^

warning: associated function `new` is never used
  --> crates/brush-app/src/panels/stats.rs:27:19
   |
26 | impl StatsPanel {
   | --------------- associated function in this implementation
27 |     pub(crate) fn new(device: WgpuDevice, adapter_info: AdapterInfo) -> Self {
   |                   ^^^

warning: function `bytes_format` is never used
  --> crates/brush-app/src/panels/stats.rs:43:4
   |
43 | fn bytes_format(bytes: u64) -> String {
   |    ^^^^^^^^^^^^

warning: fields `index`, `view_type`, and `texture_handle` are never read
  --> crates/brush-app/src/overlays/dataset_detail.rs:18:5
   |
17 | struct SelectedView {
   |        ------------ fields in this struct
18 |     index: usize,
   |     ^^^^^
19 |     view_type: ViewType,
   |     ^^^^^^^^^
20 |     texture_handle: TextureHandle,
   |     ^^^^^^^^^^^^^^
   |
   = note: `SelectedView` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: function `selected_scene` is never used
  --> crates/brush-app/src/overlays/dataset_detail.rs:32:4
   |
32 | fn selected_scene(t: ViewType, context: &AppContext) -> &Scene {
   |    ^^^^^^^^^^^^^^

warning: method `get_view` is never used
  --> crates/brush-app/src/overlays/dataset_detail.rs:44:8
   |
43 | impl SelectedView {
   | ----------------- method in this implementation
44 |     fn get_view<'a>(&'a self, context: &'a AppContext) -> &'a SceneView {
   |        ^^^^^^^^

warning: function `url_button` is never used
  --> crates/brush-app/src/overlays/dataset_detail.rs:86:4
   |
86 | fn url_button(label: &str, url: &str, ui: &mut egui::Ui) {
   |    ^^^^^^^^^^

warning: multiple methods are never used
    --> crates/brush-app/src/overlays/dataset_detail.rs:172:19
     |
90   | impl DatasetDetailOverlay {
     | ------------------------- methods in this implementation
...
172  |     pub(crate) fn set_selected_folder(&mut self, folder: PathBuf) {
     |                   ^^^^^^^^^^^^^^^^^^^
...
362  |     pub(crate) fn wants_to_select_folder(&self) -> bool {
     |                   ^^^^^^^^^^^^^^^^^^^^^^
...
367  |     pub(crate) fn folder_selection_started(&mut self) {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^
...
372  |     pub(crate) fn cancel_folder_selection(&mut self) {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^
...
402  |     pub(crate) fn set_selected_file(&mut self, file_path: PathBuf) {
     |                   ^^^^^^^^^^^^^^^^^
...
575  |     fn copy_file_as_is(&mut self, file_path: &PathBuf, _dataset_folder: &PathBuf) {
     |        ^^^^^^^^^^^^^^^
...
1335 |     fn copy_folder(&self, source_folder: &PathBuf, dest_folder: &PathBuf) -> io::Result<()> {
     |        ^^^^^^^^^^^
...
1358 |     pub(crate) fn wants_to_select_dataset_folder(&self) -> bool {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1362 |     pub(crate) fn dataset_folder_selection_started(&mut self) {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1367 |     pub(crate) fn cancel_dataset_folder_selection(&mut self) {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1378 |     pub(crate) fn set_selected_dataset_folder(&mut self, folder_path: PathBuf) {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1443 |     fn process_selected_dataset_folder(&mut self, folder_path: PathBuf, dataset_folder: PathBuf) {
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1576 |     pub(crate) fn copy_datasets_to_local(&self) -> bool {
     |                   ^^^^^^^^^^^^^^^^^^^^^^
...
1582 |     pub(crate) fn set_copy_datasets_to_local(&mut self, should_copy: bool) {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1596 |     pub(crate) fn get_datasets_folder(&self) -> Option<PathBuf> {
     |                   ^^^^^^^^^^^^^^^^^^^
...
1629 |     pub(crate) fn set_selected_folders(&mut self, folder_paths: Vec<PathBuf>) {
     |                   ^^^^^^^^^^^^^^^^^^^^

warning: field `url` is never read
  --> crates/brush-app/src/overlays/settings_detail.rs:14:5
   |
11 | pub(crate) struct SettingsDetailOverlay {
   |                   --------------------- field in this struct
...
14 |     url: String,
   |     ^^^

warning: field `gpu_stats` is never read
  --> crates/brush-app/src/overlays/stats_detail.rs:22:5
   |
10 | pub(crate) struct StatsDetailOverlay {
   |                   ------------------ field in this struct
...
22 |     gpu_stats: GpuStats,
   |     ^^^^^^^^^

warning: methods `get_live_update`, `set_live_update`, `get_paused`, and `set_paused` are never used
   --> crates/brush-app/src/overlays/controls_detail.rs:195:19
    |
16  | impl ControlsDetailOverlay {
    | -------------------------- methods in this implementation
...
195 |     pub(crate) fn get_live_update(&self) -> bool {
    |                   ^^^^^^^^^^^^^^^
...
199 |     pub(crate) fn set_live_update(&mut self, live_update: bool) {
    |                   ^^^^^^^^^^^^^^^
...
203 |     pub(crate) fn get_paused(&self) -> bool {
    |                   ^^^^^^^^^^
...
207 |     pub(crate) fn set_paused(&mut self, paused: bool) {
    |                   ^^^^^^^^^^

warning: `brush-app` (lib) generated 37 warnings (run `cargo fix --lib -p brush-app` to apply 15 suggestions)
warning: unused import: `brush_app::app::AppCreateCb`
 --> crates/brush-app/src/bin/bin.rs:5:5
  |
5 | use brush_app::app::AppCreateCb;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `wgpu_options`
   --> crates/brush-app/src/bin/bin.rs:190:17
    |
190 |             let wgpu_options = brush_ui::create_egui_options();
    |                 ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_wgpu_options`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: constant `BUILD_TIME` is never used
  --> crates/brush-app/src/bin/bin.rs:19:7
   |
19 | const BUILD_TIME: &str = "2025-03-17 (manual)";
   |       ^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: `brush-app` (bin "brush_app") generated 3 warnings (run `cargo fix --bin "brush_app"` to apply 1 suggestion)
    Finished `dev` profile [optimized + debuginfo] target(s) in 2.11s
2025-03-19T19:23:36.943180Z  INFO applying new distribution
2025-03-19T19:23:36.945472Z  INFO ✅ success
2025-03-19T19:24:25.924476Z  INFO 📦 starting build
warning: unused import: `std::io::Error`
 --> crates/rrfd/src/lib.rs:8:5
  |
8 | use std::io::Error;
  |     ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::io::ErrorKind`
 --> crates/rrfd/src/lib.rs:9:5
  |
9 | use std::io::ErrorKind;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::path::Path`
 --> crates/brush-dataset/src/storage/mod.rs:7:5
  |
7 | use std::path::Path;
  |     ^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `DatasetInfo` and `StorageType`
 --> crates/brush-dataset/src/storage/indexed_db.rs:6:29
  |
6 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |                             ^^^^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `Path`
 --> crates/brush-dataset/src/storage/filesystem.rs:4:17
  |
4 | use std::path::{Path, PathBuf};
  |                 ^^^^

warning: unused import: `DatasetStorage`
 --> crates/brush-dataset/src/storage/filesystem.rs:7:13
  |
7 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |             ^^^^^^^^^^^^^^

warning: constant `DB_NAME` is never used
 --> crates/brush-dataset/src/storage/indexed_db.rs:9:7
  |
9 | const DB_NAME: &str = "brush_dataset_storage";
  |       ^^^^^^^
  |
  = note: `#[warn(dead_code)]` on by default

warning: constant `METADATA_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:10:7
   |
10 | const METADATA_STORE: &str = "metadata";
   |       ^^^^^^^^^^^^^^

warning: constant `DATASET_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:11:7
   |
11 | const DATASET_STORE: &str = "datasets";
   |       ^^^^^^^^^^^^^

warning: method `get_total_storage_used` is never used
   --> crates/brush-dataset/src/storage/filesystem.rs:126:8
    |
15  | impl FilesystemStorage {
    | ---------------------- method in this implementation
...
126 |     fn get_total_storage_used(&self) -> Result<u64> {
    |        ^^^^^^^^^^^^^^^^^^^^^^

warning: `rrfd` (lib) generated 2 warnings (run `cargo fix --lib -p rrfd` to apply 2 suggestions)
warning: `brush-dataset` (lib) generated 8 warnings (run `cargo fix --lib -p brush-dataset` to apply 4 suggestions)
   Compiling brush-app v0.2.0 (/Users/ryanhickman/code/brush/crates/brush-app)
warning: unused import: `std::fmt::Debug`
  --> crates/brush-app/src/app.rs:26:5
   |
26 | use std::fmt::Debug;
   |     ^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::hash::Hash`
  --> crates/brush-app/src/app.rs:27:5
   |
27 | use std::hash::Hash;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `std::io::Error`
  --> crates/brush-app/src/app.rs:28:5
   |
28 | use std::io::Error;
   |     ^^^^^^^^^^^^^^

warning: unused import: `std::io::ErrorKind`
  --> crates/brush-app/src/app.rs:29:5
   |
29 | use std::io::ErrorKind;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
  --> crates/brush-app/src/app.rs:30:5
   |
30 | use std::pin::Pin;
   |     ^^^^^^^^^^^^^

warning: unused import: `std::time::Duration`
  --> crates/brush-app/src/app.rs:32:5
   |
32 | use std::time::Duration;
   |     ^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Align2` and `RichText`
  --> crates/brush-app/src/app.rs:33:12
   |
33 | use egui::{Align2, RichText};
   |            ^^^^^^  ^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
  --> crates/brush-app/src/app.rs:34:5
   |
34 | use brush_dataset::splat_export;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ExportError` and `ExportFormat`
  --> crates/brush-app/src/app.rs:36:44
   |
36 | use crate::export_service::{ExportService, ExportError, ExportFormat};
   |                                            ^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `brush_dataset::storage`
  --> crates/brush-app/src/app.rs:37:5
   |
37 | use brush_dataset::storage;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
 --> crates/brush-app/src/panels/scene.rs:1:5
  |
1 | use brush_dataset::splat_export;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ControlMessage`
 --> crates/brush-app/src/panels/scene.rs:2:35
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                   ^^^^^^^^^^^^^^

warning: unused import: `tokio_with_wasm::alias as tokio_wasm`
  --> crates/brush-app/src/panels/scene.rs:17:5
   |
17 | use tokio_with_wasm::alias as tokio_wasm;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ProcessMessage`
 --> crates/brush-app/src/overlays/controls_detail.rs:2:51
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                                   ^^^^^^^^^^^^^^

warning: unused import: `std::sync::Once`
 --> crates/brush-app/src/utils.rs:2:5
  |
2 | use std::sync::Once;
  |     ^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> crates/brush-app/src/app.rs:813:63
    |
813 |         let debug_mode = search_params.get("debug").unwrap_or("false");
    |                                                     --------- ^^^^^^^ expected `&String`, found `&str`
    |                                                     |
    |                                                     arguments to this method are incorrect
    |
    = note: expected reference `&std::string::String`
               found reference `&'static str`
help: the return type of this call is `&'static str` due to the type of the argument passed
   --> crates/brush-app/src/app.rs:813:26
    |
813 |         let debug_mode = search_params.get("debug").unwrap_or("false");
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------^
    |                                                               |
    |                                                               this argument influences the return type of `unwrap_or`
note: method defined here
   --> /rustc/4d91de4e48198da2e33413efdcd9cd2cc0c46688/library/core/src/option.rs:998:12
help: use `Option::map_or` to deref inner value of `Option`
    |
813 |         let debug_mode = search_params.get("debug").map_or("false", |v| v);
    |                                                     ~~~~~~        +++++++

error[E0308]: mismatched types
   --> crates/brush-app/src/app.rs:814:66
    |
814 |         let auto_test = search_params.get("auto_test").unwrap_or("false");
    |                                                        --------- ^^^^^^^ expected `&String`, found `&str`
    |                                                        |
    |                                                        arguments to this method are incorrect
    |
    = note: expected reference `&std::string::String`
               found reference `&'static str`
help: the return type of this call is `&'static str` due to the type of the argument passed
   --> crates/brush-app/src/app.rs:814:25
    |
814 |         let auto_test = search_params.get("auto_test").unwrap_or("false");
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------^
    |                                                                  |
    |                                                                  this argument influences the return type of `unwrap_or`
note: method defined here
   --> /rustc/4d91de4e48198da2e33413efdcd9cd2cc0c46688/library/core/src/option.rs:998:12
help: use `Option::map_or` to deref inner value of `Option`
    |
814 |         let auto_test = search_params.get("auto_test").map_or("false", |v| v);
    |                                                        ~~~~~~        +++++++

error[E0277]: the trait bound `str: std::convert::From<std::string::String>` is not satisfied
   --> crates/brush-app/src/app.rs:839:30
    |
839 |   ...                   &format!("
    |  ________________________^
840 | | ...                       console.log('🧪 Scheduling test PLY file load');
841 | | ...                       setTimeout(() => {{
842 | | ...                           console.log('🧪 Executing automated test: Loading PLY file');
...   |
846 | | ...                       }}, 1500);
847 | | ...                   ").into()
    | |                        ^ ---- required by a bound introduced by this call
    | |________________________|
    |                          the trait `std::convert::From<std::string::String>` is not implemented for `str`
    |
    = help: the following other types implement trait `std::convert::From<T>`:
              `&str` implements `std::convert::From<&icu_locid::extensions::other::subtag::Subtag>`
              `&str` implements `std::convert::From<&icu_locid::extensions::private::other::Subtag>`
              `&str` implements `std::convert::From<&icu_locid::extensions::transform::key::Key>`
              `&str` implements `std::convert::From<&icu_locid::extensions::unicode::attribute::Attribute>`
              `&str` implements `std::convert::From<&icu_locid::extensions::unicode::key::Key>`
              `&str` implements `std::convert::From<&icu_locid::subtags::language::Language>`
              `&str` implements `std::convert::From<&icu_locid::subtags::region::Region>`
              `&str` implements `std::convert::From<&icu_locid::subtags::script::Script>`
            and 2 others
    = note: required for `std::string::String` to implement `Into<str>`

error[E0599]: no method named `ok` found for enum `std::option::Option` in the current scope
   --> crates/brush-app/src/app.rs:850:22
    |
836 | /                 web_sys::window()
837 | |                     .and_then(|w| w.request_animation_frame(
838 | |                         &js_sys::Function::new_with_args("", 
839 | |                             &format!("
...   |
849 | |                     ).ok())
850 | |                     .ok();
    | |_____________________-^^
    |
help: there is a method `or` with a similar name, but with different arguments
   --> /rustc/4d91de4e48198da2e33413efdcd9cd2cc0c46688/library/core/src/option.rs:1524:5

error[E0599]: no method named `unchecked_ref` found for reference `&JsValue` in the current scope
   --> crates/brush-app/src/app.rs:866:50
    |
866 | ...                   closure.as_ref().unchecked_ref(),
    |                                        ^^^^^^^^^^^^^
    |
    = help: items from traits can only be used if the trait is in scope
help: trait `JsCast` which provides `unchecked_ref` is implemented but not in scope; perhaps you want to import it
    |
1   + use wasm_bindgen::JsCast;
    |
help: there is a method `unchecked_into` with a similar name
    |
866 |                                 closure.as_ref().unchecked_into(),
    |                                                  ~~~~~~~~~~~~~~

error[E0599]: no method named `ok` found for enum `std::option::Option` in the current scope
   --> crates/brush-app/src/app.rs:871:22
    |
861 | /                 web_sys::window()
862 | |                     .and_then(|window| {
863 | |                         window
864 | |                             .add_event_listener_with_callback(
...   |
870 | |                     })
871 | |                     .ok();
    | |_____________________-^^
    |
help: there is a method `or` with a similar name, but with different arguments
   --> /rustc/4d91de4e48198da2e33413efdcd9cd2cc0c46688/library/core/src/option.rs:1524:5

error[E0599]: no method named `get_dataset_detail_overlay_mut` found for mutable reference `&mut AppContext` in the current scope
  --> crates/brush-app/src/utils.rs:80:44
   |
80 |     if let Some(dataset_overlay) = context.get_dataset_detail_overlay_mut() {
   |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `&mut AppContext`

warning: unused variable: `dataset_detail_overlay`
    --> crates/brush-app/src/app.rs:1277:21
     |
1277 |                 let dataset_detail_overlay = self.dataset_detail_overlay.clone();
     |                     ^^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dataset_detail_overlay`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `js_window`
    --> crates/brush-app/src/app.rs:1309:37
     |
1309 | ...                   let js_window = web_sys::window().unwrap();
     |                           ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_js_window`

warning: unused variable: `current_aspect`
  --> crates/brush-app/src/panels/scene.rs:91:13
   |
91 |         let current_aspect = size.x / size.y;
   |             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_current_aspect`

warning: unused variable: `view_aspect`
  --> crates/brush-app/src/panels/scene.rs:93:21
   |
93 |         if let Some(view_aspect) = context.view_aspect {
   |                     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_view_aspect`

warning: variable does not need to be mutable
  --> crates/brush-app/src/panels/scene.rs:88:13
   |
88 |         let mut size = size.floor();
   |             ----^^^^
   |             |
   |             help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: unused variable: `dataset_folder`
   --> crates/brush-app/src/overlays/dataset_detail.rs:457:61
    |
457 |     fn process_selected_file(&mut self, file_path: PathBuf, dataset_folder: PathBuf) {
    |                                                             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dataset_folder`

warning: unused variable: `dataset_folder`
   --> crates/brush-app/src/overlays/dataset_detail.rs:575:56
    |
575 |     fn copy_file_as_is(&mut self, file_path: &PathBuf, dataset_folder: &PathBuf) {
    |                                                        ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dataset_folder`

Some errors have detailed explanations: E0277, E0308, E0599.
For more information about an error, try `rustc --explain E0277`.
warning: `brush-app` (lib) generated 22 warnings
error: could not compile `brush-app` (lib) due to 7 previous errors; 22 warnings emitted
2025-03-19T19:24:27.373777Z ERROR ❌ error
error from build pipeline

Caused by:
    0: HTML build pipeline failed (1 errors), showing first
    1: error from asset pipeline
    2: running cargo build
    3: error during cargo build execution
    4: cargo call to executable 'cargo' with args: '["build", "--target=wasm32-unknown-unknown", "--manifest-path", "/Users/ryanhickman/code/brush/crates/brush-app/Cargo.toml"]' returned a bad status: exit status: 101
2025-03-19T19:24:27.373846Z  INFO 📦 starting build
warning: unused import: `std::io::Error`
 --> crates/rrfd/src/lib.rs:8:5
  |
8 | use std::io::Error;
  |     ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::io::ErrorKind`
 --> crates/rrfd/src/lib.rs:9:5
  |
9 | use std::io::ErrorKind;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::path::Path`
 --> crates/brush-dataset/src/storage/mod.rs:7:5
  |
7 | use std::path::Path;
  |     ^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `DatasetInfo` and `StorageType`
 --> crates/brush-dataset/src/storage/indexed_db.rs:6:29
  |
6 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |                             ^^^^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `Path`
 --> crates/brush-dataset/src/storage/filesystem.rs:4:17
  |
4 | use std::path::{Path, PathBuf};
  |                 ^^^^

warning: unused import: `DatasetStorage`
 --> crates/brush-dataset/src/storage/filesystem.rs:7:13
  |
7 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |             ^^^^^^^^^^^^^^

warning: constant `DB_NAME` is never used
 --> crates/brush-dataset/src/storage/indexed_db.rs:9:7
  |
9 | const DB_NAME: &str = "brush_dataset_storage";
  |       ^^^^^^^
  |
  = note: `#[warn(dead_code)]` on by default

warning: constant `METADATA_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:10:7
   |
10 | const METADATA_STORE: &str = "metadata";
   |       ^^^^^^^^^^^^^^

warning: constant `DATASET_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:11:7
   |
11 | const DATASET_STORE: &str = "datasets";
   |       ^^^^^^^^^^^^^

warning: method `get_total_storage_used` is never used
   --> crates/brush-dataset/src/storage/filesystem.rs:126:8
    |
15  | impl FilesystemStorage {
    | ---------------------- method in this implementation
...
126 |     fn get_total_storage_used(&self) -> Result<u64> {
    |        ^^^^^^^^^^^^^^^^^^^^^^

warning: `rrfd` (lib) generated 2 warnings (run `cargo fix --lib -p rrfd` to apply 2 suggestions)
warning: `brush-dataset` (lib) generated 8 warnings (run `cargo fix --lib -p brush-dataset` to apply 4 suggestions)
   Compiling brush-app v0.2.0 (/Users/ryanhickman/code/brush/crates/brush-app)
warning: unused import: `std::fmt::Debug`
  --> crates/brush-app/src/app.rs:26:5
   |
26 | use std::fmt::Debug;
   |     ^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::hash::Hash`
  --> crates/brush-app/src/app.rs:27:5
   |
27 | use std::hash::Hash;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `std::io::Error`
  --> crates/brush-app/src/app.rs:28:5
   |
28 | use std::io::Error;
   |     ^^^^^^^^^^^^^^

warning: unused import: `std::io::ErrorKind`
  --> crates/brush-app/src/app.rs:29:5
   |
29 | use std::io::ErrorKind;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
  --> crates/brush-app/src/app.rs:30:5
   |
30 | use std::pin::Pin;
   |     ^^^^^^^^^^^^^

warning: unused import: `std::time::Duration`
  --> crates/brush-app/src/app.rs:32:5
   |
32 | use std::time::Duration;
   |     ^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Align2` and `RichText`
  --> crates/brush-app/src/app.rs:33:12
   |
33 | use egui::{Align2, RichText};
   |            ^^^^^^  ^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
  --> crates/brush-app/src/app.rs:34:5
   |
34 | use brush_dataset::splat_export;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ExportError` and `ExportFormat`
  --> crates/brush-app/src/app.rs:36:44
   |
36 | use crate::export_service::{ExportService, ExportError, ExportFormat};
   |                                            ^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `brush_dataset::storage`
  --> crates/brush-app/src/app.rs:37:5
   |
37 | use brush_dataset::storage;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
 --> crates/brush-app/src/panels/scene.rs:1:5
  |
1 | use brush_dataset::splat_export;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ControlMessage`
 --> crates/brush-app/src/panels/scene.rs:2:35
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                   ^^^^^^^^^^^^^^

warning: unused import: `tokio_with_wasm::alias as tokio_wasm`
  --> crates/brush-app/src/panels/scene.rs:17:5
   |
17 | use tokio_with_wasm::alias as tokio_wasm;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ProcessMessage`
 --> crates/brush-app/src/overlays/controls_detail.rs:2:51
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                                   ^^^^^^^^^^^^^^

warning: unused import: `std::sync::Once`
 --> crates/brush-app/src/utils.rs:2:5
  |
2 | use std::sync::Once;
  |     ^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> crates/brush-app/src/app.rs:813:63
    |
813 |         let debug_mode = search_params.get("debug").unwrap_or("false");
    |                                                     --------- ^^^^^^^ expected `&String`, found `&str`
    |                                                     |
    |                                                     arguments to this method are incorrect
    |
    = note: expected reference `&std::string::String`
               found reference `&'static str`
help: the return type of this call is `&'static str` due to the type of the argument passed
   --> crates/brush-app/src/app.rs:813:26
    |
813 |         let debug_mode = search_params.get("debug").unwrap_or("false");
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------^
    |                                                               |
    |                                                               this argument influences the return type of `unwrap_or`
note: method defined here
   --> /rustc/4d91de4e48198da2e33413efdcd9cd2cc0c46688/library/core/src/option.rs:998:12
help: use `Option::map_or` to deref inner value of `Option`
    |
813 |         let debug_mode = search_params.get("debug").map_or("false", |v| v);
    |                                                     ~~~~~~        +++++++

error[E0308]: mismatched types
   --> crates/brush-app/src/app.rs:814:66
    |
814 |         let auto_test = search_params.get("auto_test").unwrap_or("false");
    |                                                        --------- ^^^^^^^ expected `&String`, found `&str`
    |                                                        |
    |                                                        arguments to this method are incorrect
    |
    = note: expected reference `&std::string::String`
               found reference `&'static str`
help: the return type of this call is `&'static str` due to the type of the argument passed
   --> crates/brush-app/src/app.rs:814:25
    |
814 |         let auto_test = search_params.get("auto_test").unwrap_or("false");
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------^
    |                                                                  |
    |                                                                  this argument influences the return type of `unwrap_or`
note: method defined here
   --> /rustc/4d91de4e48198da2e33413efdcd9cd2cc0c46688/library/core/src/option.rs:998:12
help: use `Option::map_or` to deref inner value of `Option`
    |
814 |         let auto_test = search_params.get("auto_test").map_or("false", |v| v);
    |                                                        ~~~~~~        +++++++

error[E0277]: the trait bound `str: std::convert::From<std::string::String>` is not satisfied
   --> crates/brush-app/src/app.rs:839:30
    |
839 |   ...                   &format!("
    |  ________________________^
840 | | ...                       console.log('🧪 Scheduling test PLY file load');
841 | | ...                       setTimeout(() => {{
842 | | ...                           console.log('🧪 Executing automated test: Loading PLY file');
...   |
846 | | ...                       }}, 1500);
847 | | ...                   ").into()
    | |                        ^ ---- required by a bound introduced by this call
    | |________________________|
    |                          the trait `std::convert::From<std::string::String>` is not implemented for `str`
    |
    = help: the following other types implement trait `std::convert::From<T>`:
              `&str` implements `std::convert::From<&icu_locid::extensions::other::subtag::Subtag>`
              `&str` implements `std::convert::From<&icu_locid::extensions::private::other::Subtag>`
              `&str` implements `std::convert::From<&icu_locid::extensions::transform::key::Key>`
              `&str` implements `std::convert::From<&icu_locid::extensions::unicode::attribute::Attribute>`
              `&str` implements `std::convert::From<&icu_locid::extensions::unicode::key::Key>`
              `&str` implements `std::convert::From<&icu_locid::subtags::language::Language>`
              `&str` implements `std::convert::From<&icu_locid::subtags::region::Region>`
              `&str` implements `std::convert::From<&icu_locid::subtags::script::Script>`
            and 2 others
    = note: required for `std::string::String` to implement `Into<str>`

error[E0599]: no method named `ok` found for enum `std::option::Option` in the current scope
   --> crates/brush-app/src/app.rs:850:22
    |
836 | /                 web_sys::window()
837 | |                     .and_then(|w| w.request_animation_frame(
838 | |                         &js_sys::Function::new_with_args("", 
839 | |                             &format!("
...   |
849 | |                     ).ok())
850 | |                     .ok();
    | |_____________________-^^
    |
help: there is a method `or` with a similar name, but with different arguments
   --> /rustc/4d91de4e48198da2e33413efdcd9cd2cc0c46688/library/core/src/option.rs:1524:5

error[E0599]: no method named `unchecked_ref` found for reference `&JsValue` in the current scope
   --> crates/brush-app/src/app.rs:866:50
    |
866 | ...                   closure.as_ref().unchecked_ref(),
    |                                        ^^^^^^^^^^^^^
    |
    = help: items from traits can only be used if the trait is in scope
help: trait `JsCast` which provides `unchecked_ref` is implemented but not in scope; perhaps you want to import it
    |
1   + use wasm_bindgen::JsCast;
    |
help: there is a method `unchecked_into` with a similar name
    |
866 |                                 closure.as_ref().unchecked_into(),
    |                                                  ~~~~~~~~~~~~~~

error[E0599]: no method named `ok` found for enum `std::option::Option` in the current scope
   --> crates/brush-app/src/app.rs:871:22
    |
861 | /                 web_sys::window()
862 | |                     .and_then(|window| {
863 | |                         window
864 | |                             .add_event_listener_with_callback(
...   |
870 | |                     })
871 | |                     .ok();
    | |_____________________-^^
    |
help: there is a method `or` with a similar name, but with different arguments
   --> /rustc/4d91de4e48198da2e33413efdcd9cd2cc0c46688/library/core/src/option.rs:1524:5

error[E0599]: no method named `get_dataset_detail_overlay_mut` found for mutable reference `&mut AppContext` in the current scope
  --> crates/brush-app/src/utils.rs:80:44
   |
80 |     if let Some(dataset_overlay) = context.get_dataset_detail_overlay_mut() {
   |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `&mut AppContext`

warning: unused variable: `dataset_detail_overlay`
    --> crates/brush-app/src/app.rs:1277:21
     |
1277 |                 let dataset_detail_overlay = self.dataset_detail_overlay.clone();
     |                     ^^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dataset_detail_overlay`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `js_window`
    --> crates/brush-app/src/app.rs:1309:37
     |
1309 | ...                   let js_window = web_sys::window().unwrap();
     |                           ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_js_window`

warning: unused variable: `current_aspect`
  --> crates/brush-app/src/panels/scene.rs:91:13
   |
91 |         let current_aspect = size.x / size.y;
   |             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_current_aspect`

warning: unused variable: `view_aspect`
  --> crates/brush-app/src/panels/scene.rs:93:21
   |
93 |         if let Some(view_aspect) = context.view_aspect {
   |                     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_view_aspect`

warning: variable does not need to be mutable
  --> crates/brush-app/src/panels/scene.rs:88:13
   |
88 |         let mut size = size.floor();
   |             ----^^^^
   |             |
   |             help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: unused variable: `dataset_folder`
   --> crates/brush-app/src/overlays/dataset_detail.rs:457:61
    |
457 |     fn process_selected_file(&mut self, file_path: PathBuf, dataset_folder: PathBuf) {
    |                                                             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dataset_folder`

warning: unused variable: `dataset_folder`
   --> crates/brush-app/src/overlays/dataset_detail.rs:575:56
    |
575 |     fn copy_file_as_is(&mut self, file_path: &PathBuf, dataset_folder: &PathBuf) {
    |                                                        ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dataset_folder`

Some errors have detailed explanations: E0277, E0308, E0599.
For more information about an error, try `rustc --explain E0277`.
warning: `brush-app` (lib) generated 22 warnings
error: could not compile `brush-app` (lib) due to 7 previous errors; 22 warnings emitted
2025-03-19T19:24:28.605767Z ERROR ❌ error
error from build pipeline

Caused by:
    0: HTML build pipeline failed (1 errors), showing first
    1: error from asset pipeline
    2: running cargo build
    3: error during cargo build execution
    4: cargo call to executable 'cargo' with args: '["build", "--target=wasm32-unknown-unknown", "--manifest-path", "/Users/ryanhickman/code/brush/crates/brush-app/Cargo.toml"]' returned a bad status: exit status: 101
2025-03-19T19:24:32.719399Z  INFO 📦 starting build
warning: unused import: `std::io::Error`
 --> crates/rrfd/src/lib.rs:8:5
  |
8 | use std::io::Error;
  |     ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::io::ErrorKind`
 --> crates/rrfd/src/lib.rs:9:5
  |
9 | use std::io::ErrorKind;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::path::Path`
 --> crates/brush-dataset/src/storage/mod.rs:7:5
  |
7 | use std::path::Path;
  |     ^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `DatasetInfo` and `StorageType`
 --> crates/brush-dataset/src/storage/indexed_db.rs:6:29
  |
6 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |                             ^^^^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `Path`
 --> crates/brush-dataset/src/storage/filesystem.rs:4:17
  |
4 | use std::path::{Path, PathBuf};
  |                 ^^^^

warning: unused import: `DatasetStorage`
 --> crates/brush-dataset/src/storage/filesystem.rs:7:13
  |
7 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |             ^^^^^^^^^^^^^^

warning: constant `DB_NAME` is never used
 --> crates/brush-dataset/src/storage/indexed_db.rs:9:7
  |
9 | const DB_NAME: &str = "brush_dataset_storage";
  |       ^^^^^^^
  |
  = note: `#[warn(dead_code)]` on by default

warning: constant `METADATA_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:10:7
   |
10 | const METADATA_STORE: &str = "metadata";
   |       ^^^^^^^^^^^^^^

warning: constant `DATASET_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:11:7
   |
11 | const DATASET_STORE: &str = "datasets";
   |       ^^^^^^^^^^^^^

warning: method `get_total_storage_used` is never used
   --> crates/brush-dataset/src/storage/filesystem.rs:126:8
    |
15  | impl FilesystemStorage {
    | ---------------------- method in this implementation
...
126 |     fn get_total_storage_used(&self) -> Result<u64> {
    |        ^^^^^^^^^^^^^^^^^^^^^^

warning: `rrfd` (lib) generated 2 warnings (run `cargo fix --lib -p rrfd` to apply 2 suggestions)
warning: `brush-dataset` (lib) generated 8 warnings (run `cargo fix --lib -p brush-dataset` to apply 4 suggestions)
   Compiling brush-app v0.2.0 (/Users/ryanhickman/code/brush/crates/brush-app)
warning: unused import: `std::fmt::Debug`
  --> crates/brush-app/src/app.rs:26:5
   |
26 | use std::fmt::Debug;
   |     ^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::hash::Hash`
  --> crates/brush-app/src/app.rs:27:5
   |
27 | use std::hash::Hash;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `std::io::Error`
  --> crates/brush-app/src/app.rs:28:5
   |
28 | use std::io::Error;
   |     ^^^^^^^^^^^^^^

warning: unused import: `std::io::ErrorKind`
  --> crates/brush-app/src/app.rs:29:5
   |
29 | use std::io::ErrorKind;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
  --> crates/brush-app/src/app.rs:30:5
   |
30 | use std::pin::Pin;
   |     ^^^^^^^^^^^^^

warning: unused imports: `Duration` and `SystemTime`
  --> crates/brush-app/src/app.rs:32:17
   |
32 | use std::time::{Duration, SystemTime};
   |                 ^^^^^^^^  ^^^^^^^^^^

warning: unused imports: `Align2` and `RichText`
  --> crates/brush-app/src/app.rs:33:12
   |
33 | use egui::{Align2, RichText};
   |            ^^^^^^  ^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
  --> crates/brush-app/src/app.rs:34:5
   |
34 | use brush_dataset::splat_export;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ExportError` and `ExportFormat`
  --> crates/brush-app/src/app.rs:36:44
   |
36 | use crate::export_service::{ExportService, ExportError, ExportFormat};
   |                                            ^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `brush_dataset::storage`
  --> crates/brush-app/src/app.rs:37:5
   |
37 | use brush_dataset::storage;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
 --> crates/brush-app/src/panels/scene.rs:1:5
  |
1 | use brush_dataset::splat_export;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ControlMessage`
 --> crates/brush-app/src/panels/scene.rs:2:35
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                   ^^^^^^^^^^^^^^

warning: unused import: `tokio_with_wasm::alias as tokio_wasm`
  --> crates/brush-app/src/panels/scene.rs:17:5
   |
17 | use tokio_with_wasm::alias as tokio_wasm;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ProcessMessage`
 --> crates/brush-app/src/overlays/controls_detail.rs:2:51
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                                   ^^^^^^^^^^^^^^

warning: unused import: `std::sync::Once`
 --> crates/brush-app/src/utils.rs:2:5
  |
2 | use std::sync::Once;
  |     ^^^^^^^^^^^^^^^

warning: unused variable: `view_aspect`
  --> crates/brush-app/src/panels/scene.rs:96:21
   |
96 |         if let Some(view_aspect) = context.view_aspect {
   |                     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_view_aspect`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `test_file`
  --> crates/brush-app/src/utils.rs:77:9
   |
77 |     let test_file = PathBuf::from("test_data/sample.ply");
   |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_test_file`

warning: unused variable: `context`
  --> crates/brush-app/src/utils.rs:72:27
   |
72 | pub fn auto_load_test_ply(context: &mut crate::app::AppContext) {
   |                           ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_context`

warning: function `parse_search` is never used
   --> crates/brush-app/src/app.rs:103:4
    |
103 | fn parse_search(search: &str) -> HashMap<String, String> {
    |    ^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: method `get_scene_panel_mut` is never used
   --> crates/brush-app/src/app.rs:581:8
    |
166 | impl AppContext {
    | --------------- method in this implementation
...
581 |     fn get_scene_panel_mut(&mut self) -> Option<&mut ScenePanel> {
    |        ^^^^^^^^^^^^^^^^^^^

warning: field `default_format` is never read
  --> crates/brush-app/src/export_service.rs:74:5
   |
69 | pub struct ExportService {
   |            ------------- field in this struct
...
74 |     default_format: ExportFormat,
   |     ^^^^^^^^^^^^^^
   |
   = note: `ExportService` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: struct `SettingsPanel` is never constructed
  --> crates/brush-app/src/panels/settings.rs:10:19
   |
10 | pub(crate) struct SettingsPanel {
   |                   ^^^^^^^^^^^^^

warning: associated function `new` is never used
  --> crates/brush-app/src/panels/settings.rs:16:19
   |
15 | impl SettingsPanel {
   | ------------------ associated function in this implementation
16 |     pub(crate) fn new() -> Self {
   |                   ^^^

warning: struct `PresetsPanel` is never constructed
 --> crates/brush-app/src/panels/presets.rs:5:19
  |
5 | pub(crate) struct PresetsPanel {}
  |                   ^^^^^^^^^^^^

warning: associated function `new` is never used
 --> crates/brush-app/src/panels/presets.rs:8:19
  |
7 | impl PresetsPanel {
  | ----------------- associated function in this implementation
8 |     pub(crate) fn new() -> Self {
  |                   ^^^

warning: function `url_button` is never used
  --> crates/brush-app/src/panels/presets.rs:13:4
   |
13 | fn url_button(label: &str, url: &str, ui: &mut egui::Ui) {
   |    ^^^^^^^^^^

warning: struct `StatsPanel` is never constructed
  --> crates/brush-app/src/panels/stats.rs:10:19
   |
10 | pub(crate) struct StatsPanel {
   |                   ^^^^^^^^^^

warning: associated function `new` is never used
  --> crates/brush-app/src/panels/stats.rs:27:19
   |
26 | impl StatsPanel {
   | --------------- associated function in this implementation
27 |     pub(crate) fn new(device: WgpuDevice, adapter_info: AdapterInfo) -> Self {
   |                   ^^^

warning: function `bytes_format` is never used
  --> crates/brush-app/src/panels/stats.rs:43:4
   |
43 | fn bytes_format(bytes: u64) -> String {
   |    ^^^^^^^^^^^^

warning: fields `index`, `view_type`, and `texture_handle` are never read
  --> crates/brush-app/src/overlays/dataset_detail.rs:18:5
   |
17 | struct SelectedView {
   |        ------------ fields in this struct
18 |     index: usize,
   |     ^^^^^
19 |     view_type: ViewType,
   |     ^^^^^^^^^
20 |     texture_handle: TextureHandle,
   |     ^^^^^^^^^^^^^^
   |
   = note: `SelectedView` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: function `selected_scene` is never used
  --> crates/brush-app/src/overlays/dataset_detail.rs:32:4
   |
32 | fn selected_scene(t: ViewType, context: &AppContext) -> &Scene {
   |    ^^^^^^^^^^^^^^

warning: method `get_view` is never used
  --> crates/brush-app/src/overlays/dataset_detail.rs:44:8
   |
43 | impl SelectedView {
   | ----------------- method in this implementation
44 |     fn get_view<'a>(&'a self, context: &'a AppContext) -> &'a SceneView {
   |        ^^^^^^^^

warning: function `url_button` is never used
  --> crates/brush-app/src/overlays/dataset_detail.rs:86:4
   |
86 | fn url_button(label: &str, url: &str, ui: &mut egui::Ui) {
   |    ^^^^^^^^^^

warning: multiple methods are never used
    --> crates/brush-app/src/overlays/dataset_detail.rs:172:19
     |
90   | impl DatasetDetailOverlay {
     | ------------------------- methods in this implementation
...
172  |     pub(crate) fn set_selected_folder(&mut self, folder: PathBuf) {
     |                   ^^^^^^^^^^^^^^^^^^^
...
362  |     pub(crate) fn wants_to_select_folder(&self) -> bool {
     |                   ^^^^^^^^^^^^^^^^^^^^^^
...
367  |     pub(crate) fn folder_selection_started(&mut self) {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^
...
372  |     pub(crate) fn cancel_folder_selection(&mut self) {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^
...
402  |     pub(crate) fn set_selected_file(&mut self, file_path: PathBuf) {
     |                   ^^^^^^^^^^^^^^^^^
...
575  |     fn copy_file_as_is(&mut self, file_path: &PathBuf, _dataset_folder: &PathBuf) {
     |        ^^^^^^^^^^^^^^^
...
1335 |     fn copy_folder(&self, source_folder: &PathBuf, dest_folder: &PathBuf) -> io::Result<()> {
     |        ^^^^^^^^^^^
...
1358 |     pub(crate) fn wants_to_select_dataset_folder(&self) -> bool {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1362 |     pub(crate) fn dataset_folder_selection_started(&mut self) {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1367 |     pub(crate) fn cancel_dataset_folder_selection(&mut self) {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1378 |     pub(crate) fn set_selected_dataset_folder(&mut self, folder_path: PathBuf) {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1443 |     fn process_selected_dataset_folder(&mut self, folder_path: PathBuf, dataset_folder: PathBuf) {
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1576 |     pub(crate) fn copy_datasets_to_local(&self) -> bool {
     |                   ^^^^^^^^^^^^^^^^^^^^^^
...
1582 |     pub(crate) fn set_copy_datasets_to_local(&mut self, should_copy: bool) {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1596 |     pub(crate) fn get_datasets_folder(&self) -> Option<PathBuf> {
     |                   ^^^^^^^^^^^^^^^^^^^
...
1629 |     pub(crate) fn set_selected_folders(&mut self, folder_paths: Vec<PathBuf>) {
     |                   ^^^^^^^^^^^^^^^^^^^^

warning: field `url` is never read
  --> crates/brush-app/src/overlays/settings_detail.rs:14:5
   |
11 | pub(crate) struct SettingsDetailOverlay {
   |                   --------------------- field in this struct
...
14 |     url: String,
   |     ^^^

warning: field `gpu_stats` is never read
  --> crates/brush-app/src/overlays/stats_detail.rs:22:5
   |
10 | pub(crate) struct StatsDetailOverlay {
   |                   ------------------ field in this struct
...
22 |     gpu_stats: GpuStats,
   |     ^^^^^^^^^

warning: methods `get_live_update`, `set_live_update`, `get_paused`, and `set_paused` are never used
   --> crates/brush-app/src/overlays/controls_detail.rs:195:19
    |
16  | impl ControlsDetailOverlay {
    | -------------------------- methods in this implementation
...
195 |     pub(crate) fn get_live_update(&self) -> bool {
    |                   ^^^^^^^^^^^^^^^
...
199 |     pub(crate) fn set_live_update(&mut self, live_update: bool) {
    |                   ^^^^^^^^^^^^^^^
...
203 |     pub(crate) fn get_paused(&self) -> bool {
    |                   ^^^^^^^^^^
...
207 |     pub(crate) fn set_paused(&mut self, paused: bool) {
    |                   ^^^^^^^^^^

warning: `brush-app` (lib) generated 37 warnings (run `cargo fix --lib -p brush-app` to apply 15 suggestions)
warning: unused import: `brush_app::app::AppCreateCb`
 --> crates/brush-app/src/bin/bin.rs:5:5
  |
5 | use brush_app::app::AppCreateCb;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `wgpu_options`
   --> crates/brush-app/src/bin/bin.rs:190:17
    |
190 |             let wgpu_options = brush_ui::create_egui_options();
    |                 ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_wgpu_options`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: constant `BUILD_TIME` is never used
  --> crates/brush-app/src/bin/bin.rs:19:7
   |
19 | const BUILD_TIME: &str = "2025-03-17 (manual)";
   |       ^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: `brush-app` (bin "brush_app") generated 3 warnings (run `cargo fix --bin "brush_app"` to apply 1 suggestion)
    Finished `dev` profile [optimized + debuginfo] target(s) in 2.12s
2025-03-19T19:24:36.552729Z  INFO applying new distribution
2025-03-19T19:24:36.554860Z  INFO ✅ success
2025-03-19T19:24:36.554878Z  INFO 📦 starting build
warning: unused import: `std::io::Error`
 --> crates/rrfd/src/lib.rs:8:5
  |
8 | use std::io::Error;
  |     ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::io::ErrorKind`
 --> crates/rrfd/src/lib.rs:9:5
  |
9 | use std::io::ErrorKind;
  |     ^^^^^^^^^^^^^^^^^^

warning: `rrfd` (lib) generated 2 warnings (run `cargo fix --lib -p rrfd` to apply 2 suggestions)
warning: unused import: `std::path::Path`
 --> crates/brush-dataset/src/storage/mod.rs:7:5
  |
7 | use std::path::Path;
  |     ^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `DatasetInfo` and `StorageType`
 --> crates/brush-dataset/src/storage/indexed_db.rs:6:29
  |
6 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |                             ^^^^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `Path`
 --> crates/brush-dataset/src/storage/filesystem.rs:4:17
  |
4 | use std::path::{Path, PathBuf};
  |                 ^^^^

warning: unused import: `DatasetStorage`
 --> crates/brush-dataset/src/storage/filesystem.rs:7:13
  |
7 | use super::{DatasetStorage, DatasetInfo, StorageType};
  |             ^^^^^^^^^^^^^^

warning: constant `DB_NAME` is never used
 --> crates/brush-dataset/src/storage/indexed_db.rs:9:7
  |
9 | const DB_NAME: &str = "brush_dataset_storage";
  |       ^^^^^^^
  |
  = note: `#[warn(dead_code)]` on by default

warning: constant `METADATA_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:10:7
   |
10 | const METADATA_STORE: &str = "metadata";
   |       ^^^^^^^^^^^^^^

warning: constant `DATASET_STORE` is never used
  --> crates/brush-dataset/src/storage/indexed_db.rs:11:7
   |
11 | const DATASET_STORE: &str = "datasets";
   |       ^^^^^^^^^^^^^

warning: method `get_total_storage_used` is never used
   --> crates/brush-dataset/src/storage/filesystem.rs:126:8
    |
15  | impl FilesystemStorage {
    | ---------------------- method in this implementation
...
126 |     fn get_total_storage_used(&self) -> Result<u64> {
    |        ^^^^^^^^^^^^^^^^^^^^^^

warning: `brush-dataset` (lib) generated 8 warnings (run `cargo fix --lib -p brush-dataset` to apply 4 suggestions)
warning: unused import: `std::fmt::Debug`
  --> crates/brush-app/src/app.rs:26:5
   |
26 | use std::fmt::Debug;
   |     ^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::hash::Hash`
  --> crates/brush-app/src/app.rs:27:5
   |
27 | use std::hash::Hash;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `std::io::Error`
  --> crates/brush-app/src/app.rs:28:5
   |
28 | use std::io::Error;
   |     ^^^^^^^^^^^^^^

warning: unused import: `std::io::ErrorKind`
  --> crates/brush-app/src/app.rs:29:5
   |
29 | use std::io::ErrorKind;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
  --> crates/brush-app/src/app.rs:30:5
   |
30 | use std::pin::Pin;
   |     ^^^^^^^^^^^^^

warning: unused imports: `Duration` and `SystemTime`
  --> crates/brush-app/src/app.rs:32:17
   |
32 | use std::time::{Duration, SystemTime};
   |                 ^^^^^^^^  ^^^^^^^^^^

warning: unused imports: `Align2` and `RichText`
  --> crates/brush-app/src/app.rs:33:12
   |
33 | use egui::{Align2, RichText};
   |            ^^^^^^  ^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
  --> crates/brush-app/src/app.rs:34:5
   |
34 | use brush_dataset::splat_export;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ExportError` and `ExportFormat`
  --> crates/brush-app/src/app.rs:36:44
   |
36 | use crate::export_service::{ExportService, ExportError, ExportFormat};
   |                                            ^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `brush_dataset::storage`
  --> crates/brush-app/src/app.rs:37:5
   |
37 | use brush_dataset::storage;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
 --> crates/brush-app/src/panels/scene.rs:1:5
  |
1 | use brush_dataset::splat_export;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ControlMessage`
 --> crates/brush-app/src/panels/scene.rs:2:35
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                   ^^^^^^^^^^^^^^

warning: unused import: `tokio_with_wasm::alias as tokio_wasm`
  --> crates/brush-app/src/panels/scene.rs:17:5
   |
17 | use tokio_with_wasm::alias as tokio_wasm;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ProcessMessage`
 --> crates/brush-app/src/overlays/controls_detail.rs:2:51
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                                   ^^^^^^^^^^^^^^

warning: unused import: `std::sync::Once`
 --> crates/brush-app/src/utils.rs:2:5
  |
2 | use std::sync::Once;
  |     ^^^^^^^^^^^^^^^

warning: unused variable: `view_aspect`
  --> crates/brush-app/src/panels/scene.rs:96:21
   |
96 |         if let Some(view_aspect) = context.view_aspect {
   |                     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_view_aspect`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `test_file`
  --> crates/brush-app/src/utils.rs:77:9
   |
77 |     let test_file = PathBuf::from("test_data/sample.ply");
   |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_test_file`

warning: unused variable: `context`
  --> crates/brush-app/src/utils.rs:72:27
   |
72 | pub fn auto_load_test_ply(context: &mut crate::app::AppContext) {
   |                           ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_context`

warning: function `parse_search` is never used
   --> crates/brush-app/src/app.rs:103:4
    |
103 | fn parse_search(search: &str) -> HashMap<String, String> {
    |    ^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: method `get_scene_panel_mut` is never used
   --> crates/brush-app/src/app.rs:581:8
    |
166 | impl AppContext {
    | --------------- method in this implementation
...
581 |     fn get_scene_panel_mut(&mut self) -> Option<&mut ScenePanel> {
    |        ^^^^^^^^^^^^^^^^^^^

warning: field `default_format` is never read
  --> crates/brush-app/src/export_service.rs:74:5
   |
69 | pub struct ExportService {
   |            ------------- field in this struct
...
74 |     default_format: ExportFormat,
   |     ^^^^^^^^^^^^^^
   |
   = note: `ExportService` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: struct `SettingsPanel` is never constructed
  --> crates/brush-app/src/panels/settings.rs:10:19
   |
10 | pub(crate) struct SettingsPanel {
   |                   ^^^^^^^^^^^^^

warning: associated function `new` is never used
  --> crates/brush-app/src/panels/settings.rs:16:19
   |
15 | impl SettingsPanel {
   | ------------------ associated function in this implementation
16 |     pub(crate) fn new() -> Self {
   |                   ^^^

warning: struct `PresetsPanel` is never constructed
 --> crates/brush-app/src/panels/presets.rs:5:19
  |
5 | pub(crate) struct PresetsPanel {}
  |                   ^^^^^^^^^^^^

warning: associated function `new` is never used
 --> crates/brush-app/src/panels/presets.rs:8:19
  |
7 | impl PresetsPanel {
  | ----------------- associated function in this implementation
8 |     pub(crate) fn new() -> Self {
  |                   ^^^

warning: function `url_button` is never used
  --> crates/brush-app/src/panels/presets.rs:13:4
   |
13 | fn url_button(label: &str, url: &str, ui: &mut egui::Ui) {
   |    ^^^^^^^^^^

warning: struct `StatsPanel` is never constructed
  --> crates/brush-app/src/panels/stats.rs:10:19
   |
10 | pub(crate) struct StatsPanel {
   |                   ^^^^^^^^^^

warning: associated function `new` is never used
  --> crates/brush-app/src/panels/stats.rs:27:19
   |
26 | impl StatsPanel {
   | --------------- associated function in this implementation
27 |     pub(crate) fn new(device: WgpuDevice, adapter_info: AdapterInfo) -> Self {
   |                   ^^^

warning: function `bytes_format` is never used
  --> crates/brush-app/src/panels/stats.rs:43:4
   |
43 | fn bytes_format(bytes: u64) -> String {
   |    ^^^^^^^^^^^^

warning: fields `index`, `view_type`, and `texture_handle` are never read
  --> crates/brush-app/src/overlays/dataset_detail.rs:18:5
   |
17 | struct SelectedView {
   |        ------------ fields in this struct
18 |     index: usize,
   |     ^^^^^
19 |     view_type: ViewType,
   |     ^^^^^^^^^
20 |     texture_handle: TextureHandle,
   |     ^^^^^^^^^^^^^^
   |
   = note: `SelectedView` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: function `selected_scene` is never used
  --> crates/brush-app/src/overlays/dataset_detail.rs:32:4
   |
32 | fn selected_scene(t: ViewType, context: &AppContext) -> &Scene {
   |    ^^^^^^^^^^^^^^

warning: method `get_view` is never used
  --> crates/brush-app/src/overlays/dataset_detail.rs:44:8
   |
43 | impl SelectedView {
   | ----------------- method in this implementation
44 |     fn get_view<'a>(&'a self, context: &'a AppContext) -> &'a SceneView {
   |        ^^^^^^^^

warning: function `url_button` is never used
  --> crates/brush-app/src/overlays/dataset_detail.rs:86:4
   |
86 | fn url_button(label: &str, url: &str, ui: &mut egui::Ui) {
   |    ^^^^^^^^^^

warning: multiple methods are never used
    --> crates/brush-app/src/overlays/dataset_detail.rs:172:19
     |
90   | impl DatasetDetailOverlay {
     | ------------------------- methods in this implementation
...
172  |     pub(crate) fn set_selected_folder(&mut self, folder: PathBuf) {
     |                   ^^^^^^^^^^^^^^^^^^^
...
362  |     pub(crate) fn wants_to_select_folder(&self) -> bool {
     |                   ^^^^^^^^^^^^^^^^^^^^^^
...
367  |     pub(crate) fn folder_selection_started(&mut self) {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^
...
372  |     pub(crate) fn cancel_folder_selection(&mut self) {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^
...
402  |     pub(crate) fn set_selected_file(&mut self, file_path: PathBuf) {
     |                   ^^^^^^^^^^^^^^^^^
...
575  |     fn copy_file_as_is(&mut self, file_path: &PathBuf, _dataset_folder: &PathBuf) {
     |        ^^^^^^^^^^^^^^^
...
1335 |     fn copy_folder(&self, source_folder: &PathBuf, dest_folder: &PathBuf) -> io::Result<()> {
     |        ^^^^^^^^^^^
...
1358 |     pub(crate) fn wants_to_select_dataset_folder(&self) -> bool {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1362 |     pub(crate) fn dataset_folder_selection_started(&mut self) {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1367 |     pub(crate) fn cancel_dataset_folder_selection(&mut self) {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1378 |     pub(crate) fn set_selected_dataset_folder(&mut self, folder_path: PathBuf) {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1443 |     fn process_selected_dataset_folder(&mut self, folder_path: PathBuf, dataset_folder: PathBuf) {
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1576 |     pub(crate) fn copy_datasets_to_local(&self) -> bool {
     |                   ^^^^^^^^^^^^^^^^^^^^^^
...
1582 |     pub(crate) fn set_copy_datasets_to_local(&mut self, should_copy: bool) {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1596 |     pub(crate) fn get_datasets_folder(&self) -> Option<PathBuf> {
     |                   ^^^^^^^^^^^^^^^^^^^
...
1629 |     pub(crate) fn set_selected_folders(&mut self, folder_paths: Vec<PathBuf>) {
     |                   ^^^^^^^^^^^^^^^^^^^^

warning: field `url` is never read
  --> crates/brush-app/src/overlays/settings_detail.rs:14:5
   |
11 | pub(crate) struct SettingsDetailOverlay {
   |                   --------------------- field in this struct
...
14 |     url: String,
   |     ^^^

warning: field `gpu_stats` is never read
  --> crates/brush-app/src/overlays/stats_detail.rs:22:5
   |
10 | pub(crate) struct StatsDetailOverlay {
   |                   ------------------ field in this struct
...
22 |     gpu_stats: GpuStats,
   |     ^^^^^^^^^

warning: methods `get_live_update`, `set_live_update`, `get_paused`, and `set_paused` are never used
   --> crates/brush-app/src/overlays/controls_detail.rs:195:19
    |
16  | impl ControlsDetailOverlay {
    | -------------------------- methods in this implementation
...
195 |     pub(crate) fn get_live_update(&self) -> bool {
    |                   ^^^^^^^^^^^^^^^
...
199 |     pub(crate) fn set_live_update(&mut self, live_update: bool) {
    |                   ^^^^^^^^^^^^^^^
...
203 |     pub(crate) fn get_paused(&self) -> bool {
    |                   ^^^^^^^^^^
...
207 |     pub(crate) fn set_paused(&mut self, paused: bool) {
    |                   ^^^^^^^^^^

warning: `brush-app` (lib) generated 37 warnings (run `cargo fix --lib -p brush-app` to apply 15 suggestions)
warning: unused import: `brush_app::app::AppCreateCb`
 --> crates/brush-app/src/bin/bin.rs:5:5
  |
5 | use brush_app::app::AppCreateCb;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `wgpu_options`
   --> crates/brush-app/src/bin/bin.rs:190:17
    |
190 |             let wgpu_options = brush_ui::create_egui_options();
    |                 ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_wgpu_options`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: constant `BUILD_TIME` is never used
  --> crates/brush-app/src/bin/bin.rs:19:7
   |
19 | const BUILD_TIME: &str = "2025-03-17 (manual)";
   |       ^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: `brush-app` (bin "brush_app") generated 3 warnings (run `cargo fix --bin "brush_app"` to apply 1 suggestion)
    Finished `dev` profile [optimized + debuginfo] target(s) in 0.34s
2025-03-19T19:24:38.605363Z  INFO applying new distribution
2025-03-19T19:24:38.607307Z  INFO ✅ success
