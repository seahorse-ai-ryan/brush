---
description: Ryan's personal workflow for Brush development
globs: 
alwaysApply: true
---

# Ryan's Brush Development Workflow

## Environment Setup

My preferred development environment setup follows the standard workflow in `brush_dev_workflow.mdc` with these personal modifications:

### MCP Server
⚠️ **IMPORTANT**: Start the MCP server by pasting this as a plain code block with triple backticks. DO NOT use the run_terminal_cmd tool.

```bash
cd /Users/ryanhickman/code/brush && (pkill -f "browser-tools-server" || true) && npx @agentdeskai/browser-tools-server@1.2.0 --port 3025
```

This allows the user to click the "Run" button and execute in the background without opening a terminal tab, keeping the terminal as a panel instead.

### Trunk Server
⚠️ **IMPORTANT**: For the Trunk server, also use a plain code block with triple backticks, NOT the run_terminal_cmd tool:

```bash
cd /Users/ryanhickman/code/brush && (pkill -f "trunk serve" || true) && trunk serve
```

This ensures Trunk server keeps running in a panel (not a tab) and avoids opening multiple terminals.

## Using BrowserTools MCP

⚠️ **AI AGENT INSTRUCTIONS**: 

1. Access browser data through natural language:
   - "What messages are in the console logs?" - Returns browser console logs
   - "Are there any errors in the console?" - Returns browser console errors
   - "Check network logs" - Returns XHR success responses
   - "Check network errors" - Returns XHR error responses 
   - "Take a screenshot" - Captures browser view
   - "What element is selected" - Returns current DOM selection
   - "Wipe logs" - Clears stored logs

2. DO NOT:
   - Use curl commands or API endpoints
   - Parse log files manually
   - Use terminal commands to access browser data
   - Use run_terminal_cmd to start servers (use plain code blocks instead)

3. Development workflow:
   - Make code changes
   - Trunk automatically rebuilds
   - Browser automatically reloads
   - MCP captures all console logs
   - Repeat

4. Prerequisites (handled by user):
   - Chrome with BrowserTools extension
   - DevTools panel open
   - Browser navigated to app

## AI-Assisted Development

When working with AI assistants on the Brush project:

1. **Start each session with context:**
   - Provide the current branch: `new-ui`
   - Mention any recent significant changes
   - Specify the goals for the current session

2. **Debugging process:**
   - Start MCP and Trunk servers in panels (not tabs) using plain code blocks
   - Make code changes and observe them being automatically rebuilt and reloaded
   - Ask the AI to analyze MCP logs for errors
   - Request specific changes to improve error handling or diagnostics

3. **Documentation updates:**
   - Request that the AI update relevant documentation
   - Have the AI explain where documentation changes fit in the overall doc structure
   - Record lessons learned for common issues

4. **Workflow Integration:**
   - Always hit "Accept All" in the Cursor UI before committing changes
   - AI should never commit changes without explicit confirmation
   - AI should remind you to accept changes before git operations
   - Verify committed changes match what you see in the editor

## Git Workflow Best Practices

When using AI assistants with git:

1. **Before Committing Changes:**
   - AI should always confirm you've accepted changes in Cursor
   - AI should show `git status` before committing to verify what will be included
   - AI should not automatically execute git commit or push operations
   - AI should suggest what to commit and ask for confirmation

2. **After Committing Changes:**
   - AI should show the commit hash or summary for verification
   - AI should confirm successful pushes to remote repositories

## Common Personal Commands

Commands I frequently use:

### Kill Development Servers
⚠️ Present as plain code block with triple backticks:

```bash
cd /Users/ryanhickman/code/brush && (pkill -f "trunk serve" || true) && (pkill -f "browser-tools-server" || true)
```

### Status Check
⚠️ Use run_terminal_cmd with require_user_approval: false:

```json
{
  "command": "git status && ls -la .cursor/rules/",
  "is_background": false,
  "require_user_approval": false,
  "explanation": "Quick status check"
}
```

### Commit Workflow Files
⚠️ Present as plain code block with triple backticks (user will manually run):

```bash
git add .cursor/rules/ryan_workflow.mdc && git commit -m "Update personal workflow documentation" && git push origin new-ui
```

## Rule Organization

For AI-assisted development, refer to:
- `brush_dev_workflow.mdc` - Standard development workflow (always applied)
- `brush_debug.mdc` - Specific debugging techniques (on demand)
- `brush_coding_guide.mdc` - Coding standards and best practices
- `brush_technical.mdc` - Technical implementation details
- `brush_project.mdc` - Project overview and architecture

## NOTE: PERSONAL RULES FILE

This file contains my personal workflow preferences and is not intended for upstream contribution. It should remain in the project's .cursor/rules directory for my own use but should not be pushed to the main repository. 