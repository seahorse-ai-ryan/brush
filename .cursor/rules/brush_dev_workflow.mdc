---
description: Standard development workflow for Brush
globs: [".rs", ".toml", ".md"]
alwaysApply: true
---

# Brush Development Workflow

This rule provides standard guidance for daily development on the Brush project.

## üöÄ Development Setup

When starting a new development session:

### 1. Start MCP Server

First, start the MCP server to capture browser console logs:

```bash
cd <project_root> && npx @agentdeskai/browser-tools-server@1.2.0 --port 3025
```

Note: To avoid port conflicts, kill any existing MCP servers before starting a new one:

```bash
cd <project_root> && (pkill -f "browser-tools-server" || true) && npx @agentdeskai/browser-tools-server@1.2.0 --port 3025
```

‚ö†Ô∏è **IMPORTANT**: Start the MCP server by pasting this as a plain code block with triple backticks. DO NOT use the run_terminal_cmd tool to avoid opening new terminal tabs.

### 2. Start Trunk Server

Start the Trunk server to build and serve the application:

```bash
cd <project_root> && trunk serve
```

Note: To avoid port conflicts, kill any existing Trunk servers before starting a new one:

```bash
cd <project_root> && (pkill -f "trunk serve" || true) && trunk serve
```

‚ö†Ô∏è **IMPORTANT**: Start the Trunk server by pasting this as a plain code block with triple backticks. DO NOT use the run_terminal_cmd tool to avoid opening new terminal tabs.

For extensive builds that might cause chat stalling, use:

```bash
cd <project_root> && mkdir -p logs && trunk serve > logs/trunk_output.log 2>&1 & echo "Trunk server started with PID $! - logs in logs/trunk_output.log"
```

### 3. Access the Application

Open the application in Chrome:
```
http://localhost:8080/
```

Ensure Chrome DevTools are open and the BrowserTools extension is active.

## üìù Development Cycle

A typical development cycle consists of:

1. **Start servers** - MCP and Trunk in separate terminal panels (not tabs)
2. **Modify code** in the codebase
3. **Observe Trunk** automatically rebuilding (no manual restart needed)
4. **Browser auto-reloads** when build completes
5. **Check MCP logs** to see console output and errors
6. **Repeat** until feature is complete

This workflow is fully automated - you make changes, and everything else happens automatically.

## üß™ Testing and Validation

For testing your changes:

1. **URL Parameters**:
   - `?debug=true` - Enable debug mode
   - `?diagnostic=true` - Enable diagnostic logging
   - `?test=ply-loading` - Test specific functionality

2. **Browser Reload**:
   If hot reload isn't working, manually trigger:
   ```bash
   curl -X POST http://localhost:8080/_trunk/reload
   ```

## üõ† Common Issues

### Trunk Server Already Running
If you get "Address already in use" errors:

```bash
pkill -f "trunk serve" || true
```
Then try starting Trunk again.

### MCP Server Already Running
If you get port conflicts with the MCP server:

```bash
pkill -f "browser-tools-server" || true
```
Then try starting the MCP server again.

### Kill All Development Servers
To stop all running development servers:

```bash
pkill -f "trunk serve" || true && pkill -f "browser-tools-server" || true
```

### Stalled Chat
If the chat stalls due to verbose Trunk output:
- Use the background processing approach above
- Monitor logs with: `tail -n 20 logs/trunk_output.log`
- Check for errors: `grep -E "error|failed|panic" logs/trunk_output.log`

## üîç Cross-Platform Considerations

When writing code that needs to work across platforms:

1. Use `#[cfg(target_arch = "wasm32")]` for web-specific code
2. Use `#[cfg(not(target_arch = "wasm32"))]` for native-only code
3. Be mindful of browser limitations (filesystem access, etc.)
4. Test on both web and native platforms when possible

## üìÅ Project Structure Reference

- `crates/brush-app/` - Main application code
  - `src/app.rs` - Application entry point
  - `src/overlays/` - UI overlays including dataset handling
  - `src/panels/` - Main UI panels
- `crates/brush-dataset/` - Dataset management
- `crates/brush-render/` - Rendering pipeline
- `docs/` - Documentation files

## üìñ Further Resources

For more detailed information:
- `brush_debug.mdc` - For debugging-specific workflows
- `brush_technical.mdc` - For technical implementation standards
- `brush_coding_guide.mdc` - For coding conventions
- `ryan_workflow.mdc` - For Ryan's personal preferences 