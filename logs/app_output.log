warning: unused import: `std::io::Error`
 --> crates/rrfd/src/lib.rs:8:5
  |
8 | use std::io::Error;
  |     ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::io::ErrorKind`
 --> crates/rrfd/src/lib.rs:9:5
  |
9 | use std::io::ErrorKind;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::path::Path`
 --> crates/brush-dataset/src/storage/mod.rs:7:5
  |
7 | use std::path::Path;
  |     ^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `Path`
 --> crates/brush-dataset/src/storage/filesystem.rs:4:17
  |
4 | use std::path::{Path, PathBuf};
  |                 ^^^^

warning: `rrfd` (lib) generated 2 warnings (run `cargo fix --lib -p rrfd` to apply 2 suggestions)
warning: `brush-dataset` (lib) generated 2 warnings (run `cargo fix --lib -p brush-dataset` to apply 2 suggestions)
warning: unused import: `egui::ThemePreference`
  --> crates/brush-app/src/app.rs:21:5
   |
21 | use egui::ThemePreference;
   |     ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::fmt::Debug`
  --> crates/brush-app/src/app.rs:26:5
   |
26 | use std::fmt::Debug;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `std::hash::Hash`
  --> crates/brush-app/src/app.rs:27:5
   |
27 | use std::hash::Hash;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `std::io::Error`
  --> crates/brush-app/src/app.rs:28:5
   |
28 | use std::io::Error;
   |     ^^^^^^^^^^^^^^

warning: unused import: `std::io::ErrorKind`
  --> crates/brush-app/src/app.rs:29:5
   |
29 | use std::io::ErrorKind;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
  --> crates/brush-app/src/app.rs:30:5
   |
30 | use std::pin::Pin;
   |     ^^^^^^^^^^^^^

warning: unused imports: `Duration` and `SystemTime`
  --> crates/brush-app/src/app.rs:32:17
   |
32 | use std::time::{Duration, SystemTime};
   |                 ^^^^^^^^  ^^^^^^^^^^

warning: unused imports: `Align2` and `RichText`
  --> crates/brush-app/src/app.rs:33:12
   |
33 | use egui::{Align2, RichText};
   |            ^^^^^^  ^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
  --> crates/brush-app/src/app.rs:34:5
   |
34 | use brush_dataset::splat_export;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `tokio_with_wasm::alias as tokio_wasm`
  --> crates/brush-app/src/app.rs:35:5
   |
35 | use tokio_with_wasm::alias as tokio_wasm;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ExportError` and `ExportFormat`
  --> crates/brush-app/src/app.rs:36:44
   |
36 | use crate::export_service::{ExportService, ExportError, ExportFormat};
   |                                            ^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `brush_dataset::storage`
  --> crates/brush-app/src/app.rs:37:5
   |
37 | use brush_dataset::storage;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `brush_dataset::splat_export`
 --> crates/brush-app/src/panels/scene.rs:1:5
  |
1 | use brush_dataset::splat_export;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ControlMessage`
 --> crates/brush-app/src/panels/scene.rs:2:35
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                   ^^^^^^^^^^^^^^

warning: unused import: `tokio_with_wasm::alias as tokio_wasm`
  --> crates/brush-app/src/panels/scene.rs:17:5
   |
17 | use tokio_with_wasm::alias as tokio_wasm;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::utils`
  --> crates/brush-app/src/overlays/dataset_detail.rs:14:5
   |
14 | use crate::utils;
   |     ^^^^^^^^^^^^

warning: unused import: `ProcessMessage`
 --> crates/brush-app/src/overlays/controls_detail.rs:2:51
  |
2 | use brush_process::process_loop::{ControlMessage, ProcessMessage};
  |                                                   ^^^^^^^^^^^^^^

warning: unused variable: `build_timestamp`
   --> crates/brush-app/src/app.rs:697:13
    |
697 |         let build_timestamp = format!("{}", chrono::Local::now().format("%Y-%m-%d %H:%M:%S"));
    |             ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_build_timestamp`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: variable does not need to be mutable
   --> crates/brush-app/src/app.rs:700:13
    |
700 |         let mut url_params = parse_url_params_with_override(start_uri_override.as_ref());
    |             ----^^^^^^^^^^
    |             |
    |             help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: unused variable: `view_aspect`
  --> crates/brush-app/src/panels/scene.rs:96:21
   |
96 |         if let Some(view_aspect) = context.view_aspect {
   |                     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_view_aspect`

warning: unused variable: `filename`
   --> crates/brush-app/src/overlays/dataset_detail.rs:403:13
    |
403 |         let filename = file_path.file_name().unwrap_or_default().to_string_lossy().to_string();
    |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_filename`

warning: function `parse_search` is never used
   --> crates/brush-app/src/app.rs:138:4
    |
138 | fn parse_search(search: &str) -> HashMap<String, String> {
    |    ^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: fields `build_timestamp` and `diagnostic_mode` are never read
   --> crates/brush-app/src/app.rs:164:5
    |
155 | pub struct App {
    |            --- fields in this struct
...
164 |     build_timestamp: String,
    |     ^^^^^^^^^^^^^^^
165 |     diagnostic_mode: bool,
    |     ^^^^^^^^^^^^^^^

warning: method `get_scene_panel_mut` is never used
   --> crates/brush-app/src/app.rs:659:8
    |
207 | impl AppContext {
    | --------------- method in this implementation
...
659 |     fn get_scene_panel_mut(&mut self) -> Option<&mut ScenePanel> {
    |        ^^^^^^^^^^^^^^^^^^^

warning: field `default_format` is never read
  --> crates/brush-app/src/export_service.rs:74:5
   |
69 | pub struct ExportService {
   |            ------------- field in this struct
...
74 |     default_format: ExportFormat,
   |     ^^^^^^^^^^^^^^
   |
   = note: `ExportService` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: struct `SettingsPanel` is never constructed
  --> crates/brush-app/src/panels/settings.rs:10:19
   |
10 | pub(crate) struct SettingsPanel {
   |                   ^^^^^^^^^^^^^

warning: associated function `new` is never used
  --> crates/brush-app/src/panels/settings.rs:16:19
   |
15 | impl SettingsPanel {
   | ------------------ associated function in this implementation
16 |     pub(crate) fn new() -> Self {
   |                   ^^^

warning: struct `PresetsPanel` is never constructed
 --> crates/brush-app/src/panels/presets.rs:5:19
  |
5 | pub(crate) struct PresetsPanel {}
  |                   ^^^^^^^^^^^^

warning: associated function `new` is never used
 --> crates/brush-app/src/panels/presets.rs:8:19
  |
7 | impl PresetsPanel {
  | ----------------- associated function in this implementation
8 |     pub(crate) fn new() -> Self {
  |                   ^^^

warning: function `url_button` is never used
  --> crates/brush-app/src/panels/presets.rs:13:4
   |
13 | fn url_button(label: &str, url: &str, ui: &mut egui::Ui) {
   |    ^^^^^^^^^^

warning: struct `StatsPanel` is never constructed
  --> crates/brush-app/src/panels/stats.rs:10:19
   |
10 | pub(crate) struct StatsPanel {
   |                   ^^^^^^^^^^

warning: associated function `new` is never used
  --> crates/brush-app/src/panels/stats.rs:27:19
   |
26 | impl StatsPanel {
   | --------------- associated function in this implementation
27 |     pub(crate) fn new(device: WgpuDevice, adapter_info: AdapterInfo) -> Self {
   |                   ^^^

warning: function `bytes_format` is never used
  --> crates/brush-app/src/panels/stats.rs:43:4
   |
43 | fn bytes_format(bytes: u64) -> String {
   |    ^^^^^^^^^^^^

warning: fields `index`, `view_type`, and `texture_handle` are never read
  --> crates/brush-app/src/overlays/dataset_detail.rs:18:5
   |
17 | struct SelectedView {
   |        ------------ fields in this struct
18 |     index: usize,
   |     ^^^^^
19 |     view_type: ViewType,
   |     ^^^^^^^^^
20 |     texture_handle: TextureHandle,
   |     ^^^^^^^^^^^^^^
   |
   = note: `SelectedView` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: function `selected_scene` is never used
  --> crates/brush-app/src/overlays/dataset_detail.rs:32:4
   |
32 | fn selected_scene(t: ViewType, context: &AppContext) -> &Scene {
   |    ^^^^^^^^^^^^^^

warning: method `get_view` is never used
  --> crates/brush-app/src/overlays/dataset_detail.rs:44:8
   |
43 | impl SelectedView {
   | ----------------- method in this implementation
44 |     fn get_view<'a>(&'a self, context: &'a AppContext) -> &'a SceneView {
   |        ^^^^^^^^

warning: function `url_button` is never used
  --> crates/brush-app/src/overlays/dataset_detail.rs:86:4
   |
86 | fn url_button(label: &str, url: &str, ui: &mut egui::Ui) {
   |    ^^^^^^^^^^

warning: multiple methods are never used
    --> crates/brush-app/src/overlays/dataset_detail.rs:172:19
     |
90   | impl DatasetDetailOverlay {
     | ------------------------- methods in this implementation
...
172  |     pub(crate) fn set_selected_folder(&mut self, folder: PathBuf) {
     |                   ^^^^^^^^^^^^^^^^^^^
...
362  |     pub(crate) fn wants_to_select_folder(&self) -> bool {
     |                   ^^^^^^^^^^^^^^^^^^^^^^
...
367  |     pub(crate) fn folder_selection_started(&mut self) {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^
...
372  |     pub(crate) fn cancel_folder_selection(&mut self) {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^
...
402  |     pub(crate) fn set_selected_file(&mut self, file_path: PathBuf) {
     |                   ^^^^^^^^^^^^^^^^^
...
1335 |     fn copy_folder(&self, source_folder: &PathBuf, dest_folder: &PathBuf) -> io::Result<()> {
     |        ^^^^^^^^^^^
...
1358 |     pub(crate) fn wants_to_select_dataset_folder(&self) -> bool {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1362 |     pub(crate) fn dataset_folder_selection_started(&mut self) {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1367 |     pub(crate) fn cancel_dataset_folder_selection(&mut self) {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1378 |     pub(crate) fn set_selected_dataset_folder(&mut self, folder_path: PathBuf) {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1443 |     fn process_selected_dataset_folder(&mut self, folder_path: PathBuf, dataset_folder: PathBuf) {
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1576 |     pub(crate) fn copy_datasets_to_local(&self) -> bool {
     |                   ^^^^^^^^^^^^^^^^^^^^^^
...
1582 |     pub(crate) fn set_copy_datasets_to_local(&mut self, should_copy: bool) {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1596 |     pub(crate) fn get_datasets_folder(&self) -> Option<PathBuf> {
     |                   ^^^^^^^^^^^^^^^^^^^
...
1629 |     pub(crate) fn set_selected_folders(&mut self, folder_paths: Vec<PathBuf>) {
     |                   ^^^^^^^^^^^^^^^^^^^^

warning: field `url` is never read
  --> crates/brush-app/src/overlays/settings_detail.rs:14:5
   |
11 | pub(crate) struct SettingsDetailOverlay {
   |                   --------------------- field in this struct
...
14 |     url: String,
   |     ^^^

warning: field `gpu_stats` is never read
  --> crates/brush-app/src/overlays/stats_detail.rs:22:5
   |
10 | pub(crate) struct StatsDetailOverlay {
   |                   ------------------ field in this struct
...
22 |     gpu_stats: GpuStats,
   |     ^^^^^^^^^

warning: methods `get_live_update`, `set_live_update`, `get_paused`, and `set_paused` are never used
   --> crates/brush-app/src/overlays/controls_detail.rs:195:19
    |
16  | impl ControlsDetailOverlay {
    | -------------------------- methods in this implementation
...
195 |     pub(crate) fn get_live_update(&self) -> bool {
    |                   ^^^^^^^^^^^^^^^
...
199 |     pub(crate) fn set_live_update(&mut self, live_update: bool) {
    |                   ^^^^^^^^^^^^^^^
...
203 |     pub(crate) fn get_paused(&self) -> bool {
    |                   ^^^^^^^^^^
...
207 |     pub(crate) fn set_paused(&mut self, paused: bool) {
    |                   ^^^^^^^^^^

warning: `brush-app` (lib) generated 41 warnings (run `cargo fix --lib -p brush-app` to apply 18 suggestions)
warning: unused import: `brush_app::utils::set_panic_hook`
 --> crates/brush-app/src/bin/bin.rs:6:5
  |
6 | use brush_app::utils::set_panic_hook;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: constant `BUILD_TIME` is never used
  --> crates/brush-app/src/bin/bin.rs:19:7
   |
19 | const BUILD_TIME: &str = "2025-03-17 (manual)";
   |       ^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: `brush-app` (bin "brush_app") generated 2 warnings (run `cargo fix --bin "brush_app"` to apply 1 suggestion)
    Finished `dev` profile [optimized + debuginfo] target(s) in 0.41s
     Running `target/debug/brush_app`
BRUSH_INFO: 🔄 Build timestamp: 2025-03-22 18:16:31
BRUSH_INFO: 🔍 Diagnostic mode: false
Loaded 5 datasets from folder: /Users/ryanhickman/Documents/Brush/Datasets
